### YamlMime:TSType
name: EventGridClient
uid: '@azure/eventgrid-namespaces.EventGridClient'
package: '@azure/eventgrid-namespaces'
summary: Event Grid Namespaces Client
fullName: EventGridClient
remarks: ''
isDeprecated: false
type: class
constructors:
  - name: >-
      EventGridClient(string, AzureKeyCredential | TokenCredential,
      EventGridClientOptions)
    uid: '@azure/eventgrid-namespaces.EventGridClient.constructor'
    package: '@azure/eventgrid-namespaces'
    summary: Azure Messaging EventGrid Client
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        new EventGridClient(endpoint: string, credential: AzureKeyCredential |
        TokenCredential, options?: EventGridClientOptions)
      parameters:
        - id: endpoint
          type: string
          description: ''
        - id: credential
          type: >-
            <xref uid="@azure/eventgrid-namespaces.AzureKeyCredential" /> |
            <xref uid="@azure/core-auth.TokenCredential" />
          description: ''
        - id: options
          type: <xref uid="@azure/eventgrid-namespaces.EventGridClientOptions" />
          description: ''
methods:
  - name: >-
      acknowledgeCloudEvents(string[], string, string,
      AcknowledgeCloudEventsOptions)
    uid: '@azure/eventgrid-namespaces.EventGridClient.acknowledgeCloudEvents'
    package: '@azure/eventgrid-namespaces'
    summary: >-
      Acknowledge batch of Cloud Events. The server responds with an HTTP 200
      status code if at least one

      event is successfully acknowledged. The response body will include the set
      of successfully acknowledged

      lockTokens, along with other failed lockTokens with their corresponding
      error information. Successfully

      acknowledged events will no longer be available to any consumer.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function acknowledgeCloudEvents(lockTokens: string[], topicName: string,
        eventSubscriptionName: string, options?: AcknowledgeCloudEventsOptions):
        Promise<AcknowledgeResult>
      parameters:
        - id: lockTokens
          type: string[]
          description: Lock Tokens
        - id: topicName
          type: string
          description: Topic Name
        - id: eventSubscriptionName
          type: string
          description: Name of the Event Subscription
        - id: options
          type: >-
            <xref
            uid="@azure/eventgrid-namespaces.AcknowledgeCloudEventsOptions" />
          description: Options to Acknowledge
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/eventgrid-namespaces.AcknowledgeResult"
          />&gt;
  - name: publishCloudEvent<T>(CloudEvent<T>, string, PublishCloudEventOptions)
    uid: '@azure/eventgrid-namespaces.EventGridClient.publishCloudEvent'
    package: '@azure/eventgrid-namespaces'
    summary: >-
      Publish Single Cloud Event to namespace topic. In case of success, the
      server responds with an HTTP 200

      status code with an empty JSON object in response. Otherwise, the server
      can return various error codes.

      For example, 401: which indicates authorization failure, 403: which
      indicates quota exceeded or message

      is too large, 410: which indicates that specific topic is not found, 400:
      for bad request, and 500: for

      internal server error.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function publishCloudEvent<T>(event: CloudEvent<T>, topicName: string,
        options?: PublishCloudEventOptions): Promise<void>
      parameters:
        - id: event
          type: <xref uid="@azure/eventgrid-namespaces.CloudEvent" />&lt;T&gt;
          description: Event to publish
        - id: topicName
          type: string
          description: Topic to publish the event
        - id: options
          type: <xref uid="@azure/eventgrid-namespaces.PublishCloudEventOptions" />
          description: Options to publish
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: publishCloudEvents<T>(CloudEvent<T>[], string, PublishCloudEventsOptions)
    uid: '@azure/eventgrid-namespaces.EventGridClient.publishCloudEvents'
    package: '@azure/eventgrid-namespaces'
    summary: >-
      Publish Batch Cloud Event to namespace topic. In case of success, the
      server responds with an HTTP 200

      status code with an empty JSON object in response. Otherwise, the server
      can return various error codes.

      For example, 401: which indicates authorization failure, 403: which
      indicates quota exceeded or message

      is too large, 410: which indicates that specific topic is not found, 400:
      for bad request, and 500: for

      internal server error.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function publishCloudEvents<T>(events: CloudEvent<T>[], topicName:
        string, options?: PublishCloudEventsOptions): Promise<void>
      parameters:
        - id: events
          type: <xref uid="@azure/eventgrid-namespaces.CloudEvent" />&lt;T&gt;[]
          description: Events to publish
        - id: topicName
          type: string
          description: Topic to publish the event
        - id: options
          type: <xref uid="@azure/eventgrid-namespaces.PublishCloudEventsOptions" />
          description: Options to publish
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: receiveCloudEvents(string, string, ReceiveCloudEventsOptions)
    uid: '@azure/eventgrid-namespaces.EventGridClient.receiveCloudEvents'
    package: '@azure/eventgrid-namespaces'
    summary: Receive Batch of Cloud Events from the Event Subscription.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function receiveCloudEvents(topicName: string, eventSubscriptionName:
        string, options?: ReceiveCloudEventsOptions): Promise<ReceiveResult>
      parameters:
        - id: topicName
          type: string
          description: Topic to receive
        - id: eventSubscriptionName
          type: string
          description: Name of the Event Subscription
        - id: options
          type: <xref uid="@azure/eventgrid-namespaces.ReceiveCloudEventsOptions" />
          description: Options to receive
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/eventgrid-namespaces.ReceiveResult"
          />&gt;
  - name: rejectCloudEvents(string[], string, string, RejectCloudEventsOptions)
    uid: '@azure/eventgrid-namespaces.EventGridClient.rejectCloudEvents'
    package: '@azure/eventgrid-namespaces'
    summary: Reject batch of Cloud Events.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function rejectCloudEvents(lockTokens: string[], topicName: string,
        eventSubscriptionName: string, options?: RejectCloudEventsOptions):
        Promise<RejectResult>
      parameters:
        - id: lockTokens
          type: string[]
          description: Lock Tokens
        - id: topicName
          type: string
          description: Topic Name
        - id: eventSubscriptionName
          type: string
          description: Name of the Event Subscription
        - id: options
          type: <xref uid="@azure/eventgrid-namespaces.RejectCloudEventsOptions" />
          description: Options to reject
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/eventgrid-namespaces.RejectResult" />&gt;
  - name: releaseCloudEvents(string[], string, string, ReleaseCloudEventsOptions)
    uid: '@azure/eventgrid-namespaces.EventGridClient.releaseCloudEvents'
    package: '@azure/eventgrid-namespaces'
    summary: >-
      Release batch of Cloud Events. The server responds with an HTTP 200 status
      code if at least one event is

      successfully released. The response body will include the set of
      successfully released lockTokens, along

      with other failed lockTokens with their corresponding error information.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function releaseCloudEvents(lockTokens: string[], topicName: string,
        eventSubscriptionName: string, options?: ReleaseCloudEventsOptions):
        Promise<ReleaseResult>
      parameters:
        - id: lockTokens
          type: string[]
          description: Lock Tokens
        - id: topicName
          type: string
          description: Topic Name
        - id: eventSubscriptionName
          type: string
          description: Name of the Event Subscription
        - id: options
          type: <xref uid="@azure/eventgrid-namespaces.ReleaseCloudEventsOptions" />
          description: Options to release
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/eventgrid-namespaces.ReleaseResult"
          />&gt;
  - name: >-
      renewCloudEventLocks(string[], string, string,
      RenewCloudEventLocksOptions)
    uid: '@azure/eventgrid-namespaces.EventGridClient.renewCloudEventLocks'
    package: '@azure/eventgrid-namespaces'
    summary: Renew lock for batch of Cloud Events.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function renewCloudEventLocks(lockTokens: string[], topicName: string,
        eventSubscriptionName: string, options?: RenewCloudEventLocksOptions):
        Promise<RenewCloudEventLocksResult>
      parameters:
        - id: lockTokens
          type: string[]
          description: Lock Tokens
        - id: topicName
          type: string
          description: Topic Name
        - id: eventSubscriptionName
          type: string
          description: Name of the Event Subscription
        - id: options
          type: >-
            <xref uid="@azure/eventgrid-namespaces.RenewCloudEventLocksOptions"
            />
          description: Options to renew
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/eventgrid-namespaces.RenewCloudEventLocksResult" />&gt;
