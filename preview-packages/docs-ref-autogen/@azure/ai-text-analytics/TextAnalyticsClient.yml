### YamlMime:UniversalReference
items:
  - uid: '@azure/ai-text-analytics.TextAnalyticsClient'
    name: TextAnalyticsClient
    fullName: TextAnalyticsClient
    children:
      - '@azure/ai-text-analytics.TextAnalyticsClient.analyzeSentiment'
      - '@azure/ai-text-analytics.TextAnalyticsClient.analyzeSentiment_1'
      - '@azure/ai-text-analytics.TextAnalyticsClient.defaultCountryHint'
      - '@azure/ai-text-analytics.TextAnalyticsClient.defaultLanguage'
      - '@azure/ai-text-analytics.TextAnalyticsClient.detectLanguage_1'
      - '@azure/ai-text-analytics.TextAnalyticsClient.detectLanguage'
      - '@azure/ai-text-analytics.TextAnalyticsClient.endpointUrl'
      - '@azure/ai-text-analytics.TextAnalyticsClient.extractKeyPhrases'
      - '@azure/ai-text-analytics.TextAnalyticsClient.extractKeyPhrases_1'
      - '@azure/ai-text-analytics.TextAnalyticsClient.recognizeEntities'
      - '@azure/ai-text-analytics.TextAnalyticsClient.recognizeEntities_1'
      - '@azure/ai-text-analytics.TextAnalyticsClient.recognizeLinkedEntities'
      - '@azure/ai-text-analytics.TextAnalyticsClient.recognizeLinkedEntities_1'
      - '@azure/ai-text-analytics.TextAnalyticsClient.constructor'
    langs:
      - typeScript
    type: class
    summary: Client class for interacting with Azure Text Analytics.
    package: '@azure/ai-text-analytics'
  - uid: '@azure/ai-text-analytics.TextAnalyticsClient.analyzeSentiment'
    name: 'analyzeSentiment(string[], string, AnalyzeSentimentOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Runs a predictive model to identify the positive, negative, neutral, or
      mixed

      sentiment contained in the input strings, as well as scores indicating

      the model's confidence in each of the predicted sentiments.

      For a list of languages supported by this operation, see

      https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/language-support.
    syntax:
      content: >-
        function analyzeSentiment(documents: string[], language?: string,
        options?: AnalyzeSentimentOptions)
      parameters:
        - id: documents
          type:
            - 'string[]'
          description: The input strings to analyze.
        - id: language
          type:
            - string
          description: |-
            The language that all the input strings are
            written in. If unspecified, this value will be set to the default
            language in `TextAnalyticsClientOptions`.
            If set to an empty string, the service will apply a model
            where the lanuage is explicitly set to "None".
          optional: true
        - id: options
          type:
            - '@azure/ai-text-analytics.AnalyzeSentimentOptions'
          description: |
            Optional parameters for the operation.
          optional: true
      return:
        type:
          - Promise<@azure/ai-text-analytics.AnalyzeSentimentResultCollection>
        description: ''
    package: '@azure/ai-text-analytics'
  - uid: '@azure/ai-text-analytics.TextAnalyticsClient.analyzeSentiment_1'
    name: 'analyzeSentiment(TextDocumentInput[], AnalyzeSentimentOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Runs a predictive model to identify the positive, negative or neutral, or
      mixed

      sentiment contained in the input documents, as well as scores indicating

      the model's confidence in each of the predicted sentiments.

      For a list of languages supported by this operation, see

      https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/language-support.
    syntax:
      content: >-
        function analyzeSentiment(documents: TextDocumentInput[], options?:
        AnalyzeSentimentOptions)
      parameters:
        - id: documents
          type:
            - '@azure/ai-text-analytics.TextDocumentInput[]'
          description: The input documents to analyze.
        - id: options
          type:
            - '@azure/ai-text-analytics.AnalyzeSentimentOptions'
          description: |
            Optional parameters for the operation.
          optional: true
      return:
        type:
          - Promise<@azure/ai-text-analytics.AnalyzeSentimentResultCollection>
        description: ''
    package: '@azure/ai-text-analytics'
  - uid: '@azure/ai-text-analytics.TextAnalyticsClient.defaultCountryHint'
    name: defaultCountryHint
    fullName: defaultCountryHint
    children: []
    langs:
      - typeScript
    type: property
    summary: The default country hint to use. Defaults to "us".
    syntax:
      content: 'defaultCountryHint: string'
      return:
        type:
          - string
        description: ''
    package: '@azure/ai-text-analytics'
  - uid: '@azure/ai-text-analytics.TextAnalyticsClient.defaultLanguage'
    name: defaultLanguage
    fullName: defaultLanguage
    children: []
    langs:
      - typeScript
    type: property
    summary: The default language to use. Defaults to "en".
    syntax:
      content: 'defaultLanguage: string'
      return:
        type:
          - string
        description: ''
    package: '@azure/ai-text-analytics'
  - uid: '@azure/ai-text-analytics.TextAnalyticsClient.detectLanguage_1'
    name: 'detectLanguage(DetectLanguageInput[], DetectLanguageOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Runs a predictive model to determine the language that the passed-in

      input document are written in, and returns, for each one, the detected

      language as well as a score indicating the model's confidence that the

      inferred language is correct.  Scores close to 1 indicate high certainty
      in

      the result.  120 languages are supported.
    syntax:
      content: >-
        function detectLanguage(documents: DetectLanguageInput[], options?:
        DetectLanguageOptions)
      parameters:
        - id: documents
          type:
            - '@azure/ai-text-analytics.DetectLanguageInput[]'
          description: A collection of input documents to analyze.
        - id: options
          type:
            - '@azure/ai-text-analytics.DetectLanguageOptions'
          description: |
            Optional parameters for the operation.
          optional: true
      return:
        type:
          - Promise<@azure/ai-text-analytics.DetectLanguageResultCollection>
        description: ''
    package: '@azure/ai-text-analytics'
  - uid: '@azure/ai-text-analytics.TextAnalyticsClient.detectLanguage'
    name: 'detectLanguage(string[], string, DetectLanguageOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Runs a predictive model to determine the language that the passed-in

      input strings are written in, and returns, for each one, the detected

      language as well as a score indicating the model's confidence that the

      inferred language is correct.  Scores close to 1 indicate high certainty
      in

      the result.  120 languages are supported.
    syntax:
      content: >-
        function detectLanguage(documents: string[], countryHint?: string,
        options?: DetectLanguageOptions)
      parameters:
        - id: documents
          type:
            - 'string[]'
          description: A collection of input strings to analyze.
        - id: countryHint
          type:
            - string
          description: |-
            Indicates the country of origin for all of
              the input strings to assist the text analytics model in predicting
              the language they are written in.  If unspecified, this value will be
              set to the default country hint in `TextAnalyticsClientOptions`.
              If set to an empty string, or the string "none", the service will apply a
              model where the country is explicitly unset.
              The same country hint is applied to all strings in the input collection.
          optional: true
        - id: options
          type:
            - '@azure/ai-text-analytics.DetectLanguageOptions'
          description: |
            Optional parameters for the operation.
          optional: true
      return:
        type:
          - Promise<@azure/ai-text-analytics.DetectLanguageResultCollection>
        description: ''
    package: '@azure/ai-text-analytics'
  - uid: '@azure/ai-text-analytics.TextAnalyticsClient.endpointUrl'
    name: endpointUrl
    fullName: endpointUrl
    children: []
    langs:
      - typeScript
    type: property
    summary: The URL to the TextAnalytics endpoint
    syntax:
      content: 'endpointUrl: string'
      return:
        type:
          - string
        description: ''
    package: '@azure/ai-text-analytics'
  - uid: '@azure/ai-text-analytics.TextAnalyticsClient.extractKeyPhrases'
    name: 'extractKeyPhrases(string[], string, ExtractKeyPhrasesOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Runs a model to identify a collection of significant phrases

      found in the passed-in input strings.

      For a list of languages supported by this operation, see

      https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/language-support.
    syntax:
      content: >-
        function extractKeyPhrases(documents: string[], language?: string,
        options?: ExtractKeyPhrasesOptions)
      parameters:
        - id: documents
          type:
            - 'string[]'
          description: The input strings to analyze.
        - id: language
          type:
            - string
          description: |-
            The language that all the input strings are
            written in. If unspecified, this value will be set to the default
            language in `TextAnalyticsClientOptions`.
            If set to an empty string, the service will apply a model
            where the lanuage is explicitly set to "None".
          optional: true
        - id: options
          type:
            - '@azure/ai-text-analytics.ExtractKeyPhrasesOptions'
          description: |
            Optional parameters for the operation.
          optional: true
      return:
        type:
          - Promise<@azure/ai-text-analytics.ExtractKeyPhrasesResultCollection>
        description: ''
    package: '@azure/ai-text-analytics'
  - uid: '@azure/ai-text-analytics.TextAnalyticsClient.extractKeyPhrases_1'
    name: 'extractKeyPhrases(TextDocumentInput[], ExtractKeyPhrasesOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Runs a model to identify a collection of significant phrases

      found in the passed-in input documents.

      For a list of languages supported by this operation, see

      https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/language-support.
    syntax:
      content: >-
        function extractKeyPhrases(documents: TextDocumentInput[], options?:
        ExtractKeyPhrasesOptions)
      parameters:
        - id: documents
          type:
            - '@azure/ai-text-analytics.TextDocumentInput[]'
          description: The input documents to analyze.
        - id: options
          type:
            - '@azure/ai-text-analytics.ExtractKeyPhrasesOptions'
          description: |
            Optional parameters for the operation.
          optional: true
      return:
        type:
          - Promise<@azure/ai-text-analytics.ExtractKeyPhrasesResultCollection>
        description: ''
    package: '@azure/ai-text-analytics'
  - uid: '@azure/ai-text-analytics.TextAnalyticsClient.recognizeEntities'
    name: 'recognizeEntities(string[], string, RecognizeCategorizedEntitiesOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Runs a predictive model to identify a collection of named entities

      in the passed-in input strings, and categorize those entities into types

      such as person, location, or organization.  For more information on

      available categories, see

      https://docs.microsoft.com/en-us/azure/cognitive-services/Text-Analytics/named-entity-types.

      For a list of languages supported by this operation, see

      https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/language-support.
    syntax:
      content: >-
        function recognizeEntities(documents: string[], language?: string,
        options?: RecognizeCategorizedEntitiesOptions)
      parameters:
        - id: documents
          type:
            - 'string[]'
          description: The input strings to analyze.
        - id: language
          type:
            - string
          description: |-
            The language that all the input strings are
            written in. If unspecified, this value will be set to the default
            language in `TextAnalyticsClientOptions`.
            If set to an empty string, the service will apply a model
            where the lanuage is explicitly set to "None".
          optional: true
        - id: options
          type:
            - '@azure/ai-text-analytics.RecognizeCategorizedEntitiesOptions'
          description: |
            Optional parameters for the operation.
          optional: true
      return:
        type:
          - >-
            Promise<@azure/ai-text-analytics.RecognizeCategorizedEntitiesResultCollection>
        description: ''
    package: '@azure/ai-text-analytics'
  - uid: '@azure/ai-text-analytics.TextAnalyticsClient.recognizeEntities_1'
    name: >-
      recognizeEntities(TextDocumentInput[],
      RecognizeCategorizedEntitiesOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Runs a predictive model to identify a collection of named entities

      in the passed-in input documents, and categorize those entities into types

      such as person, location, or organization.  For more information on

      available categories, see

      https://docs.microsoft.com/en-us/azure/cognitive-services/Text-Analytics/named-entity-types.

      For a list of languages supported by this operation, see

      https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/language-support.
    syntax:
      content: >-
        function recognizeEntities(documents: TextDocumentInput[], options?:
        RecognizeCategorizedEntitiesOptions)
      parameters:
        - id: documents
          type:
            - '@azure/ai-text-analytics.TextDocumentInput[]'
          description: The input documents to analyze.
        - id: options
          type:
            - '@azure/ai-text-analytics.RecognizeCategorizedEntitiesOptions'
          description: |
            Optional parameters for the operation.
          optional: true
      return:
        type:
          - >-
            Promise<@azure/ai-text-analytics.RecognizeCategorizedEntitiesResultCollection>
        description: ''
    package: '@azure/ai-text-analytics'
  - uid: '@azure/ai-text-analytics.TextAnalyticsClient.recognizeLinkedEntities'
    name: 'recognizeLinkedEntities(string[], string, RecognizeLinkedEntitiesOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Runs a predictive model to identify a collection of entities

      found in the passed-in input strings, and include information linking the

      entities to their corresponding entries in a well-known knowledge base.

      For a list of languages supported by this operation, see

      https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/language-support.
    syntax:
      content: >-
        function recognizeLinkedEntities(documents: string[], language?: string,
        options?: RecognizeLinkedEntitiesOptions)
      parameters:
        - id: documents
          type:
            - 'string[]'
          description: The input strings to analyze.
        - id: language
          type:
            - string
          description: |-
            The language that all the input strings are
            written in. If unspecified, this value will be set to the default
            language in `TextAnalyticsClientOptions`.
            If set to an empty string, the service will apply a model
            where the lanuage is explicitly set to "None".
          optional: true
        - id: options
          type:
            - '@azure/ai-text-analytics.RecognizeLinkedEntitiesOptions'
          description: |
            Optional parameters for the operation.
          optional: true
      return:
        type:
          - >-
            Promise<@azure/ai-text-analytics.RecognizeLinkedEntitiesResultCollection>
        description: ''
    package: '@azure/ai-text-analytics'
  - uid: '@azure/ai-text-analytics.TextAnalyticsClient.recognizeLinkedEntities_1'
    name: >-
      recognizeLinkedEntities(TextDocumentInput[],
      RecognizeLinkedEntitiesOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Runs a predictive model to identify a collection of entities

      found in the passed-in input documents, and include information linking
      the

      entities to their corresponding entries in a well-known knowledge base.

      For a list of languages supported by this operation, see

      https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/language-support.
    syntax:
      content: >-
        function recognizeLinkedEntities(documents: TextDocumentInput[],
        options?: RecognizeLinkedEntitiesOptions)
      parameters:
        - id: documents
          type:
            - '@azure/ai-text-analytics.TextDocumentInput[]'
          description: The input documents to analyze.
        - id: options
          type:
            - '@azure/ai-text-analytics.RecognizeLinkedEntitiesOptions'
          description: |
            Optional parameters for the operation.
          optional: true
      return:
        type:
          - >-
            Promise<@azure/ai-text-analytics.RecognizeLinkedEntitiesResultCollection>
        description: ''
    package: '@azure/ai-text-analytics'
  - uid: '@azure/ai-text-analytics.TextAnalyticsClient.constructor'
    name: >-
      TextAnalyticsClient(string, TokenCredential | KeyCredential,
      TextAnalyticsClientOptions)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: >-
      Creates an instance of TextAnalyticsClient.

      Example usage:

      ```ts

      import { TextAnalyticsClient, KeyCredential } from
      "@azure/ai-text-analytics";


      const client = new TextAnalyticsClient(
         "<service endpoint>",
         new KeyCredential("<api key>")
      );

      ```
    syntax:
      content: >-
        new TextAnalyticsClient(endpointUrl: string, credential: TokenCredential
        | KeyCredential, options?: TextAnalyticsClientOptions)
      parameters:
        - id: endpointUrl
          type:
            - string
          description: The URL to the TextAnalytics endpoint
        - id: credential
          type:
            - TokenCredential | KeyCredential
          description: Used to authenticate requests to the service.
        - id: options
          type:
            - '@azure/ai-text-analytics.TextAnalyticsClientOptions'
          description: ''
          optional: true
    package: '@azure/ai-text-analytics'
references:
  - uid: '@azure/ai-text-analytics.TextAnalyticsClientOptions'
    name: TextAnalyticsClientOptions
    spec.typeScript:
      - name: TextAnalyticsClientOptions
        fullName: TextAnalyticsClientOptions
        uid: '@azure/ai-text-analytics.TextAnalyticsClientOptions'
  - uid: '@azure/ai-text-analytics.AnalyzeSentimentOptions'
    name: AnalyzeSentimentOptions
    spec.typeScript:
      - name: AnalyzeSentimentOptions
        fullName: AnalyzeSentimentOptions
        uid: '@azure/ai-text-analytics.AnalyzeSentimentOptions'
  - uid: Promise<@azure/ai-text-analytics.AnalyzeSentimentResultCollection>
    name: AnalyzeSentimentResultCollection>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: AnalyzeSentimentResultCollection
        fullName: AnalyzeSentimentResultCollection
        uid: '@azure/ai-text-analytics.AnalyzeSentimentResultCollection'
      - name: '>'
        fullName: '>'
  - uid: '@azure/ai-text-analytics.TextDocumentInput[]'
    name: 'TextDocumentInput[]'
    spec.typeScript:
      - name: TextDocumentInput
        fullName: TextDocumentInput
        uid: '@azure/ai-text-analytics.TextDocumentInput'
      - name: '[]'
        fullName: '[]'
  - uid: '@azure/ai-text-analytics.DetectLanguageOptions'
    name: DetectLanguageOptions
    spec.typeScript:
      - name: DetectLanguageOptions
        fullName: DetectLanguageOptions
        uid: '@azure/ai-text-analytics.DetectLanguageOptions'
  - uid: Promise<@azure/ai-text-analytics.DetectLanguageResultCollection>
    name: DetectLanguageResultCollection>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: DetectLanguageResultCollection
        fullName: DetectLanguageResultCollection
        uid: '@azure/ai-text-analytics.DetectLanguageResultCollection'
      - name: '>'
        fullName: '>'
  - uid: '@azure/ai-text-analytics.DetectLanguageInput[]'
    name: 'DetectLanguageInput[]'
    spec.typeScript:
      - name: DetectLanguageInput
        fullName: DetectLanguageInput
        uid: '@azure/ai-text-analytics.DetectLanguageInput'
      - name: '[]'
        fullName: '[]'
  - uid: '@azure/ai-text-analytics.ExtractKeyPhrasesOptions'
    name: ExtractKeyPhrasesOptions
    spec.typeScript:
      - name: ExtractKeyPhrasesOptions
        fullName: ExtractKeyPhrasesOptions
        uid: '@azure/ai-text-analytics.ExtractKeyPhrasesOptions'
  - uid: Promise<@azure/ai-text-analytics.ExtractKeyPhrasesResultCollection>
    name: ExtractKeyPhrasesResultCollection>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ExtractKeyPhrasesResultCollection
        fullName: ExtractKeyPhrasesResultCollection
        uid: '@azure/ai-text-analytics.ExtractKeyPhrasesResultCollection'
      - name: '>'
        fullName: '>'
  - uid: '@azure/ai-text-analytics.RecognizeCategorizedEntitiesOptions'
    name: RecognizeCategorizedEntitiesOptions
    spec.typeScript:
      - name: RecognizeCategorizedEntitiesOptions
        fullName: RecognizeCategorizedEntitiesOptions
        uid: '@azure/ai-text-analytics.RecognizeCategorizedEntitiesOptions'
  - uid: >-
      Promise<@azure/ai-text-analytics.RecognizeCategorizedEntitiesResultCollection>
    name: RecognizeCategorizedEntitiesResultCollection>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: RecognizeCategorizedEntitiesResultCollection
        fullName: RecognizeCategorizedEntitiesResultCollection
        uid: '@azure/ai-text-analytics.RecognizeCategorizedEntitiesResultCollection'
      - name: '>'
        fullName: '>'
  - uid: '@azure/ai-text-analytics.RecognizeLinkedEntitiesOptions'
    name: RecognizeLinkedEntitiesOptions
    spec.typeScript:
      - name: RecognizeLinkedEntitiesOptions
        fullName: RecognizeLinkedEntitiesOptions
        uid: '@azure/ai-text-analytics.RecognizeLinkedEntitiesOptions'
  - uid: Promise<@azure/ai-text-analytics.RecognizeLinkedEntitiesResultCollection>
    name: RecognizeLinkedEntitiesResultCollection>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: RecognizeLinkedEntitiesResultCollection
        fullName: RecognizeLinkedEntitiesResultCollection
        uid: '@azure/ai-text-analytics.RecognizeLinkedEntitiesResultCollection'
      - name: '>'
        fullName: '>'
