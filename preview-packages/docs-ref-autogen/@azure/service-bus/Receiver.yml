### YamlMime:UniversalReference
items:
  - uid: '@azure/service-bus.Receiver'
    name: Receiver
    fullName: Receiver<ReceivedMessageT>
    children:
      - '@azure/service-bus.Receiver.browseMessages'
      - '@azure/service-bus.Receiver.close'
      - '@azure/service-bus.Receiver.entityPath'
      - '@azure/service-bus.Receiver.getMessageIterator'
      - '@azure/service-bus.Receiver.isReceivingMessages'
      - '@azure/service-bus.Receiver.receiveBatch'
      - '@azure/service-bus.Receiver.receiveDeferredMessage'
      - '@azure/service-bus.Receiver.receiveDeferredMessages'
      - '@azure/service-bus.Receiver.receiveMode'
      - '@azure/service-bus.Receiver.subscribe'
    langs:
      - typeScript
    type: interface
    summary: A receiver that does not handle sessions.
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Receiver.browseMessages'
    name: browseMessages(BrowseMessagesOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Browse the next batch of active messages (including deferred but not
      deadlettered messages) on the

      queue or subscription without modifying them.

      - The first call to `browseMessages()` fetches the first active message.
      Each subsequent call fetches the

      subsequent message.

      - Unlike a "received" message, "browsed" message is a read-only version of
      the message.

      It cannot be `Completed/Abandoned/Deferred/Deadlettered`.
    syntax:
      content: 'function browseMessages(options?: BrowseMessagesOptions)'
      parameters:
        - id: options
          type:
            - '@azure/service-bus.BrowseMessagesOptions'
          description: >
            Options that allow to specify the maximum number of messages to
            browse,

            the sequenceNumber to start browsing from or an abortSignal to abort
            the operation.
          optional: true
      return:
        type:
          - 'Promise<@azure/service-bus.ReceivedMessage[]>'
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Receiver.close'
    name: close()
    children: []
    type: method
    langs:
      - typeScript
    summary: Closes the receiver.
    syntax:
      content: function close()
      parameters: []
      return:
        type:
          - Promise<void>
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Receiver.entityPath'
    name: entityPath
    fullName: entityPath
    children: []
    langs:
      - typeScript
    type: property
    summary: Path for the client entity.
    syntax:
      content: 'entityPath: string'
      return:
        type:
          - string
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Receiver.getMessageIterator'
    name: getMessageIterator(GetMessageIteratorOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: Returns an iterator that can be used to receive messages from Service Bus.
    syntax:
      content: 'function getMessageIterator(options?: GetMessageIteratorOptions)'
      parameters:
        - id: options
          type:
            - '@azure/service-bus.GetMessageIteratorOptions'
          description: |
            Options for getMessageIterator.
          optional: true
      return:
        type:
          - AsyncIterableIterator<ReceivedMessageT>
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Receiver.isReceivingMessages'
    name: isReceivingMessages()
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Indicates whether the receiver is currently receiving messages or not.

      When this returns true, new `registerMessageHandler()` or
      `receiveMessages()` calls cannot be made.
    syntax:
      content: function isReceivingMessages()
      parameters: []
      return:
        type:
          - boolean
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Receiver.receiveBatch'
    name: 'receiveBatch(number, ReceiveBatchOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Receives, at most, `maxMessages` worth of messages.'
    syntax:
      content: >-
        function receiveBatch(maxMessages: number, options?:
        ReceiveBatchOptions)
      parameters:
        - id: maxMessages
          type:
            - number
          description: The maximum number of messages to accept.
        - id: options
          type:
            - '@azure/service-bus.ReceiveBatchOptions'
          description: |
            Options for receiveBatch.
          optional: true
      return:
        type:
          - 'Promise<ReceivedMessageT[]>'
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Receiver.receiveDeferredMessage'
    name: 'receiveDeferredMessage(Long_2, OperationOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns a promise that resolves to a deferred message identified by the
      given `sequenceNumber`.
    syntax:
      content: >-
        function receiveDeferredMessage(sequenceNumber: Long_2, options?:
        OperationOptions)
      parameters:
        - id: sequenceNumber
          type:
            - Long_2
          description: The sequence number of the message that needs to be received.
        - id: options
          type:
            - '@azure/service-bus.OperationOptions'
          description: Options bag to pass an abort signal or tracing options.
          optional: true
      return:
        type:
          - Promise<ReceivedMessageT | undefined>
        description: |-
          - Returns `Message` identified by sequence number.
          - Returns `undefined` if no such message is found.
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Receiver.receiveDeferredMessages'
    name: 'receiveDeferredMessages(Long_2[], OperationOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns a promise that resolves to an array of deferred messages
      identified by given `sequenceNumbers`.
    syntax:
      content: >-
        function receiveDeferredMessages(sequenceNumbers: Long_2[], options?:
        OperationOptions)
      parameters:
        - id: sequenceNumbers
          type:
            - 'Long_2[]'
          description: >-
            An array of sequence numbers for the messages that need to be
            received.
        - id: options
          type:
            - '@azure/service-bus.OperationOptions'
          description: Options bag to pass an abort signal or tracing options.
          optional: true
      return:
        type:
          - 'Promise<ReceivedMessageT[]>'
        description: |-
          - Returns a list of messages identified by the given sequenceNumbers.
          - Returns an empty list if no messages are found.
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Receiver.receiveMode'
    name: receiveMode
    fullName: receiveMode
    children: []
    langs:
      - typeScript
    type: property
    summary: ReceiveMode provided to the client.
    syntax:
      content: 'receiveMode: "peekLock" | "receiveAndDelete"'
      return:
        type:
          - '"peekLock" | "receiveAndDelete"'
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Receiver.subscribe'
    name: 'subscribe(MessageHandlers<ReceivedMessageT>, SubscribeOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Streams messages to message handlers.
    syntax:
      content: >-
        function subscribe(handlers: MessageHandlers<ReceivedMessageT>,
        options?: SubscribeOptions)
      parameters:
        - id: handlers
          type:
            - '@azure/service-bus.MessageHandlers<ReceivedMessageT>'
          description: A handler that gets called for messages and errors.
        - id: options
          type:
            - '@azure/service-bus.SubscribeOptions'
          description: |
            Options for subscribe.
          optional: true
    package: '@azure/service-bus'
references:
  - uid: '@azure/service-bus.BrowseMessagesOptions'
    name: BrowseMessagesOptions
    spec.typeScript:
      - name: BrowseMessagesOptions
        fullName: BrowseMessagesOptions
        uid: '@azure/service-bus.BrowseMessagesOptions'
  - uid: 'Promise<@azure/service-bus.ReceivedMessage[]>'
    name: 'ReceivedMessage[]>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ReceivedMessage
        fullName: ReceivedMessage
        uid: '@azure/service-bus.ReceivedMessage'
      - name: '[]>'
        fullName: '[]>'
  - uid: '@azure/service-bus.GetMessageIteratorOptions'
    name: GetMessageIteratorOptions
    spec.typeScript:
      - name: GetMessageIteratorOptions
        fullName: GetMessageIteratorOptions
        uid: '@azure/service-bus.GetMessageIteratorOptions'
  - uid: '@azure/service-bus.ReceiveBatchOptions'
    name: ReceiveBatchOptions
    spec.typeScript:
      - name: ReceiveBatchOptions
        fullName: ReceiveBatchOptions
        uid: '@azure/service-bus.ReceiveBatchOptions'
  - uid: '@azure/service-bus.OperationOptions'
    name: OperationOptions
    spec.typeScript:
      - name: OperationOptions
        fullName: OperationOptions
        uid: '@azure/service-bus.OperationOptions'
  - uid: '@azure/service-bus.MessageHandlers<ReceivedMessageT>'
    name: MessageHandlers<ReceivedMessageT>
    spec.typeScript:
      - name: MessageHandlers
        fullName: MessageHandlers
        uid: '@azure/service-bus.MessageHandlers'
      - name: <ReceivedMessageT>
        fullName: <ReceivedMessageT>
  - uid: '@azure/service-bus.SubscribeOptions'
    name: SubscribeOptions
    spec.typeScript:
      - name: SubscribeOptions
        fullName: SubscribeOptions
        uid: '@azure/service-bus.SubscribeOptions'
