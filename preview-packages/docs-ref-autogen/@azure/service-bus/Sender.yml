### YamlMime:UniversalReference
items:
  - uid: '@azure/service-bus.Sender'
    name: Sender
    fullName: Sender
    children:
      - '@azure/service-bus.Sender.cancelScheduledMessages'
      - '@azure/service-bus.Sender.close'
      - '@azure/service-bus.Sender.createBatch'
      - '@azure/service-bus.Sender.entityPath'
      - '@azure/service-bus.Sender.isClosed'
      - '@azure/service-bus.Sender.open'
      - '@azure/service-bus.Sender.scheduleMessages'
      - '@azure/service-bus.Sender.sendMessages'
    langs:
      - typeScript
    type: interface
    summary: >-
      A Sender can be used to send messages, schedule messages to be sent at a
      later time

      and cancel such scheduled messages.

      Use the `createSender` function on the ServiceBusClient instantiate a
      Sender.

      The Sender class is an abstraction over the underlying AMQP sender link.
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Sender.cancelScheduledMessages'
    name: 'cancelScheduledMessages(Long | Long[], OperationOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Cancels multiple messages that were scheduled to appear on a ServiceBus
      Queue/Subscription.
    syntax:
      content: >-
        function cancelScheduledMessages(sequenceNumbers: Long | Long[],
        options?: OperationOptionsBase)
      parameters:
        - id: sequenceNumbers
          type:
            - 'Long | Long[]'
          description: >-
            Sequence number or an array of sequence numbers of the messages to
            be cancelled.
        - id: options
          type:
            - '@azure/service-bus.OperationOptionsBase'
          description: Options bag to pass an abort signal or tracing options.
          optional: true
      return:
        type:
          - Promise<void>
        description: Promise<void>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Sender.close'
    name: close()
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Closes the underlying AMQP sender link.

      Once closed, the sender cannot be used for any further operations.

      Use the `createSender` function on the QueueClient or TopicClient to
      instantiate a new Sender
    syntax:
      content: function close()
      parameters: []
      return:
        type:
          - Promise<void>
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Sender.createBatch'
    name: createBatch(CreateBatchOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Creates an instance of `ServiceBusMessageBatch` to which one can add
      messages until the maximum supported size is reached.

      The batch can be passed to the <xref:send> method to send the messages to
      Azure Service Bus.
    syntax:
      content: 'function createBatch(options?: CreateBatchOptions)'
      parameters:
        - id: options
          type:
            - '@azure/service-bus.CreateBatchOptions'
          description: >
            Configures the behavior of the batch.

            - `maxSizeInBytes`: The upper limit for the size of batch. The
            `tryAdd` function will return `false` after this limit is reached.
          optional: true
      return:
        type:
          - Promise<@azure/service-bus.ServiceBusMessageBatch>
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Sender.entityPath'
    name: entityPath
    fullName: entityPath
    children: []
    langs:
      - typeScript
    type: property
    summary: Path of the entity for which the sender has been created.
    syntax:
      content: 'entityPath: string'
      return:
        type:
          - string
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Sender.isClosed'
    name: isClosed
    fullName: isClosed
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Returns `true` if either the sender or the client that created it has been
      closed
    syntax:
      content: 'isClosed: boolean'
      return:
        type:
          - boolean
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Sender.open'
    name: open(SenderOpenOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      Opens the AMQP link to Azure Service Bus from the sender.
      It is not necessary to call this method in order to use the sender. It is
      recommended to call this before your first sendMessages() call if you
      want to front load the work of setting up the AMQP link to the service.
    syntax:
      content: 'function open(options?: SenderOpenOptions)'
      parameters:
        - id: options
          type:
            - '@azure/service-bus.SenderOpenOptions'
          description: |
            Options bag to pass an abort signal.
          optional: true
      return:
        type:
          - Promise<void>
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Sender.scheduleMessages'
    name: >-
      scheduleMessages(Date, ServiceBusMessage | ServiceBusMessage[],
      OperationOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Schedules given messages to appear on Service Bus Queue/Subscription at a
      later time.
    syntax:
      content: >-
        function scheduleMessages(scheduledEnqueueTimeUtc: Date, messages:
        ServiceBusMessage | ServiceBusMessage[], options?: OperationOptionsBase)
      parameters:
        - id: scheduledEnqueueTimeUtc
          type:
            - Date
          description: The UTC time at which the messages should be enqueued.
        - id: messages
          type:
            - >-
              @azure/service-bus.ServiceBusMessage |
              @azure/service-bus.ServiceBusMessage[]
          description: Message or an array of messages that need to be scheduled.
        - id: options
          type:
            - '@azure/service-bus.OperationOptionsBase'
          description: Options bag to pass an abort signal or tracing options.
          optional: true
      return:
        type:
          - 'Promise<Long[]>'
        description: >-
          Promise<Long[]> - The sequence numbers of messages that were
          scheduled.

          You will need the sequence number if you intend to cancel the
          scheduling of the messages.

          Save the `Long` type as-is in your application without converting to
          number. Since JavaScript

          only supports 53 bit numbers, converting the `Long` to number will
          cause loss in precision.
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Sender.sendMessages'
    name: >-
      sendMessages(ServiceBusMessage | ServiceBusMessage[] |
      ServiceBusMessageBatch, OperationOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Sends the given messages after creating an AMQP Sender link if it doesn't
      already exist.

      Consider awaiting on open() beforehand to front load the work of link
      creation if needed.

      - To send messages to a `session` and/or `partition` enabled Queue/Topic,
      set the `sessionId`

      and/or `partitionKey` properties respectively on the messages.

      - All messages passed to the same sendMessages() call should have the same
      `sessionId` (if using
       sessions) and the same `partitionKey` (if using partitions).
    syntax:
      content: >-
        function sendMessages(messages: ServiceBusMessage | ServiceBusMessage[]
        | ServiceBusMessageBatch, options?: OperationOptionsBase)
      parameters:
        - id: messages
          type:
            - >-
              @azure/service-bus.ServiceBusMessage |
              @azure/service-bus.ServiceBusMessage[] |
              @azure/service-bus.ServiceBusMessageBatch
          description: >-
            A single message or an array of messages or a batch of messages
            created via the createBatch()

            method to send.
        - id: options
          type:
            - '@azure/service-bus.OperationOptionsBase'
          description: Options bag to pass an abort signal or tracing options.
          optional: true
      return:
        type:
          - Promise<void>
        description: Promise<void>
    package: '@azure/service-bus'
references:
  - uid: '@azure/service-bus.OperationOptionsBase'
    name: OperationOptionsBase
    spec.typeScript:
      - name: OperationOptionsBase
        fullName: OperationOptionsBase
        uid: '@azure/service-bus.OperationOptionsBase'
  - uid: '@azure/service-bus.CreateBatchOptions'
    name: CreateBatchOptions
    spec.typeScript:
      - name: CreateBatchOptions
        fullName: CreateBatchOptions
        uid: '@azure/service-bus.CreateBatchOptions'
  - uid: Promise<@azure/service-bus.ServiceBusMessageBatch>
    name: ServiceBusMessageBatch>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ServiceBusMessageBatch
        fullName: ServiceBusMessageBatch
        uid: '@azure/service-bus.ServiceBusMessageBatch'
      - name: '>'
        fullName: '>'
  - uid: '@azure/service-bus.SenderOpenOptions'
    name: SenderOpenOptions
    spec.typeScript:
      - name: SenderOpenOptions
        fullName: SenderOpenOptions
        uid: '@azure/service-bus.SenderOpenOptions'
  - uid: >-
      @azure/service-bus.ServiceBusMessage |
      @azure/service-bus.ServiceBusMessage[]
    name: 'ServiceBusMessage[]'
    spec.typeScript:
      - name: ServiceBusMessage
        fullName: ServiceBusMessage
        uid: '@azure/service-bus.ServiceBusMessage'
      - name: ' | '
        fullName: ' | '
      - name: ServiceBusMessage
        fullName: ServiceBusMessage
        uid: '@azure/service-bus.ServiceBusMessage'
      - name: '[]'
        fullName: '[]'
  - uid: >-
      @azure/service-bus.ServiceBusMessage |
      @azure/service-bus.ServiceBusMessage[] |
      @azure/service-bus.ServiceBusMessageBatch
    name: ServiceBusMessageBatch
    spec.typeScript:
      - name: ServiceBusMessage
        fullName: ServiceBusMessage
        uid: '@azure/service-bus.ServiceBusMessage'
      - name: ' | '
        fullName: ' | '
      - name: ServiceBusMessage
        fullName: ServiceBusMessage
        uid: '@azure/service-bus.ServiceBusMessage'
      - name: '[] | '
        fullName: '[] | '
      - name: ServiceBusMessageBatch
        fullName: ServiceBusMessageBatch
        uid: '@azure/service-bus.ServiceBusMessageBatch'
