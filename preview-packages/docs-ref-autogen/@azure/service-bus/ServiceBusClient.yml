### YamlMime:UniversalReference
items:
  - uid: '@azure/service-bus.ServiceBusClient'
    name: ServiceBusClient
    fullName: ServiceBusClient
    children:
      - '@azure/service-bus.ServiceBusClient.close'
      - '@azure/service-bus.ServiceBusClient.createDeadLetterReceiver'
      - '@azure/service-bus.ServiceBusClient.createDeadLetterReceiver_1'
      - '@azure/service-bus.ServiceBusClient.createDeadLetterReceiver_2'
      - '@azure/service-bus.ServiceBusClient.createDeadLetterReceiver_3'
      - '@azure/service-bus.ServiceBusClient.createReceiver'
      - '@azure/service-bus.ServiceBusClient.createReceiver_1'
      - '@azure/service-bus.ServiceBusClient.createReceiver_2'
      - '@azure/service-bus.ServiceBusClient.createReceiver_3'
      - '@azure/service-bus.ServiceBusClient.createSender'
      - '@azure/service-bus.ServiceBusClient.createSessionReceiver'
      - '@azure/service-bus.ServiceBusClient.createSessionReceiver_1'
      - '@azure/service-bus.ServiceBusClient.createSessionReceiver_2'
      - '@azure/service-bus.ServiceBusClient.createSessionReceiver_3'
      - '@azure/service-bus.ServiceBusClient.getSubscriptionRuleManager'
      - '@azure/service-bus.ServiceBusClient.constructor'
      - '@azure/service-bus.ServiceBusClient.constructor_1'
    langs:
      - typeScript
    type: class
    summary: >-
      A client that can create Sender instances for sending messages to queues
      and

      topics as well as Receiver instances to receive messages from queues and
      subscriptions.
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.ServiceBusClient.close'
    name: close()
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Closes the underlying AMQP connection.

      NOTE: this will also disconnect any Receiver or Sender instances created
      from this

      instance.
    syntax:
      content: function close()
      parameters: []
      return:
        type:
          - Promise<void>
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.ServiceBusClient.createDeadLetterReceiver'
    name: 'createDeadLetterReceiver(string, "peekLock")'
    children: []
    type: method
    langs:
      - typeScript
    summary: Creates a receiver for an Azure Service Bus queue's dead letter queue.
    syntax:
      content: >-
        function createDeadLetterReceiver(queueName: string, receiveMode:
        "peekLock")
      parameters:
        - id: queueName
          type:
            - string
          description: The name of the queue to receive from.
        - id: receiveMode
          type:
            - '"peekLock"'
          description: |
            The receive mode to use (defaults to PeekLock)
      return:
        type:
          - >-
            @azure/service-bus.Receiver<@azure/service-bus.ReceivedMessageWithLock>
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.ServiceBusClient.createDeadLetterReceiver_1'
    name: 'createDeadLetterReceiver(string, "receiveAndDelete")'
    children: []
    type: method
    langs:
      - typeScript
    summary: Creates a receiver for an Azure Service Bus queue's dead letter queue.
    syntax:
      content: >-
        function createDeadLetterReceiver(queueName: string, receiveMode:
        "receiveAndDelete")
      parameters:
        - id: queueName
          type:
            - string
          description: The name of the queue to receive from.
        - id: receiveMode
          type:
            - '"receiveAndDelete"'
          description: |
            The receive mode to use (defaults to PeekLock)
      return:
        type:
          - '@azure/service-bus.Receiver<@azure/service-bus.ReceivedMessage>'
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.ServiceBusClient.createDeadLetterReceiver_2'
    name: 'createDeadLetterReceiver(string, string, "peekLock")'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Creates a receiver for an Azure Service Bus subscription's dead letter
      queue.
    syntax:
      content: >-
        function createDeadLetterReceiver(topicName: string, subscriptionName:
        string, receiveMode: "peekLock")
      parameters:
        - id: topicName
          type:
            - string
          description: Name of the topic for the subscription we want to receive from.
        - id: subscriptionName
          type:
            - string
          description: >-
            Name of the subscription (under the `topic`) that we want to receive
            from.
        - id: receiveMode
          type:
            - '"peekLock"'
          description: |
            The receive mode to use (defaults to PeekLock)
      return:
        type:
          - >-
            @azure/service-bus.Receiver<@azure/service-bus.ReceivedMessageWithLock>
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.ServiceBusClient.createDeadLetterReceiver_3'
    name: 'createDeadLetterReceiver(string, string, "receiveAndDelete")'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Creates a receiver for an Azure Service Bus subscription's dead letter
      queue.
    syntax:
      content: >-
        function createDeadLetterReceiver(topicName: string, subscriptionName:
        string, receiveMode: "receiveAndDelete")
      parameters:
        - id: topicName
          type:
            - string
          description: Name of the topic for the subscription we want to receive from.
        - id: subscriptionName
          type:
            - string
          description: >-
            Name of the subscription (under the `topic`) that we want to receive
            from.
        - id: receiveMode
          type:
            - '"receiveAndDelete"'
          description: |
            The receive mode to use (defaults to PeekLock)
      return:
        type:
          - '@azure/service-bus.Receiver<@azure/service-bus.ReceivedMessage>'
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.ServiceBusClient.createReceiver'
    name: 'createReceiver(string, "peekLock")'
    children: []
    type: method
    langs:
      - typeScript
    summary: Creates a receiver for an Azure Service Bus queue.
    syntax:
      content: 'function createReceiver(queueName: string, receiveMode: "peekLock")'
      parameters:
        - id: queueName
          type:
            - string
          description: The name of the queue to receive from.
        - id: receiveMode
          type:
            - '"peekLock"'
          description: |
            The receive mode to use (defaults to PeekLock)
      return:
        type:
          - >-
            @azure/service-bus.Receiver<@azure/service-bus.ReceivedMessageWithLock>
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.ServiceBusClient.createReceiver_1'
    name: 'createReceiver(string, "receiveAndDelete")'
    children: []
    type: method
    langs:
      - typeScript
    summary: Creates a receiver for an Azure Service Bus queue.
    syntax:
      content: >-
        function createReceiver(queueName: string, receiveMode:
        "receiveAndDelete")
      parameters:
        - id: queueName
          type:
            - string
          description: The name of the queue to receive from.
        - id: receiveMode
          type:
            - '"receiveAndDelete"'
          description: |
            The receive mode to use (defaults to PeekLock)
      return:
        type:
          - '@azure/service-bus.Receiver<@azure/service-bus.ReceivedMessage>'
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.ServiceBusClient.createReceiver_2'
    name: 'createReceiver(string, string, "peekLock")'
    children: []
    type: method
    langs:
      - typeScript
    summary: Creates a receiver for an Azure Service Bus subscription.
    syntax:
      content: >-
        function createReceiver(topicName: string, subscriptionName: string,
        receiveMode: "peekLock")
      parameters:
        - id: topicName
          type:
            - string
          description: Name of the topic for the subscription we want to receive from.
        - id: subscriptionName
          type:
            - string
          description: >-
            Name of the subscription (under the `topic`) that we want to receive
            from.
        - id: receiveMode
          type:
            - '"peekLock"'
          description: |
            The receive mode to use (defaults to PeekLock)
      return:
        type:
          - >-
            @azure/service-bus.Receiver<@azure/service-bus.ReceivedMessageWithLock>
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.ServiceBusClient.createReceiver_3'
    name: 'createReceiver(string, string, "receiveAndDelete")'
    children: []
    type: method
    langs:
      - typeScript
    summary: Creates a receiver for an Azure Service Bus subscription.
    syntax:
      content: >-
        function createReceiver(topicName: string, subscriptionName: string,
        receiveMode: "receiveAndDelete")
      parameters:
        - id: topicName
          type:
            - string
          description: Name of the topic for the subscription we want to receive from.
        - id: subscriptionName
          type:
            - string
          description: >-
            Name of the subscription (under the `topic`) that we want to receive
            from.
        - id: receiveMode
          type:
            - '"receiveAndDelete"'
          description: |
            The receive mode to use (defaults to PeekLock)
      return:
        type:
          - '@azure/service-bus.Receiver<@azure/service-bus.ReceivedMessage>'
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.ServiceBusClient.createSender'
    name: createSender(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Creates a Sender which can be used to send messages, schedule messages to
      be sent at a later time

      and cancel such scheduled messages.
    syntax:
      content: 'function createSender(queueOrTopicName: string)'
      parameters:
        - id: queueOrTopicName
          type:
            - string
          description: ''
      return:
        type:
          - '@azure/service-bus.Sender'
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.ServiceBusClient.createSessionReceiver'
    name: 'createSessionReceiver(string, "peekLock", CreateSessionReceiverOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Creates a receiver for an Azure Service Bus queue.
    syntax:
      content: >-
        function createSessionReceiver(queueName: string, receiveMode:
        "peekLock", options?: CreateSessionReceiverOptions)
      parameters:
        - id: queueName
          type:
            - string
          description: The name of the queue to receive from.
        - id: receiveMode
          type:
            - '"peekLock"'
          description: The receive mode to use (defaults to PeekLock)
        - id: options
          type:
            - '@azure/service-bus.CreateSessionReceiverOptions'
          description: |
            Options for the receiver itself.
          optional: true
      return:
        type:
          - >-
            @azure/service-bus.SessionReceiver<@azure/service-bus.ReceivedMessageWithLock>
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.ServiceBusClient.createSessionReceiver_1'
    name: >-
      createSessionReceiver(string, "receiveAndDelete",
      CreateSessionReceiverOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: Creates a receiver for an Azure Service Bus queue.
    syntax:
      content: >-
        function createSessionReceiver(queueName: string, receiveMode:
        "receiveAndDelete", options?: CreateSessionReceiverOptions)
      parameters:
        - id: queueName
          type:
            - string
          description: The name of the queue to receive from.
        - id: receiveMode
          type:
            - '"receiveAndDelete"'
          description: The receive mode to use (defaults to PeekLock)
        - id: options
          type:
            - '@azure/service-bus.CreateSessionReceiverOptions'
          description: |
            Options for the receiver itself.
          optional: true
      return:
        type:
          - >-
            @azure/service-bus.SessionReceiver<@azure/service-bus.ReceivedMessage>
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.ServiceBusClient.createSessionReceiver_2'
    name: >-
      createSessionReceiver(string, string, "peekLock",
      CreateSessionReceiverOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: Creates a receiver for an Azure Service Bus subscription.
    syntax:
      content: >-
        function createSessionReceiver(topicName: string, subscriptionName:
        string, receiveMode: "peekLock", options?: CreateSessionReceiverOptions)
      parameters:
        - id: topicName
          type:
            - string
          description: Name of the topic for the subscription we want to receive from.
        - id: subscriptionName
          type:
            - string
          description: >-
            Name of the subscription (under the `topic`) that we want to receive
            from.
        - id: receiveMode
          type:
            - '"peekLock"'
          description: The receive mode to use (defaults to PeekLock)
        - id: options
          type:
            - '@azure/service-bus.CreateSessionReceiverOptions'
          description: |
            Options for the receiver itself.
          optional: true
      return:
        type:
          - >-
            @azure/service-bus.SessionReceiver<@azure/service-bus.ReceivedMessageWithLock>
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.ServiceBusClient.createSessionReceiver_3'
    name: >-
      createSessionReceiver(string, string, "receiveAndDelete",
      CreateSessionReceiverOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: Creates a receiver for an Azure Service Bus subscription.
    syntax:
      content: >-
        function createSessionReceiver(topicName: string, subscriptionName:
        string, receiveMode: "receiveAndDelete", options?:
        CreateSessionReceiverOptions)
      parameters:
        - id: topicName
          type:
            - string
          description: Name of the topic for the subscription we want to receive from.
        - id: subscriptionName
          type:
            - string
          description: >-
            Name of the subscription (under the `topic`) that we want to receive
            from.
        - id: receiveMode
          type:
            - '"receiveAndDelete"'
          description: The receive mode to use (defaults to PeekLock)
        - id: options
          type:
            - '@azure/service-bus.CreateSessionReceiverOptions'
          description: |
            Options for the receiver itself.
          optional: true
      return:
        type:
          - >-
            @azure/service-bus.SessionReceiver<@azure/service-bus.ReceivedMessage>
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.ServiceBusClient.getSubscriptionRuleManager'
    name: 'getSubscriptionRuleManager(string, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets a SubscriptionRuleManager, which allows you to manage Service Bus
      subscription rules.

      More information about subscription rules can be found here:
      https://docs.microsoft.com/en-us/azure/service-bus-messaging/topic-filters
    syntax:
      content: 'function getSubscriptionRuleManager(topic: string, subscription: string)'
      parameters:
        - id: topic
          type:
            - string
          description: The topic for the subscription.
        - id: subscription
          type:
            - string
          description: |
            The subscription.
      return:
        type:
          - '@azure/service-bus.SubscriptionRuleManager'
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.ServiceBusClient.constructor'
    name: 'ServiceBusClient(string, ServiceBusClientOptions)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        new ServiceBusClient(connectionString: string, options?:
        ServiceBusClientOptions)
      parameters:
        - id: connectionString
          type:
            - string
          description: >-
            A connection string for Azure Service Bus.

            NOTE: this connection string can contain an EntityPath, which is
            ignored.
        - id: options
          type:
            - '@azure/service-bus.ServiceBusClientOptions'
          description: |
            Options for the service bus client.
          optional: true
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.ServiceBusClient.constructor_1'
    name: 'ServiceBusClient(string, TokenCredential, ServiceBusClientOptions)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        new ServiceBusClient(fullyQualifiedNamespace: string, credential:
        TokenCredential, options?: ServiceBusClientOptions)
      parameters:
        - id: fullyQualifiedNamespace
          type:
            - string
          description: |-
            The full namespace of your Service Bus instance which is
            likely to be similar to <yournamespace>.servicebus.windows.net.
        - id: credential
          type:
            - TokenCredential
          description: >-
            A credential object used by the client to get the token to
            authenticate the connection

            with the Azure Service Bus. See &commat;azure/identity for creating
            the credentials.
        - id: options
          type:
            - '@azure/service-bus.ServiceBusClientOptions'
          description: |
            Options for the service bus client.
          optional: true
    package: '@azure/service-bus'
references:
  - uid: '@azure/service-bus.ServiceBusClientOptions'
    name: ServiceBusClientOptions
    spec.typeScript:
      - name: ServiceBusClientOptions
        fullName: ServiceBusClientOptions
        uid: '@azure/service-bus.ServiceBusClientOptions'
  - uid: '@azure/service-bus.Receiver<@azure/service-bus.ReceivedMessageWithLock>'
    name: ReceivedMessageWithLock>
    spec.typeScript:
      - name: Receiver
        fullName: Receiver
        uid: '@azure/service-bus.Receiver'
      - name: <
        fullName: <
      - name: ReceivedMessageWithLock
        fullName: ReceivedMessageWithLock
        uid: '@azure/service-bus.ReceivedMessageWithLock'
      - name: '>'
        fullName: '>'
  - uid: '@azure/service-bus.Receiver<@azure/service-bus.ReceivedMessage>'
    name: ReceivedMessage>
    spec.typeScript:
      - name: Receiver
        fullName: Receiver
        uid: '@azure/service-bus.Receiver'
      - name: <
        fullName: <
      - name: ReceivedMessage
        fullName: ReceivedMessage
        uid: '@azure/service-bus.ReceivedMessage'
      - name: '>'
        fullName: '>'
  - uid: '@azure/service-bus.Sender'
    name: Sender
    spec.typeScript:
      - name: Sender
        fullName: Sender
        uid: '@azure/service-bus.Sender'
  - uid: '@azure/service-bus.CreateSessionReceiverOptions'
    name: CreateSessionReceiverOptions
    spec.typeScript:
      - name: CreateSessionReceiverOptions
        fullName: CreateSessionReceiverOptions
        uid: '@azure/service-bus.CreateSessionReceiverOptions'
  - uid: >-
      @azure/service-bus.SessionReceiver<@azure/service-bus.ReceivedMessageWithLock>
    name: ReceivedMessageWithLock>
    spec.typeScript:
      - name: SessionReceiver
        fullName: SessionReceiver
        uid: '@azure/service-bus.SessionReceiver'
      - name: <
        fullName: <
      - name: ReceivedMessageWithLock
        fullName: ReceivedMessageWithLock
        uid: '@azure/service-bus.ReceivedMessageWithLock'
      - name: '>'
        fullName: '>'
  - uid: '@azure/service-bus.SessionReceiver<@azure/service-bus.ReceivedMessage>'
    name: ReceivedMessage>
    spec.typeScript:
      - name: SessionReceiver
        fullName: SessionReceiver
        uid: '@azure/service-bus.SessionReceiver'
      - name: <
        fullName: <
      - name: ReceivedMessage
        fullName: ReceivedMessage
        uid: '@azure/service-bus.ReceivedMessage'
      - name: '>'
        fullName: '>'
  - uid: '@azure/service-bus.SubscriptionRuleManager'
    name: SubscriptionRuleManager
    spec.typeScript:
      - name: SubscriptionRuleManager
        fullName: SubscriptionRuleManager
        uid: '@azure/service-bus.SubscriptionRuleManager'
