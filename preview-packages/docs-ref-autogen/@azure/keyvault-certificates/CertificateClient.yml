### YamlMime:UniversalReference
items:
  - uid: '@azure/keyvault-certificates.CertificateClient'
    name: CertificateClient
    fullName: CertificateClient
    children:
      - '@azure/keyvault-certificates.CertificateClient.backupCertificate'
      - >-
        @azure/keyvault-certificates.CertificateClient.cancelCertificateOperation
      - '@azure/keyvault-certificates.CertificateClient.constructor'
      - '@azure/keyvault-certificates.CertificateClient.createCertificate'
      - '@azure/keyvault-certificates.CertificateClient.deleteCertificate'
      - >-
        @azure/keyvault-certificates.CertificateClient.deleteCertificateOperation
      - '@azure/keyvault-certificates.CertificateClient.deleteContacts'
      - '@azure/keyvault-certificates.CertificateClient.deleteIssuer'
      - '@azure/keyvault-certificates.CertificateClient.getCertificate'
      - '@azure/keyvault-certificates.CertificateClient.getCertificateOperation'
      - '@azure/keyvault-certificates.CertificateClient.getCertificatePolicy'
      - '@azure/keyvault-certificates.CertificateClient.getCertificateVersion'
      - '@azure/keyvault-certificates.CertificateClient.getContacts'
      - '@azure/keyvault-certificates.CertificateClient.getDeletedCertificate'
      - '@azure/keyvault-certificates.CertificateClient.getIssuer'
      - '@azure/keyvault-certificates.CertificateClient.importCertificate'
      - '@azure/keyvault-certificates.CertificateClient.listCertificates'
      - '@azure/keyvault-certificates.CertificateClient.listCertificateVersions'
      - '@azure/keyvault-certificates.CertificateClient.listDeletedCertificates'
      - '@azure/keyvault-certificates.CertificateClient.listIssuers'
      - '@azure/keyvault-certificates.CertificateClient.mergeCertificate'
      - '@azure/keyvault-certificates.CertificateClient.purgeDeletedCertificate'
      - '@azure/keyvault-certificates.CertificateClient.recoverDeletedCertificate'
      - '@azure/keyvault-certificates.CertificateClient.restoreCertificateBackup'
      - '@azure/keyvault-certificates.CertificateClient.setContacts'
      - '@azure/keyvault-certificates.CertificateClient.setIssuer'
      - '@azure/keyvault-certificates.CertificateClient.updateCertificate'
      - '@azure/keyvault-certificates.CertificateClient.updateCertificatePolicy'
      - '@azure/keyvault-certificates.CertificateClient.updateIssuer'
    langs:
      - typeScript
    type: class
    summary: The client to interact with the KeyVault certificates functionality
    package: '@azure/keyvault-certificates'
  - uid: '@azure/keyvault-certificates.CertificateClient.backupCertificate'
    name: 'backupCertificate(string, BackupCertificateOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Requests that a backup of the specified certificate be downloaded to the
      client. All versions of the certificate will be downloaded.

      This operation requires the certificates/backup permission.

      Example usage:

      ```ts

      const client = new CertificateClient(url, credentials);

      await client.createCertificate("MyCertificate", {
        issuerName: "Self",
        subjectName: "cn=MyCert"
      });

      const backup = await client.backupCertificate("MyCertificate");

      ```
    syntax:
      content: >-
        function backupCertificate(certificateName: string, options?:
        BackupCertificateOptions)
      parameters:
        - id: certificateName
          type:
            - string
          description: The name of the certificate
        - id: options
          type:
            - '@azure/keyvault-certificates.BackupCertificateOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-certificates.BackupCertificateResult>
    package: '@azure/keyvault-certificates'
  - uid: '@azure/keyvault-certificates.CertificateClient.cancelCertificateOperation'
    name: 'cancelCertificateOperation(string, CancelCertificateOperationOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Updates a certificate creation operation that is already in progress. This
      operation requires the certificates/update permission.

      Example usage:

      ```ts

      const client = new CertificateClient(url, credentials);

      await client.createCertificate("MyCertificate", {
        issuerName: "Self",
        subjectName: "cn=MyCert"
      });

      await client.cancelCertificateOperation("MyCertificate");

      ```
    syntax:
      content: >-
        function cancelCertificateOperation(certificateName: string, options?:
        CancelCertificateOperationOptions)
      parameters:
        - id: certificateName
          type:
            - string
          description: The name of the certificate
        - id: options
          type:
            - '@azure/keyvault-certificates.CancelCertificateOperationOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-certificates.CertificateOperation>
    package: '@azure/keyvault-certificates'
  - uid: '@azure/keyvault-certificates.CertificateClient.constructor'
    name: 'CertificateClient(string, TokenCredential, PipelineOptions)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Creates an instance of CertificateClient.
    syntax:
      content: >-
        new CertificateClient(vaultUrl: string, credential: TokenCredential,
        pipelineOptions?: PipelineOptions)
      parameters:
        - id: vaultUrl
          type:
            - string
          description: the base URL to the vault.
        - id: credential
          type:
            - TokenCredential
          description: >-
            An object that implements the `TokenCredential` interface used to
            authenticate requests to the service. Use the @azure/identity
            package to create a credential that suits your needs.
        - id: pipelineOptions
          type:
            - PipelineOptions
          description: ''
          optional: true
    package: '@azure/keyvault-certificates'
  - uid: '@azure/keyvault-certificates.CertificateClient.createCertificate'
    name: 'createCertificate(string, CertificatePolicy, CreateCertificateOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Creates a new certificate. If this is the first version, the certificate
      resource is created. This operation requires the certificates/create
      permission.

      Example usage:

      ```ts

      const client = new CertificateClient(url, credentials);

      await client.createCertificate("MyCertificate", {
        issuerName: "Self",
        subjectName: "cn=MyCert"
      });

      ```
    syntax:
      content: >-
        function createCertificate(certificateName: string, certificatePolicy:
        CertificatePolicy, options?: CreateCertificateOptions)
      parameters:
        - id: certificateName
          type:
            - string
          description: The name of the certificate
        - id: certificatePolicy
          type:
            - '@azure/keyvault-certificates.CertificatePolicy'
          description: The certificate's policy
        - id: options
          type:
            - '@azure/keyvault-certificates.CreateCertificateOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-certificates.KeyVaultCertificate>
    package: '@azure/keyvault-certificates'
  - uid: '@azure/keyvault-certificates.CertificateClient.deleteCertificate'
    name: 'deleteCertificate(string, DeleteCertificateOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The DELETE operation applies to any certificate stored in Azure Key Vault.
      DELETE cannot be applied

      to an individual version of a certificate. This operation requires the
      certificates/delete permission.

      Example usage:

      ```ts

      const client = new CertificateClient(url, credentials);

      await client.createCertificate("MyCertificate", {
        issuerName: "Self",
        subjectName: "cn=MyCert"
      });

      await client.deleteCertificate("MyCertificate");

      ```
    syntax:
      content: >-
        function deleteCertificate(certificateName: string, options?:
        DeleteCertificateOptions)
      parameters:
        - id: certificateName
          type:
            - string
          description: The name of the certificate.
        - id: options
          type:
            - '@azure/keyvault-certificates.DeleteCertificateOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-certificates.DeletedCertificate>
    package: '@azure/keyvault-certificates'
  - uid: '@azure/keyvault-certificates.CertificateClient.deleteCertificateOperation'
    name: 'deleteCertificateOperation(string, DeleteCertificateOperationOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Deletes the creation operation for a specified certificate that is in the
      process of being created.

      The certificate is no longer created. This operation requires the
      certificates/update permission.

      Example usage:

      ```ts

      const client = new CertificateClient(url, credentials);

      await client.createCertificate("MyCertificate", {
        issuerName: "Self",
        subjectName: "cn=MyCert"
      });

      await client.deleteCertificateOperation("MyCertificate");

      await client.getCertificateOperation("MyCertificate"); // Throws error:
      Pending certificate not found: "MyCertificate"

      ```
    syntax:
      content: >-
        function deleteCertificateOperation(certificateName: string, options?:
        DeleteCertificateOperationOptions)
      parameters:
        - id: certificateName
          type:
            - string
          description: The name of the certificate
        - id: options
          type:
            - '@azure/keyvault-certificates.DeleteCertificateOperationOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-certificates.CertificateOperation>
    package: '@azure/keyvault-certificates'
  - uid: '@azure/keyvault-certificates.CertificateClient.deleteContacts'
    name: deleteContacts(DeleteContactsOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Deletes all of the certificate contacts. This operation requires the
      certificates/managecontacts permission.

      Example usage:

      ```ts

      let client = new CertificateClient(url, credentials);

      await client.setContacts([{
        emailAddress: "b@b.com",
        name: "b",
        phone: "222222222222"
      }]);

      await client.deleteContacts();

      ```
    syntax:
      content: 'function deleteContacts(options?: DeleteContactsOptions)'
      parameters:
        - id: options
          type:
            - '@azure/keyvault-certificates.DeleteContactsOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-certificates.CertificateContacts>
    package: '@azure/keyvault-certificates'
  - uid: '@azure/keyvault-certificates.CertificateClient.deleteIssuer'
    name: 'deleteIssuer(string, DeleteIssuerOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The deleteIssuer operation permanently removes the specified certificate
      issuer from

      the vault. This operation requires the
      certificates/manageissuers/deleteissuers permission.

      Example usage:

      ```ts

      const client = new CertificateClient(url, credentials);

      await client.setIssuer("IssuerName", "Provider");

      await client.deleteIssuer("IssuerName");

      ```
    syntax:
      content: 'function deleteIssuer(issuerName: string, options?: DeleteIssuerOptions)'
      parameters:
        - id: issuerName
          type:
            - string
          description: The name of the issuer.
        - id: options
          type:
            - '@azure/keyvault-certificates.DeleteIssuerOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-certificates.CertificateIssuer>
    package: '@azure/keyvault-certificates'
  - uid: '@azure/keyvault-certificates.CertificateClient.getCertificate'
    name: 'getCertificate(string, GetCertificateOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets the latest information available from a specific certificate,
      including the certificate's policy. This operation requires the
      certificates/get permission.

      Example usage:

      ```ts

      const client = new CertificateClient(url, credentials);

      await client.createCertificate("MyCertificate", {
        issuerName: "Self",
        subjectName: "cn=MyCert"
      });

      const certificate = await client.getCertificate("MyCertificate");

      console.log(certificate);

      ```
    syntax:
      content: >-
        function getCertificate(certificateName: string, options?:
        GetCertificateOptions)
      parameters:
        - id: certificateName
          type:
            - string
          description: The name of the certificate
        - id: options
          type:
            - '@azure/keyvault-certificates.GetCertificateOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-certificates.KeyVaultCertificate>
    package: '@azure/keyvault-certificates'
  - uid: '@azure/keyvault-certificates.CertificateClient.getCertificateOperation'
    name: 'getCertificateOperation(string, GetCertificateOperationOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets the creation operation associated with a specified certificate. This
      operation requires the certificates/get permission.

      Example usage:

      ```ts

      const client = new CertificateClient(url, credentials);

      await client.createCertificate("MyCertificate", {
        issuerName: "Self",
        subjectName: "cn=MyCert"
      });

      const operation = await client.getCertificateOperation("MyCertificate");

      console.log(operation);

      ```
    syntax:
      content: >-
        function getCertificateOperation(certificateName: string, options?:
        GetCertificateOperationOptions)
      parameters:
        - id: certificateName
          type:
            - string
          description: The name of the certificate
        - id: options
          type:
            - '@azure/keyvault-certificates.GetCertificateOperationOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-certificates.CertificateOperation>
    package: '@azure/keyvault-certificates'
  - uid: '@azure/keyvault-certificates.CertificateClient.getCertificatePolicy'
    name: 'getCertificatePolicy(string, GetCertificatePolicyOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The getCertificatePolicy operation returns the specified certificate
      policy resources in the specified key vault. This operation requires the
      certificates/get permission.

      Example usage:

      ```ts

      const client = new CertificateClient(url, credentials);

      await client.createCertificate("MyCertificate", {
        issuerName: "Self",
        subjectName: "cn=MyCert"
      });

      const policy = await client.getCertificatePolicy("MyCertificate");

      console.log(policy);

      ```
    syntax:
      content: >-
        function getCertificatePolicy(certificateName: string, options?:
        GetCertificatePolicyOptions)
      parameters:
        - id: certificateName
          type:
            - string
          description: The name of the certificate
        - id: options
          type:
            - '@azure/keyvault-certificates.GetCertificatePolicyOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-certificates.CertificatePolicy>
    package: '@azure/keyvault-certificates'
  - uid: '@azure/keyvault-certificates.CertificateClient.getCertificateVersion'
    name: 'getCertificateVersion(string, string, GetCertificateVersionOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets information about a specific certificate on a specific version. It
      won't return the certificate's policy. This operation requires the
      certificates/get permission.

      Example usage:

      ```ts

      const client = new CertificateClient(url, credentials);

      await client.createCertificate("MyCertificate", {
        issuerName: "Self",
        subjectName: "cn=MyCert"
      });

      const certificateWithPolicy = await
      client.getCertificate("MyCertificate");

      const certificate = await client.getCertificateVersion("MyCertificate",
      certificateWithPolicy.properties.version!);

      console.log(certificate);

      ```
    syntax:
      content: >-
        function getCertificateVersion(certificateName: string, version: string,
        options?: GetCertificateVersionOptions)
      parameters:
        - id: certificateName
          type:
            - string
          description: The name of the certificate
        - id: version
          type:
            - string
          description: The specific version of the certificate
        - id: options
          type:
            - '@azure/keyvault-certificates.GetCertificateVersionOptions'
          description: |
            The optional parameters
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-certificates.KeyVaultCertificate>
    package: '@azure/keyvault-certificates'
  - uid: '@azure/keyvault-certificates.CertificateClient.getContacts'
    name: getContacts(GetContactsOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns the set of certificate contact resources in the specified key
      vault. This operation requires the certificates/managecontacts permission.

      Example usage:

      ```ts

      let client = new CertificateClient(url, credentials);

      await client.setContacts([{
        emailAddress: "b@b.com",
        name: "b",
        phone: "222222222222"
      }]);

      const getResponse = await client.getContacts();

      console.log(getResponse.contactList!);

      ```
    syntax:
      content: 'function getContacts(options?: GetContactsOptions)'
      parameters:
        - id: options
          type:
            - '@azure/keyvault-certificates.GetContactsOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-certificates.CertificateContacts>
    package: '@azure/keyvault-certificates'
  - uid: '@azure/keyvault-certificates.CertificateClient.getDeletedCertificate'
    name: 'getDeletedCertificate(string, GetDeletedCertificateOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      retrieves the deleted certificate information plus its attributes, such as
      retention interval, scheduled permanent deletion and the

      current deletion recovery level. This operation requires the
      certificates/get permission.

      Example usage:

      ```ts

      const client = new CertificateClient(url, credentials);

      client.getDeletedCertificate("MyDeletedCertificate");

      ```
    syntax:
      content: >-
        function getDeletedCertificate(certificateName: string, options?:
        GetDeletedCertificateOptions)
      parameters:
        - id: certificateName
          type:
            - string
          description: The name of the certificate
        - id: options
          type:
            - '@azure/keyvault-certificates.GetDeletedCertificateOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-certificates.DeletedCertificate>
    package: '@azure/keyvault-certificates'
  - uid: '@azure/keyvault-certificates.CertificateClient.getIssuer'
    name: 'getIssuer(string, GetIssuerOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The getIssuer operation returns the specified certificate issuer resources
      in the

      specified key vault. This operation requires the
      certificates/manageissuers/getissuers

      permission.

      Example usage:

      ```ts

      const client = new CertificateClient(url, credentials);

      await client.setIssuer("IssuerName", "Provider");

      const certificateIssuer = await client.getIssuer("IssuerName");

      console.log(certificateIssuer);

      ```
    syntax:
      content: 'function getIssuer(issuerName: string, options?: GetIssuerOptions)'
      parameters:
        - id: issuerName
          type:
            - string
          description: The name of the issuer.
        - id: options
          type:
            - '@azure/keyvault-certificates.GetIssuerOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-certificates.CertificateIssuer>
    package: '@azure/keyvault-certificates'
  - uid: '@azure/keyvault-certificates.CertificateClient.importCertificate'
    name: 'importCertificate(string, string, ImportCertificateOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Imports an existing valid certificate, containing a private key, into
      Azure Key Vault. The certificate to be imported can be in either PFX or
      PEM format.

      If the certificate is in PEM format the PEM file must contain the key as
      well as x509 certificates. This operation requires the certificates/import
      permission.

      Example usage:

      ```ts

      const client = new CertificateClient(url, credentials);

      const certificateSecret = await secretClient.getSecret("MyCertificate");

      const base64EncodedCertificate = certificateSecret.value!;

      await client.importCertificate("MyCertificate", base64EncodedCertificate);

      ```
    syntax:
      content: >-
        function importCertificate(certificateName: string,
        base64EncodedCertificate: string, options?: ImportCertificateOptions)
      parameters:
        - id: certificateName
          type:
            - string
          description: The name of the certificate
        - id: base64EncodedCertificate
          type:
            - string
          description: The base64 encoded certificate to import
        - id: options
          type:
            - '@azure/keyvault-certificates.ImportCertificateOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-certificates.KeyVaultCertificate>
    package: '@azure/keyvault-certificates'
  - uid: '@azure/keyvault-certificates.CertificateClient.listCertificates'
    name: listCertificates(ListCertificatesOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Iterates the latest version of all certificates in the vault.  The full
      certificate identifier and attributes are provided

      in the response. No values are returned for the certificates. This
      operations requires the certificates/list permission.

      Example usage:

      ```ts

      const client = new CertificateClient(url, credentials);

      // All in one call

      for await (const certificate of client.listCertificates()) {
        console.log(certificate);
      }

      // By pages

      for await (const page of client.listCertificates().byPage()) {
        for (const certificate of page) {
          console.log(certificate);
        }
      }

      ```
    syntax:
      content: 'function listCertificates(options?: ListCertificatesOptions)'
      parameters:
        - id: options
          type:
            - '@azure/keyvault-certificates.ListCertificatesOptions'
          description: ''
          optional: true
      return:
        type:
          - >-
            PagedAsyncIterableIterator<@azure/keyvault-certificates.KeyVaultCertificate,
            @azure/keyvault-certificates.KeyVaultCertificate[]>
    package: '@azure/keyvault-certificates'
  - uid: '@azure/keyvault-certificates.CertificateClient.listCertificateVersions'
    name: 'listCertificateVersions(string, ListCertificateVersionsOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns the versions of a certificate in the specified key

      vault. This operation requires the certificates/list permission.

      Example usage:

      ```ts

      const client = new CertificateClient(url, credentials);

      for await (const item of client.listCertificateVersions("MyCertificate"))
      {
        console.log(item.properties.version!);
      }

      ```
    syntax:
      content: >-
        function listCertificateVersions(certificateName: string, options?:
        ListCertificateVersionsOptions)
      parameters:
        - id: certificateName
          type:
            - string
          description: The name of the certificate.
        - id: options
          type:
            - '@azure/keyvault-certificates.ListCertificateVersionsOptions'
          description: ''
          optional: true
      return:
        type:
          - >-
            PagedAsyncIterableIterator<@azure/keyvault-certificates.KeyVaultCertificate,
            @azure/keyvault-certificates.KeyVaultCertificate[]>
    package: '@azure/keyvault-certificates'
  - uid: '@azure/keyvault-certificates.CertificateClient.listDeletedCertificates'
    name: listDeletedCertificates(ListDeletedCertificatesOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Retrieves the certificates in the current vault which are in a deleted
      state and ready for recovery or purging. This operation includes
      deletion-specific

      information. This operation requires the certificates/get/list permission.
      This operation can only be enabled on soft-delete enabled vaults.

      Example usage:

      ```ts

      const client = new CertificateClient(url, credentials);

      for await (const certificate of client.listDeletedCertificates()) {
        console.log(certificate);
      }

      for await (const page of client.listDeletedCertificates().byPage()) {
        for (const certificate of page) {
          console.log(certificate);
        }
      }

      ```
    syntax:
      content: >-
        function listDeletedCertificates(options?:
        ListDeletedCertificatesOptions)
      parameters:
        - id: options
          type:
            - '@azure/keyvault-certificates.ListDeletedCertificatesOptions'
          description: ''
          optional: true
      return:
        type:
          - >-
            PagedAsyncIterableIterator<@azure/keyvault-certificates.DeletedCertificate,
            @azure/keyvault-certificates.DeletedCertificate[]>
    package: '@azure/keyvault-certificates'
  - uid: '@azure/keyvault-certificates.CertificateClient.listIssuers'
    name: listIssuers(ListIssuersOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns the set of certificate issuer resources in the specified key
      vault. This operation requires the certificates/manageissuers/getissuers
      permission.

      Example usage:

      ```ts

      const client = new CertificateClient(url, credentials);

      await client.setIssuer("IssuerName", "Provider");

      // All in one call

      for await (const issuer of client.listIssuers()) {
        console.log(issuer);
      }

      // By pages

      for await (const page of client.listIssuers().byPage()) {
        for (const issuer of page) {
          console.log(issuer);
        }
      }

      ```
    syntax:
      content: 'function listIssuers(options?: ListIssuersOptions)'
      parameters:
        - id: options
          type:
            - '@azure/keyvault-certificates.ListIssuersOptions'
          description: ''
          optional: true
      return:
        type:
          - >-
            PagedAsyncIterableIterator<@azure/keyvault-certificates.CertificateIssuer,
            @azure/keyvault-certificates.CertificateIssuer[]>
    package: '@azure/keyvault-certificates'
  - uid: '@azure/keyvault-certificates.CertificateClient.mergeCertificate'
    name: 'mergeCertificate(string, Uint8Array[], MergeCertificateOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Performs the merging of a certificate or certificate chain with a key pair
      currently available in the service. This operation requires the
      certificates/create permission.

      Example usage:

      ```ts

      const client = new CertificateClient(url, credentials);

      await client.createCertificate("MyCertificate", {
        issuerName: "Unknown",
        subjectName: "cn=MyCert"
      });

      const { csr } = await client.getCertificateOperation(certificateName);

      const base64Csr = Buffer.from(csr!).toString("base64");

      const wrappedCsr = ["-----BEGIN CERTIFICATE REQUEST-----", base64Csr,
      "-----END CERTIFICATE REQUEST-----"].join("\n");

      fs.writeFileSync("test.csr", wrappedCsr);


      // Certificate available locally made using:

      //   openssl genrsa -out ca.key 2048

      //   openssl req -new -x509 -key ca.key -out ca.crt

      // You can read more about how to create a fake certificate authority
      here: https://gist.github.com/Soarez/9688998

      childProcess.execSync("openssl x509 -req -in test.csr -CA ca.crt -CAkey
      ca.key -CAcreateserial -out test.crt");

      const base64Crt =
      fs.readFileSync("test.crt").toString().split("\n").slice(1, -1).join("");


      await client.mergeCertificate(certificateName, [Buffer.from(base64Crt)]);

      ```
    syntax:
      content: >-
        function mergeCertificate(certificateName: string, x509Certificates:
        Uint8Array[], options?: MergeCertificateOptions)
      parameters:
        - id: certificateName
          type:
            - string
          description: The name of the certificate
        - id: x509Certificates
          type:
            - 'Uint8Array[]'
          description: The certificate(s) to merge
        - id: options
          type:
            - '@azure/keyvault-certificates.MergeCertificateOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-certificates.KeyVaultCertificate>
    package: '@azure/keyvault-certificates'
  - uid: '@azure/keyvault-certificates.CertificateClient.purgeDeletedCertificate'
    name: 'purgeDeletedCertificate(string, PurgeDeletedCertificateOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Performs an irreversible deletion of the specified certificate, without
      possibility for recovery. The operation is not available if the

      recovery level does not specify 'Purgeable'. This operation requires the
      certificate/purge permission.

      Example usage:

      ```ts

      const client = new CertificateClient(url, credentials);

      await client.deleteCertificate("MyCertificate");

      // Deleting a certificate takes time, make sure to wait before purging it

      client.purgeDeletedCertificate("MyCertificate");

      ```
    syntax:
      content: >-
        function purgeDeletedCertificate(certificateName: string, options?:
        PurgeDeletedCertificateOptions)
      parameters:
        - id: certificateName
          type:
            - string
          description: The name of the deleted certificate to purge
        - id: options
          type:
            - '@azure/keyvault-certificates.PurgeDeletedCertificateOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<null>
    package: '@azure/keyvault-certificates'
  - uid: '@azure/keyvault-certificates.CertificateClient.recoverDeletedCertificate'
    name: 'recoverDeletedCertificate(string, RecoverDeletedCertificateOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Recovers the deleted certificate in the specified vault. This operation
      can only be performed on a soft-delete enabled vault. This operation

      requires the certificate/recover permission.

      Example usage:

      ```ts

      const client = new CertificateClient(url, credentials);

      await client.deleteCertificate("MyCertificate");

      // Deleting a certificate takes time, make sure to wait before recovering
      it

      await client.recoverDeletedCertificate("MyCertificate");

      ```
    syntax:
      content: >-
        function recoverDeletedCertificate(certificateName: string, options?:
        RecoverDeletedCertificateOptions)
      parameters:
        - id: certificateName
          type:
            - string
          description: The name of the deleted certificate
        - id: options
          type:
            - '@azure/keyvault-certificates.RecoverDeletedCertificateOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-certificates.KeyVaultCertificate>
    package: '@azure/keyvault-certificates'
  - uid: '@azure/keyvault-certificates.CertificateClient.restoreCertificateBackup'
    name: 'restoreCertificateBackup(Uint8Array, RestoreCertificateBackupOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Restores a backed up certificate, and all its versions, to a vault. This
      operation requires the certificates/restore permission.

      Example usage:

      ```ts

      const client = new CertificateClient(url, credentials);

      await client.createCertificate("MyCertificate", {
        issuerName: "Self",
        subjectName: "cn=MyCert"
      });

      const backup = await client.backupCertificate("MyCertificate");

      await client.deleteCertificate("MyCertificate");

      // Some time is required before we're able to restore the certificate

      await client.restoreCertificateBackup(backup.value!);

      ```
    syntax:
      content: >-
        function restoreCertificateBackup(certificateBackup: Uint8Array,
        options?: RestoreCertificateBackupOptions)
      parameters:
        - id: certificateBackup
          type:
            - Uint8Array
          description: The back-up certificate to restore from
        - id: options
          type:
            - '@azure/keyvault-certificates.RestoreCertificateBackupOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-certificates.KeyVaultCertificate>
    package: '@azure/keyvault-certificates'
  - uid: '@azure/keyvault-certificates.CertificateClient.setContacts'
    name: 'setContacts(Contact[], SetContactsOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Sets the certificate contacts for the key vault. This operation requires
      the certificates/managecontacts permission.

      Example usage:

      ```ts

      let client = new CertificateClient(url, credentials);

      await client.setContacts([{
        emailAddress: "b@b.com",
        name: "b",
        phone: "222222222222"
      }]);

      ```
    syntax:
      content: 'function setContacts(contacts: Contact[], options?: SetContactsOptions)'
      parameters:
        - id: contacts
          type:
            - '@azure/keyvault-certificates.Contact[]'
          description: The contacts to use
        - id: options
          type:
            - '@azure/keyvault-certificates.SetContactsOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-certificates.CertificateContacts>
    package: '@azure/keyvault-certificates'
  - uid: '@azure/keyvault-certificates.CertificateClient.setIssuer'
    name: 'setIssuer(string, string, SetIssuerOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The setIssuer operation adds or updates the specified certificate issuer.
      This

      operation requires the certificates/setissuers permission.

      Example usage:

      ```ts

      const client = new CertificateClient(url, credentials);

      await client.setIssuer("IssuerName", "Provider");

      ```
    syntax:
      content: >-
        function setIssuer(issuerName: string, provider: string, options?:
        SetIssuerOptions)
      parameters:
        - id: issuerName
          type:
            - string
          description: The name of the issuer.
        - id: provider
          type:
            - string
          description: The issuer provider.
        - id: options
          type:
            - '@azure/keyvault-certificates.SetIssuerOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-certificates.CertificateIssuer>
    package: '@azure/keyvault-certificates'
  - uid: '@azure/keyvault-certificates.CertificateClient.updateCertificate'
    name: 'updateCertificate(string, string, UpdateCertificateOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Applies the specified update on the given certificate; the only elements
      updated are the

      certificate's attributes. This operation requires the certificates/update
      permission.

      Example usage:

      ```ts

      const client = new CertificateClient(url, credentials);

      await client.createCertificate("MyCertificate", {
        issuerName: "Self",
        subjectName: "cn=MyCert"
      });

      await client.updateCertificate("MyCertificate", "", {
        tags: {
          customTag: "value"
        }
      });

      ```
    syntax:
      content: >-
        function updateCertificate(certificateName: string, version: string,
        options?: UpdateCertificateOptions)
      parameters:
        - id: certificateName
          type:
            - string
          description: The name of the ceritificate
        - id: version
          type:
            - string
          description: The version of the certificate to update
        - id: options
          type:
            - '@azure/keyvault-certificates.UpdateCertificateOptions'
          description: |
            The options, including what to update
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-certificates.KeyVaultCertificate>
    package: '@azure/keyvault-certificates'
  - uid: '@azure/keyvault-certificates.CertificateClient.updateCertificatePolicy'
    name: >-
      updateCertificatePolicy(string, CertificatePolicy,
      UpdateCertificatePolicyOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Set specified members in the certificate policy. Leave others as null.
      This operation requires the certificates/update permission.
    syntax:
      content: >-
        function updateCertificatePolicy(certificateName: string, policy:
        CertificatePolicy, options?: UpdateCertificatePolicyOptions)
      parameters:
        - id: certificateName
          type:
            - string
          description: The name of the certificate
        - id: policy
          type:
            - '@azure/keyvault-certificates.CertificatePolicy'
          description: The certificate policy
        - id: options
          type:
            - '@azure/keyvault-certificates.UpdateCertificatePolicyOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-certificates.CertificatePolicy>
    package: '@azure/keyvault-certificates'
  - uid: '@azure/keyvault-certificates.CertificateClient.updateIssuer'
    name: 'updateIssuer(string, UpdateIssuerOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The updateIssuer operation performs an update on the specified certificate
      issuer

      entity. This operation requires the certificates/setissuers permission.

      Example usage:

      ```ts

      const client = new CertificateClient(url, credentials);

      await client.setIssuer("IssuerName", "Provider");

      await client.updateIssuer("IssuerName", {
        provider: "Provider2"
      });

      ```
    syntax:
      content: 'function updateIssuer(issuerName: string, options?: UpdateIssuerOptions)'
      parameters:
        - id: issuerName
          type:
            - string
          description: The name of the issuer.
        - id: options
          type:
            - '@azure/keyvault-certificates.UpdateIssuerOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-certificates.CertificateIssuer>
    package: '@azure/keyvault-certificates'
references:
  - uid: '@azure/keyvault-certificates.BackupCertificateOptions'
    name: BackupCertificateOptions
    spec.typeScript:
      - name: BackupCertificateOptions
        fullName: BackupCertificateOptions
        uid: '@azure/keyvault-certificates.BackupCertificateOptions'
  - uid: Promise<@azure/keyvault-certificates.BackupCertificateResult>
    name: BackupCertificateResult>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: BackupCertificateResult
        fullName: BackupCertificateResult
        uid: '@azure/keyvault-certificates.BackupCertificateResult'
      - name: '>'
        fullName: '>'
  - uid: '@azure/keyvault-certificates.CancelCertificateOperationOptions'
    name: CancelCertificateOperationOptions
    spec.typeScript:
      - name: CancelCertificateOperationOptions
        fullName: CancelCertificateOperationOptions
        uid: '@azure/keyvault-certificates.CancelCertificateOperationOptions'
  - uid: Promise<@azure/keyvault-certificates.CertificateOperation>
    name: CertificateOperation>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: CertificateOperation
        fullName: CertificateOperation
        uid: '@azure/keyvault-certificates.CertificateOperation'
      - name: '>'
        fullName: '>'
  - uid: '@azure/keyvault-certificates.CertificatePolicy'
    name: CertificatePolicy
    spec.typeScript:
      - name: CertificatePolicy
        fullName: CertificatePolicy
        uid: '@azure/keyvault-certificates.CertificatePolicy'
  - uid: '@azure/keyvault-certificates.CreateCertificateOptions'
    name: CreateCertificateOptions
    spec.typeScript:
      - name: CreateCertificateOptions
        fullName: CreateCertificateOptions
        uid: '@azure/keyvault-certificates.CreateCertificateOptions'
  - uid: Promise<@azure/keyvault-certificates.KeyVaultCertificate>
    name: KeyVaultCertificate>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: KeyVaultCertificate
        fullName: KeyVaultCertificate
        uid: '@azure/keyvault-certificates.KeyVaultCertificate'
      - name: '>'
        fullName: '>'
  - uid: '@azure/keyvault-certificates.DeleteCertificateOptions'
    name: DeleteCertificateOptions
    spec.typeScript:
      - name: DeleteCertificateOptions
        fullName: DeleteCertificateOptions
        uid: '@azure/keyvault-certificates.DeleteCertificateOptions'
  - uid: Promise<@azure/keyvault-certificates.DeletedCertificate>
    name: DeletedCertificate>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: DeletedCertificate
        fullName: DeletedCertificate
        uid: '@azure/keyvault-certificates.DeletedCertificate'
      - name: '>'
        fullName: '>'
  - uid: '@azure/keyvault-certificates.DeleteCertificateOperationOptions'
    name: DeleteCertificateOperationOptions
    spec.typeScript:
      - name: DeleteCertificateOperationOptions
        fullName: DeleteCertificateOperationOptions
        uid: '@azure/keyvault-certificates.DeleteCertificateOperationOptions'
  - uid: '@azure/keyvault-certificates.DeleteContactsOptions'
    name: DeleteContactsOptions
    spec.typeScript:
      - name: DeleteContactsOptions
        fullName: DeleteContactsOptions
        uid: '@azure/keyvault-certificates.DeleteContactsOptions'
  - uid: Promise<@azure/keyvault-certificates.CertificateContacts>
    name: CertificateContacts>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: CertificateContacts
        fullName: CertificateContacts
        uid: '@azure/keyvault-certificates.CertificateContacts'
      - name: '>'
        fullName: '>'
  - uid: '@azure/keyvault-certificates.DeleteIssuerOptions'
    name: DeleteIssuerOptions
    spec.typeScript:
      - name: DeleteIssuerOptions
        fullName: DeleteIssuerOptions
        uid: '@azure/keyvault-certificates.DeleteIssuerOptions'
  - uid: Promise<@azure/keyvault-certificates.CertificateIssuer>
    name: CertificateIssuer>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: CertificateIssuer
        fullName: CertificateIssuer
        uid: '@azure/keyvault-certificates.CertificateIssuer'
      - name: '>'
        fullName: '>'
  - uid: '@azure/keyvault-certificates.GetCertificateOptions'
    name: GetCertificateOptions
    spec.typeScript:
      - name: GetCertificateOptions
        fullName: GetCertificateOptions
        uid: '@azure/keyvault-certificates.GetCertificateOptions'
  - uid: '@azure/keyvault-certificates.GetCertificateOperationOptions'
    name: GetCertificateOperationOptions
    spec.typeScript:
      - name: GetCertificateOperationOptions
        fullName: GetCertificateOperationOptions
        uid: '@azure/keyvault-certificates.GetCertificateOperationOptions'
  - uid: '@azure/keyvault-certificates.GetCertificatePolicyOptions'
    name: GetCertificatePolicyOptions
    spec.typeScript:
      - name: GetCertificatePolicyOptions
        fullName: GetCertificatePolicyOptions
        uid: '@azure/keyvault-certificates.GetCertificatePolicyOptions'
  - uid: Promise<@azure/keyvault-certificates.CertificatePolicy>
    name: CertificatePolicy>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: CertificatePolicy
        fullName: CertificatePolicy
        uid: '@azure/keyvault-certificates.CertificatePolicy'
      - name: '>'
        fullName: '>'
  - uid: '@azure/keyvault-certificates.GetCertificateVersionOptions'
    name: GetCertificateVersionOptions
    spec.typeScript:
      - name: GetCertificateVersionOptions
        fullName: GetCertificateVersionOptions
        uid: '@azure/keyvault-certificates.GetCertificateVersionOptions'
  - uid: '@azure/keyvault-certificates.GetContactsOptions'
    name: GetContactsOptions
    spec.typeScript:
      - name: GetContactsOptions
        fullName: GetContactsOptions
        uid: '@azure/keyvault-certificates.GetContactsOptions'
  - uid: '@azure/keyvault-certificates.GetDeletedCertificateOptions'
    name: GetDeletedCertificateOptions
    spec.typeScript:
      - name: GetDeletedCertificateOptions
        fullName: GetDeletedCertificateOptions
        uid: '@azure/keyvault-certificates.GetDeletedCertificateOptions'
  - uid: '@azure/keyvault-certificates.GetIssuerOptions'
    name: GetIssuerOptions
    spec.typeScript:
      - name: GetIssuerOptions
        fullName: GetIssuerOptions
        uid: '@azure/keyvault-certificates.GetIssuerOptions'
  - uid: '@azure/keyvault-certificates.ImportCertificateOptions'
    name: ImportCertificateOptions
    spec.typeScript:
      - name: ImportCertificateOptions
        fullName: ImportCertificateOptions
        uid: '@azure/keyvault-certificates.ImportCertificateOptions'
  - uid: '@azure/keyvault-certificates.ListCertificateVersionsOptions'
    name: ListCertificateVersionsOptions
    spec.typeScript:
      - name: ListCertificateVersionsOptions
        fullName: ListCertificateVersionsOptions
        uid: '@azure/keyvault-certificates.ListCertificateVersionsOptions'
  - uid: >-
      PagedAsyncIterableIterator<@azure/keyvault-certificates.KeyVaultCertificate,
      @azure/keyvault-certificates.KeyVaultCertificate[]>
    name: 'KeyVaultCertificate[]>'
    spec.typeScript:
      - name: PagedAsyncIterableIterator<
        fullName: PagedAsyncIterableIterator<
      - name: KeyVaultCertificate
        fullName: KeyVaultCertificate
        uid: '@azure/keyvault-certificates.KeyVaultCertificate'
      - name: ', '
        fullName: ', '
      - name: KeyVaultCertificate
        fullName: KeyVaultCertificate
        uid: '@azure/keyvault-certificates.KeyVaultCertificate'
      - name: '[]>'
        fullName: '[]>'
  - uid: '@azure/keyvault-certificates.ListCertificatesOptions'
    name: ListCertificatesOptions
    spec.typeScript:
      - name: ListCertificatesOptions
        fullName: ListCertificatesOptions
        uid: '@azure/keyvault-certificates.ListCertificatesOptions'
  - uid: '@azure/keyvault-certificates.ListDeletedCertificatesOptions'
    name: ListDeletedCertificatesOptions
    spec.typeScript:
      - name: ListDeletedCertificatesOptions
        fullName: ListDeletedCertificatesOptions
        uid: '@azure/keyvault-certificates.ListDeletedCertificatesOptions'
  - uid: >-
      PagedAsyncIterableIterator<@azure/keyvault-certificates.DeletedCertificate,
      @azure/keyvault-certificates.DeletedCertificate[]>
    name: 'DeletedCertificate[]>'
    spec.typeScript:
      - name: PagedAsyncIterableIterator<
        fullName: PagedAsyncIterableIterator<
      - name: DeletedCertificate
        fullName: DeletedCertificate
        uid: '@azure/keyvault-certificates.DeletedCertificate'
      - name: ', '
        fullName: ', '
      - name: DeletedCertificate
        fullName: DeletedCertificate
        uid: '@azure/keyvault-certificates.DeletedCertificate'
      - name: '[]>'
        fullName: '[]>'
  - uid: '@azure/keyvault-certificates.ListIssuersOptions'
    name: ListIssuersOptions
    spec.typeScript:
      - name: ListIssuersOptions
        fullName: ListIssuersOptions
        uid: '@azure/keyvault-certificates.ListIssuersOptions'
  - uid: >-
      PagedAsyncIterableIterator<@azure/keyvault-certificates.CertificateIssuer,
      @azure/keyvault-certificates.CertificateIssuer[]>
    name: 'CertificateIssuer[]>'
    spec.typeScript:
      - name: PagedAsyncIterableIterator<
        fullName: PagedAsyncIterableIterator<
      - name: CertificateIssuer
        fullName: CertificateIssuer
        uid: '@azure/keyvault-certificates.CertificateIssuer'
      - name: ', '
        fullName: ', '
      - name: CertificateIssuer
        fullName: CertificateIssuer
        uid: '@azure/keyvault-certificates.CertificateIssuer'
      - name: '[]>'
        fullName: '[]>'
  - uid: '@azure/keyvault-certificates.MergeCertificateOptions'
    name: MergeCertificateOptions
    spec.typeScript:
      - name: MergeCertificateOptions
        fullName: MergeCertificateOptions
        uid: '@azure/keyvault-certificates.MergeCertificateOptions'
  - uid: '@azure/keyvault-certificates.PurgeDeletedCertificateOptions'
    name: PurgeDeletedCertificateOptions
    spec.typeScript:
      - name: PurgeDeletedCertificateOptions
        fullName: PurgeDeletedCertificateOptions
        uid: '@azure/keyvault-certificates.PurgeDeletedCertificateOptions'
  - uid: '@azure/keyvault-certificates.RecoverDeletedCertificateOptions'
    name: RecoverDeletedCertificateOptions
    spec.typeScript:
      - name: RecoverDeletedCertificateOptions
        fullName: RecoverDeletedCertificateOptions
        uid: '@azure/keyvault-certificates.RecoverDeletedCertificateOptions'
  - uid: '@azure/keyvault-certificates.RestoreCertificateBackupOptions'
    name: RestoreCertificateBackupOptions
    spec.typeScript:
      - name: RestoreCertificateBackupOptions
        fullName: RestoreCertificateBackupOptions
        uid: '@azure/keyvault-certificates.RestoreCertificateBackupOptions'
  - uid: '@azure/keyvault-certificates.Contact[]'
    name: 'Contact[]'
    spec.typeScript:
      - name: Contact
        fullName: Contact
        uid: '@azure/keyvault-certificates.Contact'
      - name: '[]'
        fullName: '[]'
  - uid: '@azure/keyvault-certificates.SetContactsOptions'
    name: SetContactsOptions
    spec.typeScript:
      - name: SetContactsOptions
        fullName: SetContactsOptions
        uid: '@azure/keyvault-certificates.SetContactsOptions'
  - uid: '@azure/keyvault-certificates.SetIssuerOptions'
    name: SetIssuerOptions
    spec.typeScript:
      - name: SetIssuerOptions
        fullName: SetIssuerOptions
        uid: '@azure/keyvault-certificates.SetIssuerOptions'
  - uid: '@azure/keyvault-certificates.UpdateCertificateOptions'
    name: UpdateCertificateOptions
    spec.typeScript:
      - name: UpdateCertificateOptions
        fullName: UpdateCertificateOptions
        uid: '@azure/keyvault-certificates.UpdateCertificateOptions'
  - uid: '@azure/keyvault-certificates.UpdateCertificatePolicyOptions'
    name: UpdateCertificatePolicyOptions
    spec.typeScript:
      - name: UpdateCertificatePolicyOptions
        fullName: UpdateCertificatePolicyOptions
        uid: '@azure/keyvault-certificates.UpdateCertificatePolicyOptions'
  - uid: '@azure/keyvault-certificates.UpdateIssuerOptions'
    name: UpdateIssuerOptions
    spec.typeScript:
      - name: UpdateIssuerOptions
        fullName: UpdateIssuerOptions
        uid: '@azure/keyvault-certificates.UpdateIssuerOptions'
