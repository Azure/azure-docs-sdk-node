### YamlMime:UniversalReference
items:
  - uid: '@azure/event-hubs.EventHubConsumerClient'
    name: EventHubConsumerClient
    fullName: EventHubConsumerClient
    children:
      - '@azure/event-hubs.EventHubConsumerClient.close'
      - '@azure/event-hubs.EventHubConsumerClient.defaultConsumerGroupName'
      - '@azure/event-hubs.EventHubConsumerClient.constructor'
      - '@azure/event-hubs.EventHubConsumerClient.constructor_1'
      - '@azure/event-hubs.EventHubConsumerClient.constructor_2'
      - '@azure/event-hubs.EventHubConsumerClient.getPartitionIds'
      - '@azure/event-hubs.EventHubConsumerClient.getPartitionProperties'
      - '@azure/event-hubs.EventHubConsumerClient.getProperties'
      - '@azure/event-hubs.EventHubConsumerClient.subscribe_2'
      - '@azure/event-hubs.EventHubConsumerClient.subscribe_1'
      - '@azure/event-hubs.EventHubConsumerClient.subscribe'
    langs:
      - typeScript
    type: class
    summary: ''
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubConsumerClient.close'
    name: close()
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Closes the AMQP connection to the Event Hub instance,
      returning a promise that will be resolved when disconnection is completed.
    syntax:
      content: function close()
      parameters: []
      return:
        type:
          - Promise<void>
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubConsumerClient.defaultConsumerGroupName'
    name: defaultConsumerGroupName
    fullName: defaultConsumerGroupName
    children: []
    langs:
      - typeScript
    type: property
    summary: The name of the default consumer group in the Event Hubs service.
    syntax:
      content: 'static defaultConsumerGroupName: string'
      return:
        type:
          - string
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubConsumerClient.constructor'
    name: 'EventHubConsumerClient(string, EventHubClientOptions)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        new EventHubConsumerClient(connectionString: string, options?:
        EventHubClientOptions)
      parameters:
        - id: connectionString
          type:
            - string
          description: >-
            The connection string to use for connecting to the Event Hubs
            namespace.

            It is expected that the shared key properties and the Event Hub path
            are contained in this connection string.

            e.g.
            'Endpoint=sb://my-servicebus-namespace.servicebus.windows.net/;SharedAccessKeyName=my-SA-name;SharedAccessKey=my-SA-key;EntityPath=my-event-hub-name'.
        - id: options
          type:
            - '@azure/event-hubs.EventHubClientOptions'
          description: >
            A set of options to apply when configuring the client.

            - `dataTransformer`: A set of `encode`/`decode` methods to be used
            to encode an event before sending to service

            and to decode the event received from the service

            - `userAgent`      : A string to append to the built in user agent
            string that is passed as a connection property

            to the service.

            - `websocket`      : The WebSocket constructor used to create an
            AMQP connection if you choose to make the connection

            over a WebSocket.

            - `webSocketConstructorOptions` : Options to pass to the Websocket
            constructor when you choose to make the connection

            over a WebSocket.

            - `retryOptions`   : The retry options for all the operations on the
            client/producer/consumer.

            A simple usage can be `{ "maxRetries": 4 }`.
          optional: true
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubConsumerClient.constructor_1'
    name: 'EventHubConsumerClient(string, string, EventHubClientOptions)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        new EventHubConsumerClient(connectionString: string, eventHubName:
        string, options?: EventHubClientOptions)
      parameters:
        - id: connectionString
          type:
            - string
          description: >-
            The connection string to use for connecting to the Event Hubs
            namespace.

            It is expected that the shared key properties and the Event Hub path
            are contained in this connection string.

            e.g.
            'Endpoint=sb://my-servicebus-namespace.servicebus.windows.net/;SharedAccessKeyName=my-SA-name;SharedAccessKey=my-SA-key;EntityPath=my-event-hub-name'.
        - id: eventHubName
          type:
            - string
          description: The path of the specific Event Hub to connect the client to.
        - id: options
          type:
            - '@azure/event-hubs.EventHubClientOptions'
          description: >
            A set of options to apply when configuring the client.

            - `dataTransformer`: A set of `encode`/`decode` methods to be used
            to encode an event before sending to service

            and to decode the event received from the service

            - `userAgent`      : A string to append to the built in user agent
            string that is passed as a connection property

            to the service.

            - `websocket`      : The WebSocket constructor used to create an
            AMQP connection if you choose to make the connection

            over a WebSocket.

            - `webSocketConstructorOptions` : Options to pass to the Websocket
            constructor when you choose to make the connection

            over a WebSocket.

            - `retryOptions`   : The retry options for all the operations on the
            client/producer/consumer.

            A simple usage can be `{ "maxRetries": 4 }`.
          optional: true
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubConsumerClient.constructor_2'
    name: >-
      EventHubConsumerClient(string, string, TokenCredential,
      EventHubClientOptions)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        new EventHubConsumerClient(host: string, eventHubName: string,
        credential: TokenCredential, options?: EventHubClientOptions)
      parameters:
        - id: host
          type:
            - string
          description: >-
            The fully qualified host name for the Event Hubs namespace. This is
            likely to be similar to

            <yournamespace>.servicebus.windows.net
        - id: eventHubName
          type:
            - string
          description: The path of the specific Event Hub to connect the client to.
        - id: credential
          type:
            - TokenCredential
          description: >-
            SharedKeyCredential object or your credential that implements the
            TokenCredential interface.
        - id: options
          type:
            - '@azure/event-hubs.EventHubClientOptions'
          description: >
            A set of options to apply when configuring the client.

            - `dataTransformer`: A set of `encode`/`decode` methods to be used
            to encode an event before sending to service

            and to decode the event received from the service

            - `userAgent`      : A string to append to the built in user agent
            string that is passed as a connection property

            to the service.

            - `websocket`      : The WebSocket constructor used to create an
            AMQP connection if you choose to make the connection

            over a WebSocket.

            - `webSocketConstructorOptions` : Options to pass to the Websocket
            constructor when you choose to make the connection

            over a WebSocket.

            - `retryOptions`   : The retry options for all the operations on the
            client/producer/consumer.

            A simple usage can be `{ "maxRetries": 4 }`.
          optional: true
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubConsumerClient.getPartitionIds'
    name: getPartitionIds()
    children: []
    type: method
    langs:
      - typeScript
    summary: Provides an array of partitionIds.
    syntax:
      content: function getPartitionIds()
      parameters: []
      return:
        type:
          - 'Promise<string[]>'
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubConsumerClient.getPartitionProperties'
    name: 'getPartitionProperties(string, GetPartitionPropertiesOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Provides information about the specified partition.
    syntax:
      content: >-
        function getPartitionProperties(partitionId: string, options?:
        GetPartitionPropertiesOptions)
      parameters:
        - id: partitionId
          type:
            - string
          description: Partition ID for which partition information is required.
        - id: options
          type:
            - '@azure/event-hubs.GetPartitionPropertiesOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/event-hubs.PartitionProperties>
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubConsumerClient.getProperties'
    name: getProperties(GetPropertiesOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: Provides the Event Hub runtime information.
    syntax:
      content: 'function getProperties(options?: GetPropertiesOptions)'
      parameters:
        - id: options
          type:
            - '@azure/event-hubs.GetPropertiesOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/event-hubs.EventHubProperties>
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubConsumerClient.subscribe_2'
    name: 'subscribe(string, OnReceivedEvents, PartitionManager, SubscriptionOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Subscribes to multiple partitions.

      Use this overload if you want to coordinate with other subscribers using a
      `PartitionManager`
    syntax:
      content: >-
        function subscribe(consumerGroupName: string, onReceivedEvents:
        OnReceivedEvents, partitionManager: PartitionManager, options?:
        SubscriptionOptions)
      parameters:
        - id: consumerGroupName
          type:
            - string
          description: >-
            The name of the consumer group from which you want to process
            events.
        - id: onReceivedEvents
          type:
            - '@azure/event-hubs.OnReceivedEvents'
          description: |-
            Called when new events are received.
                                    This is also a good place to update checkpoints as appropriate.
        - id: partitionManager
          type:
            - '@azure/event-hubs.PartitionManager'
          description: >-
            A partition manager that manages ownership information and
            checkpoint details.
        - id: options
          type:
            - '@azure/event-hubs.SubscriptionOptions'
          description: |
            Options to handle additional events related to partitions (errors,
                           opening, closing) as well as batch sizing.
          optional: true
      return:
        type:
          - '@azure/event-hubs.Subscription'
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubConsumerClient.subscribe_1'
    name: 'subscribe(string, OnReceivedEvents, string, SubscriptionOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Subscribe to all messages from a subset of partitions.

      Use this overload if you want to read from a specific set of partitions
      and not coordinate with

      other subscribers.
    syntax:
      content: >-
        function subscribe(consumerGroupName: string, onReceivedEvents:
        OnReceivedEvents, partitionId: string, options?: SubscriptionOptions)
      parameters:
        - id: consumerGroupName
          type:
            - string
          description: >-
            The name of the consumer group from which you want to process
            events.
        - id: onReceivedEvents
          type:
            - '@azure/event-hubs.OnReceivedEvents'
          description: Called when new events are received.
        - id: partitionId
          type:
            - string
          description: A partition id to subscribe to.
        - id: options
          type:
            - '@azure/event-hubs.SubscriptionOptions'
          description: |
            Options to handle additional events related to partitions (errors,
                           opening, closing) as well as batch sizing.
          optional: true
      return:
        type:
          - '@azure/event-hubs.Subscription'
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubConsumerClient.subscribe'
    name: 'subscribe(string, OnReceivedEvents, SubscriptionOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Subscribe to all messages from all available partitions.

      Use this overload if you want to read from all partitions and not
      coordinate with

      other subscribers.
    syntax:
      content: >-
        function subscribe(consumerGroupName: string, onReceivedEvents:
        OnReceivedEvents, options?: SubscriptionOptions)
      parameters:
        - id: consumerGroupName
          type:
            - string
          description: >-
            The name of the consumer group from which you want to process
            events.
        - id: onReceivedEvents
          type:
            - '@azure/event-hubs.OnReceivedEvents'
          description: Called when new events are received.
        - id: options
          type:
            - '@azure/event-hubs.SubscriptionOptions'
          description: |
            Options to handle additional events related to partitions (errors,
                           opening, closing) as well as batch sizing.
          optional: true
      return:
        type:
          - '@azure/event-hubs.Subscription'
    package: '@azure/event-hubs'
references:
  - uid: '@azure/event-hubs.EventHubClientOptions'
    name: EventHubClientOptions
    spec.typeScript:
      - name: EventHubClientOptions
        fullName: EventHubClientOptions
        uid: '@azure/event-hubs.EventHubClientOptions'
  - uid: '@azure/event-hubs.GetPartitionPropertiesOptions'
    name: GetPartitionPropertiesOptions
    spec.typeScript:
      - name: GetPartitionPropertiesOptions
        fullName: GetPartitionPropertiesOptions
        uid: '@azure/event-hubs.GetPartitionPropertiesOptions'
  - uid: Promise<@azure/event-hubs.PartitionProperties>
    name: PartitionProperties>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: PartitionProperties
        fullName: PartitionProperties
        uid: '@azure/event-hubs.PartitionProperties'
      - name: '>'
        fullName: '>'
  - uid: '@azure/event-hubs.GetPropertiesOptions'
    name: GetPropertiesOptions
    spec.typeScript:
      - name: GetPropertiesOptions
        fullName: GetPropertiesOptions
        uid: '@azure/event-hubs.GetPropertiesOptions'
  - uid: Promise<@azure/event-hubs.EventHubProperties>
    name: EventHubProperties>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: EventHubProperties
        fullName: EventHubProperties
        uid: '@azure/event-hubs.EventHubProperties'
      - name: '>'
        fullName: '>'
  - uid: '@azure/event-hubs.OnReceivedEvents'
    name: OnReceivedEvents
    spec.typeScript:
      - name: OnReceivedEvents
        fullName: OnReceivedEvents
        uid: '@azure/event-hubs.OnReceivedEvents'
  - uid: '@azure/event-hubs.SubscriptionOptions'
    name: SubscriptionOptions
    spec.typeScript:
      - name: SubscriptionOptions
        fullName: SubscriptionOptions
        uid: '@azure/event-hubs.SubscriptionOptions'
  - uid: '@azure/event-hubs.Subscription'
    name: Subscription
    spec.typeScript:
      - name: Subscription
        fullName: Subscription
        uid: '@azure/event-hubs.Subscription'
  - uid: '@azure/event-hubs.PartitionManager'
    name: PartitionManager
    spec.typeScript:
      - name: PartitionManager
        fullName: PartitionManager
        uid: '@azure/event-hubs.PartitionManager'
