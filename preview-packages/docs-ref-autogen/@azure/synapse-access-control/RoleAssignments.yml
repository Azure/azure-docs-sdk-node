### YamlMime:TSType
name: RoleAssignments
uid: '@azure/synapse-access-control.RoleAssignments'
package: '@azure/synapse-access-control'
summary: Interface representing a RoleAssignments.
fullName: RoleAssignments
remarks: ''
isPreview: false
isDeprecated: false
type: interface
methods:
  - name: >-
      checkPrincipalAccess(SubjectInfo, RequiredAction[], string,
      RoleAssignmentsCheckPrincipalAccessOptionalParams)
    uid: '@azure/synapse-access-control.RoleAssignments.checkPrincipalAccess'
    package: '@azure/synapse-access-control'
    summary: >-
      Check if the given principalId has access to perform list of actions at a
      given scope.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function checkPrincipalAccess(subject: SubjectInfo, actions:
        RequiredAction[], scope: string, options?:
        RoleAssignmentsCheckPrincipalAccessOptionalParams)
      parameters:
        - id: subject
          type: <xref uid="@azure/synapse-access-control.SubjectInfo" />
          description: Subject details
        - id: actions
          type: '<xref uid="@azure/synapse-access-control.RequiredAction" />[]'
          description: List of actions.
        - id: scope
          type: string
          description: Scope at which the check access is done.
        - id: options
          type: >-
            <xref
            uid="@azure/synapse-access-control.RoleAssignmentsCheckPrincipalAccessOptionalParams"
            />
          description: |
            The options parameters.
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/synapse-access-control.RoleAssignmentsCheckPrincipalAccessResponse"
          />&gt;
        description: ''
  - name: >-
      createRoleAssignment(string, string, string, string,
      RoleAssignmentsCreateRoleAssignmentOptionalParams)
    uid: '@azure/synapse-access-control.RoleAssignments.createRoleAssignment'
    package: '@azure/synapse-access-control'
    summary: Create role assignment.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createRoleAssignment(roleAssignmentId: string, roleId: string,
        principalId: string, scope: string, options?:
        RoleAssignmentsCreateRoleAssignmentOptionalParams)
      parameters:
        - id: roleAssignmentId
          type: string
          description: The ID of the role assignment.
        - id: roleId
          type: string
          description: Role ID of the Synapse Built-In Role
        - id: principalId
          type: string
          description: Object ID of the AAD principal or security-group
        - id: scope
          type: string
          description: Scope at which the role assignment is created
        - id: options
          type: >-
            <xref
            uid="@azure/synapse-access-control.RoleAssignmentsCreateRoleAssignmentOptionalParams"
            />
          description: |
            The options parameters.
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/synapse-access-control.RoleAssignmentsCreateRoleAssignmentResponse"
          />&gt;
        description: ''
  - name: >-
      deleteRoleAssignmentById(string,
      RoleAssignmentsDeleteRoleAssignmentByIdOptionalParams)
    uid: '@azure/synapse-access-control.RoleAssignments.deleteRoleAssignmentById'
    package: '@azure/synapse-access-control'
    summary: Delete role assignment by role assignment Id.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteRoleAssignmentById(roleAssignmentId: string, options?:
        RoleAssignmentsDeleteRoleAssignmentByIdOptionalParams)
      parameters:
        - id: roleAssignmentId
          type: string
          description: The ID of the role assignment.
        - id: options
          type: >-
            <xref
            uid="@azure/synapse-access-control.RoleAssignmentsDeleteRoleAssignmentByIdOptionalParams"
            />
          description: |
            The options parameters.
      return:
        type: Promise&lt;void&gt;
        description: ''
  - name: >-
      getRoleAssignmentById(string,
      RoleAssignmentsGetRoleAssignmentByIdOptionalParams)
    uid: '@azure/synapse-access-control.RoleAssignments.getRoleAssignmentById'
    package: '@azure/synapse-access-control'
    summary: Get role assignment by role assignment Id.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getRoleAssignmentById(roleAssignmentId: string, options?:
        RoleAssignmentsGetRoleAssignmentByIdOptionalParams)
      parameters:
        - id: roleAssignmentId
          type: string
          description: The ID of the role assignment.
        - id: options
          type: >-
            <xref
            uid="@azure/synapse-access-control.RoleAssignmentsGetRoleAssignmentByIdOptionalParams"
            />
          description: |
            The options parameters.
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/synapse-access-control.RoleAssignmentsGetRoleAssignmentByIdResponse"
          />&gt;
        description: ''
  - name: listRoleAssignments(RoleAssignmentsListRoleAssignmentsOptionalParams)
    uid: '@azure/synapse-access-control.RoleAssignments.listRoleAssignments'
    package: '@azure/synapse-access-control'
    summary: List role assignments.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listRoleAssignments(options?:
        RoleAssignmentsListRoleAssignmentsOptionalParams)
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/synapse-access-control.RoleAssignmentsListRoleAssignmentsOptionalParams"
            />
          description: |
            The options parameters.
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/synapse-access-control.RoleAssignmentsListRoleAssignmentsResponse"
          />&gt;
        description: ''
