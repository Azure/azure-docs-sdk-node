### YamlMime:UniversalReference
items:
  - uid: '@azure/cosmos.Container'
    name: Container
    fullName: Container
    children:
      - '@azure/cosmos.Container.conflict'
      - '@azure/cosmos.Container.conflicts'
      - '@azure/cosmos.Container.database'
      - '@azure/cosmos.Container.delete'
      - '@azure/cosmos.Container.getQueryPlan'
      - '@azure/cosmos.Container.id'
      - '@azure/cosmos.Container.item'
      - '@azure/cosmos.Container.items'
      - '@azure/cosmos.Container.read'
      - '@azure/cosmos.Container.readPartitionKeyRanges'
      - '@azure/cosmos.Container.replace'
      - '@azure/cosmos.Container.scripts'
      - '@azure/cosmos.Container.url'
    langs:
      - typeScript
    type: class
    summary: >-
      Operations for reading, replacing, or deleting a specific, existing
      container by id.
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Container.conflict'
    name: conflict(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Used to read, replace, or delete a specific, existing <xref:Conflict> by
      id.

      Use `.conflicts` for creating new conflicts, or querying/reading all
      conflicts.
    syntax:
      content: 'function conflict(id: string)'
      parameters:
        - id: id
          type:
            - string
          description: |
            The id of the <xref:Conflict>.
      return:
        type:
          - '@azure/cosmos.Conflict'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Container.conflicts'
    name: conflicts
    fullName: conflicts
    children: []
    langs:
      - typeScript
    type: property
    summary: |
      Opertaions for reading and querying conflicts for the given container.
      For reading or deleting a specific conflict, use `.conflict(id)`.
    syntax:
      content: 'conflicts: Conflicts'
      return:
        type:
          - '@azure/cosmos.Conflicts'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Container.database'
    name: database
    fullName: database
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'database: Database'
      return:
        type:
          - '@azure/cosmos.Database'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Container.delete'
    name: delete(RequestOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: Delete the container
    syntax:
      content: 'function delete(options?: RequestOptions)'
      parameters:
        - id: options
          type:
            - '@azure/cosmos.RequestOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/cosmos.ContainerResponse>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Container.getQueryPlan'
    name: getQueryPlan(string | SqlQuerySpec)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getQueryPlan(query: string | SqlQuerySpec)'
      parameters:
        - id: query
          type:
            - string | @azure/cosmos.SqlQuerySpec
          description: ''
      return:
        type:
          - Promise<Response<PartitionedQueryExecutionInfo>>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Container.id'
    name: id
    fullName: id
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'id: string'
      return:
        type:
          - string
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Container.item'
    name: 'item(string, any)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      Used to read, replace, or delete a specific, existing <xref:Item> by id.
      Use `.items` for creating new items, or querying/reading all items.
    syntax:
      content: 'function item(id: string, partitionKey: any)'
      parameters:
        - id: id
          type:
            - string
          description: 'The id of the <xref:Item>.'
        - id: partitionKey
          type:
            - any
          description: 'The partition key of the <xref:Item>'
      return:
        type:
          - '@azure/cosmos.Item'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Container.items'
    name: items
    fullName: items
    children: []
    langs:
      - typeScript
    type: property
    summary: |
      Operations for creating new items, and reading/querying all items
      For reading, replacing, or deleting an existing item, use `.item(id)`.
    syntax:
      content: 'items: Items'
      return:
        type:
          - '@azure/cosmos.Items'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Container.read'
    name: read(RequestOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: Read the container's definition
    syntax:
      content: 'function read(options?: RequestOptions)'
      parameters:
        - id: options
          type:
            - '@azure/cosmos.RequestOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/cosmos.ContainerResponse>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Container.readPartitionKeyRanges'
    name: readPartitionKeyRanges(FeedOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function readPartitionKeyRanges(feedOptions?: FeedOptions)'
      parameters:
        - id: feedOptions
          type:
            - '@azure/cosmos.FeedOptions'
          description: ''
          optional: true
      return:
        type:
          - '@azure/cosmos.QueryIterator<PartitionKeyRange>'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Container.replace'
    name: 'replace(ContainerDefinition, RequestOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Replace the container's definition
    syntax:
      content: 'function replace(body: ContainerDefinition, options?: RequestOptions)'
      parameters:
        - id: body
          type:
            - '@azure/cosmos.ContainerDefinition'
          description: ''
        - id: options
          type:
            - '@azure/cosmos.RequestOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/cosmos.ContainerResponse>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Container.scripts'
    name: scripts
    fullName: scripts
    children: []
    langs:
      - typeScript
    type: property
    summary: 'All operations for Stored Procedures, Triggers, and User Defined Functions'
    syntax:
      content: 'scripts: Scripts'
      return:
        type:
          - '@azure/cosmos.Scripts'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Container.url'
    name: url
    fullName: url
    children: []
    langs:
      - typeScript
    type: property
    summary: Returns a reference URL to the resource. Used for linking in Permissions.
    syntax:
      content: 'url: string'
      return:
        type:
          - string
    package: '@azure/cosmos'
references:
  - uid: '@azure/cosmos.Conflicts'
    name: Conflicts
    spec.typeScript:
      - name: Conflicts
        fullName: Conflicts
        uid: '@azure/cosmos.Conflicts'
  - uid: '@azure/cosmos.Database'
    name: Database
    spec.typeScript:
      - name: Database
        fullName: Database
        uid: '@azure/cosmos.Database'
  - uid: '@azure/cosmos.Items'
    name: Items
    spec.typeScript:
      - name: Items
        fullName: Items
        uid: '@azure/cosmos.Items'
  - uid: '@azure/cosmos.Scripts'
    name: Scripts
    spec.typeScript:
      - name: Scripts
        fullName: Scripts
        uid: '@azure/cosmos.Scripts'
  - uid: '@azure/cosmos.Conflict'
    name: Conflict
    spec.typeScript:
      - name: Conflict
        fullName: Conflict
        uid: '@azure/cosmos.Conflict'
  - uid: '@azure/cosmos.RequestOptions'
    name: RequestOptions
    spec.typeScript:
      - name: RequestOptions
        fullName: RequestOptions
        uid: '@azure/cosmos.RequestOptions'
  - uid: Promise<@azure/cosmos.ContainerResponse>
    name: ContainerResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ContainerResponse
        fullName: ContainerResponse
        uid: '@azure/cosmos.ContainerResponse'
      - name: '>'
        fullName: '>'
  - uid: string | @azure/cosmos.SqlQuerySpec
    name: SqlQuerySpec
    spec.typeScript:
      - name: 'string | '
        fullName: 'string | '
      - name: SqlQuerySpec
        fullName: SqlQuerySpec
        uid: '@azure/cosmos.SqlQuerySpec'
  - uid: '@azure/cosmos.Item'
    name: Item
    spec.typeScript:
      - name: Item
        fullName: Item
        uid: '@azure/cosmos.Item'
  - uid: '@azure/cosmos.FeedOptions'
    name: FeedOptions
    spec.typeScript:
      - name: FeedOptions
        fullName: FeedOptions
        uid: '@azure/cosmos.FeedOptions'
  - uid: '@azure/cosmos.QueryIterator<PartitionKeyRange>'
    name: QueryIterator<PartitionKeyRange>
    spec.typeScript:
      - name: QueryIterator
        fullName: QueryIterator
        uid: '@azure/cosmos.QueryIterator'
      - name: <PartitionKeyRange>
        fullName: <PartitionKeyRange>
  - uid: '@azure/cosmos.ContainerDefinition'
    name: ContainerDefinition
    spec.typeScript:
      - name: ContainerDefinition
        fullName: ContainerDefinition
        uid: '@azure/cosmos.ContainerDefinition'
