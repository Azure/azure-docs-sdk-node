### YamlMime:TSType
name: SchemaRegistryClient
uid: '@azure/schema-registry.SchemaRegistryClient'
package: '@azure/schema-registry'
summary: Client for Azure Schema Registry service.
fullName: SchemaRegistryClient
remarks: ''
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: 'SchemaRegistryClient(string, TokenCredential, SchemaRegistryClientOptions)'
    uid: '@azure/schema-registry.SchemaRegistryClient.constructor'
    package: '@azure/schema-registry'
    summary: Creates a new client for Azure Schema Registry service.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        new SchemaRegistryClient(fullyQualifiedNamespace: string, credential:
        TokenCredential, options?: SchemaRegistryClientOptions)
      parameters:
        - id: fullyQualifiedNamespace
          type: string
          description: |-
            The Schema Registry service qualified namespace URL, for example
                                             https://mynamespace.servicebus.windows.net.
        - id: credential
          type: TokenCredential
          description: Credential to authenticate requests to the service.
        - id: options
          type: <xref uid="@azure/schema-registry.SchemaRegistryClientOptions" />
          description: |
            Options to configure API requests to the service.
properties:
  - name: fullyQualifiedNamespace
    uid: '@azure/schema-registry.SchemaRegistryClient.fullyQualifiedNamespace'
    package: '@azure/schema-registry'
    summary: The Schema Registry service fully qualified namespace URL.
    fullName: fullyQualifiedNamespace
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'fullyQualifiedNamespace: string'
      return:
        type: string
        description: ''
methods:
  - name: 'getSchema(string, GetSchemaOptions)'
    uid: '@azure/schema-registry.SchemaRegistryClient.getSchema'
    package: '@azure/schema-registry'
    summary: Gets an existing schema by ID.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getSchema(id: string, options?: GetSchemaOptions)'
      parameters:
        - id: id
          type: string
          description: Unique schema ID.
        - id: options
          type: <xref uid="@azure/schema-registry.GetSchemaOptions" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref uid="@azure/schema-registry.Schema" /> |
          undefined&gt;
        description: >-
          Schema with given ID or undefined if no schema was found with the
          given ID.
  - name: 'getSchemaProperties(SchemaDescription, GetSchemaPropertiesOptions)'
    uid: '@azure/schema-registry.SchemaRegistryClient.getSchemaProperties'
    package: '@azure/schema-registry'
    summary: |-
      Gets the ID of an existing schema with matching name, group, type, and
      definition.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getSchemaProperties(schema: SchemaDescription, options?:
        GetSchemaPropertiesOptions)
      parameters:
        - id: schema
          type: <xref uid="@azure/schema-registry.SchemaDescription" />
          description: Schema to match.
        - id: options
          type: <xref uid="@azure/schema-registry.GetSchemaPropertiesOptions" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref uid="@azure/schema-registry.SchemaProperties" /> |
          undefined&gt;
        description: Matched schema's ID or undefined if no matching schema was found.
  - name: 'registerSchema(SchemaDescription, RegisterSchemaOptions)'
    uid: '@azure/schema-registry.SchemaRegistryClient.registerSchema'
    package: '@azure/schema-registry'
    summary: >
      Registers a new schema and returns its ID.

      If schema of specified name does not exist in the specified group, a
      schema

      is created at version 1. If schema of specified name exists already in

      specified group, schema is created at latest version + 1.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function registerSchema(schema: SchemaDescription, options?:
        RegisterSchemaOptions)
      parameters:
        - id: schema
          type: <xref uid="@azure/schema-registry.SchemaDescription" />
          description: Schema to register.
        - id: options
          type: <xref uid="@azure/schema-registry.RegisterSchemaOptions" />
          description: ''
      return:
        type: Promise&lt;<xref uid="@azure/schema-registry.SchemaProperties" />&gt;
        description: Registered schema's ID.
