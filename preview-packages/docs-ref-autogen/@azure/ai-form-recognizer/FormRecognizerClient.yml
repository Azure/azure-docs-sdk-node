### YamlMime:UniversalReference
items:
  - uid: '@azure/ai-form-recognizer.FormRecognizerClient'
    name: FormRecognizerClient
    fullName: FormRecognizerClient
    children:
      - '@azure/ai-form-recognizer.FormRecognizerClient.beginRecognizeContent'
      - >-
        @azure/ai-form-recognizer.FormRecognizerClient.beginRecognizeContentFromUrl
      - '@azure/ai-form-recognizer.FormRecognizerClient.beginRecognizeCustomForms'
      - >-
        @azure/ai-form-recognizer.FormRecognizerClient.beginRecognizeCustomFormsFromUrl
      - '@azure/ai-form-recognizer.FormRecognizerClient.beginRecognizeReceipts'
      - >-
        @azure/ai-form-recognizer.FormRecognizerClient.beginRecognizeReceiptsFromUrl
      - '@azure/ai-form-recognizer.FormRecognizerClient.endpointUrl'
      - '@azure/ai-form-recognizer.FormRecognizerClient.constructor'
    langs:
      - typeScript
    type: class
    summary: Client class for interacting with Azure Form Recognizer service.
    package: '@azure/ai-form-recognizer'
  - uid: '@azure/ai-form-recognizer.FormRecognizerClient.beginRecognizeContent'
    name: >-
      beginRecognizeContent(FormRecognizerRequestBody, FormContentType,
      BeginRecognizeContentOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Recognizes content, including text and table structure from a form
      document.

      This method returns a long running operation poller that allows you to
      wait

      indefinitely until the operation is completed.

      Note that the onProgress callback will not be invoked if the operation
      completes in the first

      request, and attempting to cancel a completed copy will result in an error
      being thrown.


      Example usage:

      ```ts

      const path = "./Invoice_7.pdf";

      const readStream = fs.createReadStream(path);


      const client = new FormRecognizerClient(endpoint, new
      AzureKeyCredential(apiKey));

      const poller = await client.beginRecognizeContent(readStream,
      "application/pdf", {
        onProgress: (state) => { console.log(`status: ${state.status}`); }
      });


      const pages = await poller.pollUntilDone();

      ```
    syntax:
      content: >-
        function beginRecognizeContent(form: FormRecognizerRequestBody,
        contentType?: FormContentType, options?: BeginRecognizeContentOptions)
      parameters:
        - id: form
          type:
            - '@azure/ai-form-recognizer.FormRecognizerRequestBody'
          description: Input document
        - id: contentType
          type:
            - '@azure/ai-form-recognizer.FormContentType'
          description: >-
            Content type of the input. Supported types are "application/pdf",
            "image/jpeg", "image/png", and "image/tiff";
          optional: true
        - id: options
          type:
            - '@azure/ai-form-recognizer.BeginRecognizeContentOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/ai-form-recognizer.ContentPollerLike>
        description: ''
    package: '@azure/ai-form-recognizer'
  - uid: >-
      @azure/ai-form-recognizer.FormRecognizerClient.beginRecognizeContentFromUrl
    name: 'beginRecognizeContentFromUrl(string, BeginRecognizeContentOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Recognizes content, including text and table structure from a url to a
      form document.

      This method returns a long running operation poller that allows you to
      wait

      indefinitely until the operation is completed.

      Note that the onProgress callback will not be invoked if the operation
      completes in the first

      request, and attempting to cancel a completed copy will result in an error
      being thrown.


      Example usage:

      ```ts

      const url = "<form document url>";


      const client = new FormRecognizerClient(endpoint, new
      AzureKeyCredential(apiKey));

      const poller = await client.beginRecognizeContentFromUrl(url, {
        onProgress: (state) => { console.log(`status: ${state.status}`); }
      });


      const pages = await poller.pollUntilDone();

      ```
    syntax:
      content: >-
        function beginRecognizeContentFromUrl(formUrl: string, options?:
        BeginRecognizeContentOptions)
      parameters:
        - id: formUrl
          type:
            - string
          description: >-
            Url to an accessible form document. Supported document types include
            PDF, JPEG, PNG, and TIFF.
        - id: options
          type:
            - '@azure/ai-form-recognizer.BeginRecognizeContentOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/ai-form-recognizer.ContentPollerLike>
        description: ''
    package: '@azure/ai-form-recognizer'
  - uid: '@azure/ai-form-recognizer.FormRecognizerClient.beginRecognizeCustomForms'
    name: >-
      beginRecognizeCustomForms(string, FormRecognizerRequestBody,
      FormContentType, BeginRecognizeFormsOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Recognizes forms from a given document using a custom form model from
      training.

      This method returns a long running operation poller that allows you to
      wait

      indefinitely until the operation is completed.

      Note that the onProgress callback will not be invoked if the operation
      completes in the first

      request, and attempting to cancel a completed copy will result in an error
      being thrown.

      Example usage:

      ```ts

      const path = "./Invoice_6.pdf";

      const readStream = fs.createReadStream(path);


      const client = new FormRecognizerClient(endpoint, new
      AzureKeyCredential(apiKey));

      const poller = await client.beginRecognizeCustomForms(modelId, readStream,
      "application/pdf", {
        onProgress: (state) => { console.log(`status: ${state.status}`); }
      });

      const forms = await poller.pollUntilDone();

      ```
    syntax:
      content: >-
        function beginRecognizeCustomForms(modelId: string, form:
        FormRecognizerRequestBody, contentType?: FormContentType, options?:
        BeginRecognizeFormsOptions)
      parameters:
        - id: modelId
          type:
            - string
          description: Id of the custom form model to use
        - id: form
          type:
            - '@azure/ai-form-recognizer.FormRecognizerRequestBody'
          description: Input form document
        - id: contentType
          type:
            - '@azure/ai-form-recognizer.FormContentType'
          description: >-
            Content type of the input. Supported types are "application/pdf",
            "image/jpeg", "image/png", and "image/tiff";
          optional: true
        - id: options
          type:
            - '@azure/ai-form-recognizer.BeginRecognizeFormsOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/ai-form-recognizer.FormPollerLike>
        description: ''
    package: '@azure/ai-form-recognizer'
  - uid: >-
      @azure/ai-form-recognizer.FormRecognizerClient.beginRecognizeCustomFormsFromUrl
    name: >-
      beginRecognizeCustomFormsFromUrl(string, string,
      BeginRecognizeFormsOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Recognizes forms from a url to a form document using a custom form model
      from training.

      This method returns a long running operation poller that allows you to
      wait

      indefinitely until the operation is completed.

      Note that the onProgress callback will not be invoked if the operation
      completes in the first

      request, and attempting to cancel a completed copy will result in an error
      being thrown.

      Example usage:

      ```ts

      const url = "<form document url>";


      const client = new FormRecognizerClient(endpoint, new
      AzureKeyCredential(apiKey));

      const poller = await client.beginRecognizeCustomFormsFromUrl(modelId, url,
      {
        onProgress: (state) => { console.log(`status: ${state.status}`); }
      });

      const forms = await poller.pollUntilDone();

      ```
    syntax:
      content: >-
        function beginRecognizeCustomFormsFromUrl(modelId: string, formUrl:
        string, options?: BeginRecognizeFormsOptions)
      parameters:
        - id: modelId
          type:
            - string
          description: Id of the custom form model to use
        - id: formUrl
          type:
            - string
          description: >-
            Url to an accessible form document. Supported document types include
            PDF, JPEG, PNG, and TIFF.
        - id: options
          type:
            - '@azure/ai-form-recognizer.BeginRecognizeFormsOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/ai-form-recognizer.FormPollerLike>
        description: ''
    package: '@azure/ai-form-recognizer'
  - uid: '@azure/ai-form-recognizer.FormRecognizerClient.beginRecognizeReceipts'
    name: >-
      beginRecognizeReceipts(FormRecognizerRequestBody, FormContentType,
      BeginRecognizeReceiptsOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Recognizes data from receipts using pre-built receipt model, enabling you
      to extract structure data

      from receipts such as merchant name, merchant phone number, transaction
      date, and more.

      For supported fields recognized by the service, please refer to
      https://westus2.dev.cognitive.microsoft.com/docs/services/form-recognizer-api-v2-preview/operations/GetAnalyzeReceiptResult.


      This method returns a long running operation poller that allows you to
      wait

      indefinitely until the operation is completed.

      Note that the onProgress callback will not be invoked if the operation
      completes in the first

      request, and attempting to cancel a completed copy will result in an error
      being thrown.


      Example usage:

      ```ts

      const path = "./contoso-allinone.jpg";

      const readStream = fs.createReadStream(path);


      const client = new FormRecognizerClient(endpoint, new
      AzureKeyCredential(apiKey));

      const poller = await client.beginRecognizeReceipts(readStream,
      "image/jpeg", {
        onProgress: (state) => { console.log(`status: ${state.status}`); }
      });


      const receipts = await poller.pollUntilDone();
       if (!receipts || receipts.length <= 0) {
         throw new Error("Expecting at lease one receipt in analysis result");
       }

      const receipt = receipts[0];

      console.log("First receipt:");

      const receiptTypeField = receipt.fields["ReceiptType"];

      if (receiptTypeField.valueType === "string") {
        console.log(`  Receipt Type: '${receiptTypeField.value || "<missing>"}', with confidence of ${receiptTypeField.confidence}`);
      }

      const merchantNameField = receipt.fields["MerchantName"];

      if (merchantNameField.valueType === "string") {
        console.log(`  Merchant Name: '${merchantNameField.value || "<missing>"}', with confidence of ${merchantNameField.confidence}`);
      }

      const transactionDate = receipt.fields["TransactionDate"];

      if (transactionDate.valueType === "date") {
        console.log(`  Transaction Date: '${transactionDate.value || "<missing>"}', with confidence of ${transactionDate.confidence}`);
      }

      const itemsField = receipt.fields["Items"];

      if (itemsField.valueType === "array") {
        for (const itemField of itemsField.value || []) {
          if (itemField.valueType === "object") {
            const itemNameField = itemField.value!["Name"];
            if (itemNameField.valueType === "string") {
              console.log(`    Item Name: '${itemNameField.value || "<missing>"}', with confidence of ${itemNameField.confidence}`);
            }
          }
       }
      }

      const totalField = receipt.fields["Total"];

      if (totalField.valueType === "number") {
        console.log(`  Total: '${totalField.value || "<missing>"}', with confidence of ${totalField.confidence}`);
      }

      ```
    syntax:
      content: >-
        function beginRecognizeReceipts(receipt: FormRecognizerRequestBody,
        contentType?: FormContentType, options?: BeginRecognizeReceiptsOptions)
      parameters:
        - id: receipt
          type:
            - '@azure/ai-form-recognizer.FormRecognizerRequestBody'
          description: Input document
        - id: contentType
          type:
            - '@azure/ai-form-recognizer.FormContentType'
          description: >-
            Content type of the input. Supported types are "application/pdf",
            "image/jpeg", "image/png", and "image/tiff";
          optional: true
        - id: options
          type:
            - '@azure/ai-form-recognizer.BeginRecognizeReceiptsOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/ai-form-recognizer.ReceiptPollerLike>
        description: ''
    package: '@azure/ai-form-recognizer'
  - uid: >-
      @azure/ai-form-recognizer.FormRecognizerClient.beginRecognizeReceiptsFromUrl
    name: 'beginRecognizeReceiptsFromUrl(string, BeginRecognizeReceiptsOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Recognizes receipt information from a url using pre-built receipt model,
      enabling you to extract structure data

      from receipts such as merchant name, merchant phone number, transaction
      date, and more.

      For supported fields recognized by the service, please refer to
      https://westus2.dev.cognitive.microsoft.com/docs/services/form-recognizer-api-v2-preview/operations/GetAnalyzeReceiptResult.


      This method returns a long running operation poller that allows you to
      wait

      indefinitely until the operation is completed.

      Note that the onProgress callback will not be invoked if the operation
      completes in the first

      request, and attempting to cancel a completed copy will result in an error
      being thrown.


      Example usage:

      ```ts

      const url = "<url to the receipt document>";

      const client = new FormRecognizerClient(endpoint, new
      AzureKeyCredential(apiKey));

      const poller = await client.beginRecognizeReceiptsFromUrl(
        url, {
          includeFieldElements: true,
          onProgress: (state) => { console.log(`analyzing status: ${state.status}`); }
      });

      const receipts = await poller.pollUntilDone();
       if (!receipts || receipts.length <= 0) {
         throw new Error("Expecting at lease one receipt in analysis result");
       }

      const receipt = receipts[0];

      console.log("First receipt:");

      const receiptTypeField = receipt.fields["ReceiptType"];

      if (receiptTypeField.valueType === "string") {
        console.log(`  Receipt Type: '${receiptTypeField.value || "<missing>"}', with confidence of ${receiptTypeField.confidence}`);
      }

      const merchantNameField = receipt.fields["MerchantName"];

      if (merchantNameField.valueType === "string") {
        console.log(`  Merchant Name: '${merchantNameField.value || "<missing>"}', with confidence of ${merchantNameField.confidence}`);
      }

      const transactionDate = receipt.fields["TransactionDate"];

      if (transactionDate.valueType === "date") {
        console.log(`  Transaction Date: '${transactionDate.value || "<missing>"}', with confidence of ${transactionDate.confidence}`);
      }

      const itemsField = receipt.fields["Items"];

      if (itemsField.valueType === "array") {
        for (const itemField of itemsField.value || []) {
          if (itemField.valueType === "object") {
            const itemNameField = itemField.value!["Name"];
            if (itemNameField.valueType === "string") {
              console.log(`    Item Name: '${itemNameField.value || "<missing>"}', with confidence of ${itemNameField.confidence}`);
            }
          }
       }
      }

      const totalField = receipt.fields["Total"];

      if (totalField.valueType === "number") {
        console.log(`  Total: '${totalField.value || "<missing>"}', with confidence of ${totalField.confidence}`);
      }

      ```
    syntax:
      content: >-
        function beginRecognizeReceiptsFromUrl(receiptUrl: string, options?:
        BeginRecognizeReceiptsOptions)
      parameters:
        - id: receiptUrl
          type:
            - string
          description: >-
            Url to an accesssible receipt document. Supported document types
            include PDF, JPEG, PNG, and TIFF.
        - id: options
          type:
            - '@azure/ai-form-recognizer.BeginRecognizeReceiptsOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/ai-form-recognizer.ReceiptPollerLike>
        description: ''
    package: '@azure/ai-form-recognizer'
  - uid: '@azure/ai-form-recognizer.FormRecognizerClient.endpointUrl'
    name: endpointUrl
    fullName: endpointUrl
    children: []
    langs:
      - typeScript
    type: property
    summary: Url to an Azure Form Recognizer service endpoint
    syntax:
      content: 'endpointUrl: string'
      return:
        type:
          - string
        description: ''
    package: '@azure/ai-form-recognizer'
  - uid: '@azure/ai-form-recognizer.FormRecognizerClient.constructor'
    name: >-
      FormRecognizerClient(string, TokenCredential | KeyCredential,
      FormRecognizerClientOptions)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: >-
      Creates an instance of FormRecognizerClient.

      Example usage:

      ```ts

      import { FormRecognizerClient, AzureKeyCredential } from
      "@azure/ai-form-recognizer";


      const client = new FormRecognizerClient(
         "<service endpoint>",
         new AzureKeyCredential("<api key>")
      );

      ```
    syntax:
      content: >-
        new FormRecognizerClient(endpointUrl: string, credential:
        TokenCredential | KeyCredential, options?: FormRecognizerClientOptions)
      parameters:
        - id: endpointUrl
          type:
            - string
          description: Url to an Azure Form Recognizer service endpoint
        - id: credential
          type:
            - TokenCredential | KeyCredential
          description: Used to authenticate requests to the service.
        - id: options
          type:
            - '@azure/ai-form-recognizer.FormRecognizerClientOptions'
          description: ''
          optional: true
    package: '@azure/ai-form-recognizer'
references:
  - uid: '@azure/ai-form-recognizer.FormRecognizerClientOptions'
    name: FormRecognizerClientOptions
    spec.typeScript:
      - name: FormRecognizerClientOptions
        fullName: FormRecognizerClientOptions
        uid: '@azure/ai-form-recognizer.FormRecognizerClientOptions'
  - uid: '@azure/ai-form-recognizer.FormRecognizerRequestBody'
    name: FormRecognizerRequestBody
    spec.typeScript:
      - name: FormRecognizerRequestBody
        fullName: FormRecognizerRequestBody
        uid: '@azure/ai-form-recognizer.FormRecognizerRequestBody'
  - uid: '@azure/ai-form-recognizer.FormContentType'
    name: FormContentType
    spec.typeScript:
      - name: FormContentType
        fullName: FormContentType
        uid: '@azure/ai-form-recognizer.FormContentType'
  - uid: '@azure/ai-form-recognizer.BeginRecognizeContentOptions'
    name: BeginRecognizeContentOptions
    spec.typeScript:
      - name: BeginRecognizeContentOptions
        fullName: BeginRecognizeContentOptions
        uid: '@azure/ai-form-recognizer.BeginRecognizeContentOptions'
  - uid: Promise<@azure/ai-form-recognizer.ContentPollerLike>
    name: ContentPollerLike>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ContentPollerLike
        fullName: ContentPollerLike
        uid: '@azure/ai-form-recognizer.ContentPollerLike'
      - name: '>'
        fullName: '>'
  - uid: '@azure/ai-form-recognizer.BeginRecognizeFormsOptions'
    name: BeginRecognizeFormsOptions
    spec.typeScript:
      - name: BeginRecognizeFormsOptions
        fullName: BeginRecognizeFormsOptions
        uid: '@azure/ai-form-recognizer.BeginRecognizeFormsOptions'
  - uid: Promise<@azure/ai-form-recognizer.FormPollerLike>
    name: FormPollerLike>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: FormPollerLike
        fullName: FormPollerLike
        uid: '@azure/ai-form-recognizer.FormPollerLike'
      - name: '>'
        fullName: '>'
  - uid: '@azure/ai-form-recognizer.BeginRecognizeReceiptsOptions'
    name: BeginRecognizeReceiptsOptions
    spec.typeScript:
      - name: BeginRecognizeReceiptsOptions
        fullName: BeginRecognizeReceiptsOptions
        uid: '@azure/ai-form-recognizer.BeginRecognizeReceiptsOptions'
  - uid: Promise<@azure/ai-form-recognizer.ReceiptPollerLike>
    name: ReceiptPollerLike>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ReceiptPollerLike
        fullName: ReceiptPollerLike
        uid: '@azure/ai-form-recognizer.ReceiptPollerLike'
      - name: '>'
        fullName: '>'
