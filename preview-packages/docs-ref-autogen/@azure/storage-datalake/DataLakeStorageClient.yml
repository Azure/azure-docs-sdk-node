### YamlMime:UniversalReference
items:
  - uid: '@azure/storage-datalake.DataLakeStorageClient'
    name: DataLakeStorageClient
    fullName: DataLakeStorageClient
    children:
      - '@azure/storage-datalake.DataLakeStorageClient.acceptLanguage'
      - '@azure/storage-datalake.DataLakeStorageClient.accountName'
      - '@azure/storage-datalake.DataLakeStorageClient.beginLongRunningRequest'
      - '@azure/storage-datalake.DataLakeStorageClient.credentials'
      - '@azure/storage-datalake.DataLakeStorageClient.constructor'
      - '@azure/storage-datalake.DataLakeStorageClient.dnsSuffix'
      - '@azure/storage-datalake.DataLakeStorageClient.filesystem'
      - >-
        @azure/storage-datalake.DataLakeStorageClient.longRunningOperationRetryTimeout
      - '@azure/storage-datalake.DataLakeStorageClient.path'
      - '@azure/storage-datalake.DataLakeStorageClient.restoreLROPoller'
      - '@azure/storage-datalake.DataLakeStorageClient.sendLongRunningRequest'
      - '@azure/storage-datalake.DataLakeStorageClient.sendLRORequest'
      - '@azure/storage-datalake.DataLakeStorageClient.sendOperationRequest'
      - '@azure/storage-datalake.DataLakeStorageClient.sendRequest'
      - '@azure/storage-datalake.DataLakeStorageClient.xMsVersion'
    langs:
      - typeScript
    type: class
    summary: ''
    extends:
      name: '@azure/storage-datalake.DataLakeStorageClientContext'
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.DataLakeStorageClient.acceptLanguage'
    name: acceptLanguage
    fullName: acceptLanguage
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'acceptLanguage: string'
      return:
        type:
          - string
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.DataLakeStorageClient.accountName'
    name: accountName
    fullName: accountName
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'accountName: string'
      return:
        type:
          - string
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.DataLakeStorageClient.beginLongRunningRequest'
    name: >-
      beginLongRunningRequest(RequestPrepareOptions | WebResource,
      RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Send the initial request of a LRO (long running operation) and get back an

      HttpLongRunningOperationResponse that provides methods for polling the LRO
      and checking if the

      LRO is finished.
    syntax:
      content: >-
        function beginLongRunningRequest(request: RequestPrepareOptions |
        WebResource, options?: RequestOptionsBase)
      parameters:
        - id: request
          type:
            - RequestPrepareOptions | WebResource
          description: The request object
        - id: options
          type:
            - RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<LROPoller>
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.DataLakeStorageClient.credentials'
    name: credentials
    fullName: credentials
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'credentials: ServiceClientCredentials'
      return:
        type:
          - ServiceClientCredentials
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.DataLakeStorageClient.constructor'
    name: >-
      DataLakeStorageClient(ServiceClientCredentials, string,
      Models.DataLakeStorageClientOptions)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Initializes a new instance of the DataLakeStorageClient class.
    syntax:
      content: >-
        new DataLakeStorageClient(credentials: ServiceClientCredentials,
        accountName: string, options?: Models.DataLakeStorageClientOptions)
      parameters:
        - id: credentials
          type:
            - ServiceClientCredentials
          description: Credentials needed for the client to connect to Azure.
        - id: accountName
          type:
            - string
          description: The Azure Storage account name.
        - id: options
          type:
            - Models.DataLakeStorageClientOptions
          description: ''
          optional: true
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.DataLakeStorageClient.dnsSuffix'
    name: dnsSuffix
    fullName: dnsSuffix
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    optional: true
    syntax:
      content: 'dnsSuffix?: undefined | string'
      return:
        type:
          - undefined | string
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.DataLakeStorageClient.filesystem'
    name: filesystem
    fullName: filesystem
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'filesystem: FilesystemOperations'
      return:
        type:
          - '@azure/storage-datalake.FilesystemOperations'
    package: '@azure/storage-datalake'
  - uid: >-
      @azure/storage-datalake.DataLakeStorageClient.longRunningOperationRetryTimeout
    name: longRunningOperationRetryTimeout
    fullName: longRunningOperationRetryTimeout
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      The retry timeout in seconds for Long Running Operations. Default value is
      30.
    optional: true
    syntax:
      content: 'longRunningOperationRetryTimeout?: undefined | number'
      return:
        type:
          - undefined | number
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.DataLakeStorageClient.path'
    name: path
    fullName: path
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'path: PathOperations'
      return:
        type:
          - '@azure/storage-datalake.PathOperations'
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.DataLakeStorageClient.restoreLROPoller'
    name: restoreLROPoller(LROPollState)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Restore an LROPoller from the provided LROPollState. This method can be
      used to recreate an

      LROPoller on a different process or machine.
    syntax:
      content: 'function restoreLROPoller(lroPollState: LROPollState)'
      parameters:
        - id: lroPollState
          type:
            - LROPollState
          description: ''
      return:
        type:
          - LROPoller
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.DataLakeStorageClient.sendLongRunningRequest'
    name: >-
      sendLongRunningRequest(RequestPrepareOptions | WebResource,
      RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Provides a mechanism to make a request that will poll and provide the
      final result.
    syntax:
      content: >-
        function sendLongRunningRequest(request: RequestPrepareOptions |
        WebResource, options?: RequestOptionsBase)
      parameters:
        - id: request
          type:
            - RequestPrepareOptions | WebResource
          description: The request object
        - id: options
          type:
            - RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<HttpOperationResponse>
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.DataLakeStorageClient.sendLRORequest'
    name: 'sendLRORequest(OperationArguments, OperationSpec, RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Send the initial request of a LRO (long running operation) and get back an

      LROPoller that provides methods for polling the LRO and checking if the
      LRO is finished.
    syntax:
      content: >-
        function sendLRORequest(operationArguments: OperationArguments,
        operationSpec: OperationSpec, options?: RequestOptionsBase)
      parameters:
        - id: operationArguments
          type:
            - OperationArguments
          description: The arguments to the operation.
        - id: operationSpec
          type:
            - OperationSpec
          description: The specification for the operation.
        - id: options
          type:
            - RequestOptionsBase
          description: Additional options to be sent while making the request.
          optional: true
      return:
        type:
          - Promise<LROPoller>
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.DataLakeStorageClient.sendOperationRequest'
    name: >-
      sendOperationRequest(OperationArguments, OperationSpec,
      ServiceCallback<any>)
    children: []
    type: method
    langs:
      - typeScript
    summary: Send an HTTP request that is populated using the provided OperationSpec.
    syntax:
      content: >-
        function sendOperationRequest(operationArguments: OperationArguments,
        operationSpec: OperationSpec, callback?: ServiceCallback<any>)
      parameters:
        - id: operationArguments
          type:
            - OperationArguments
          description: >-
            The arguments that the HTTP request's templated values will be
            populated from.
        - id: operationSpec
          type:
            - OperationSpec
          description: The OperationSpec to use to populate the httpRequest.
        - id: callback
          type:
            - ServiceCallback<any>
          description: |
            The callback to call when the response is received.
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.DataLakeStorageClient.sendRequest'
    name: sendRequest(RequestPrepareOptions | WebResource)
    children: []
    type: method
    langs:
      - typeScript
    summary: Send the provided httpRequest.
    syntax:
      content: 'function sendRequest(options: RequestPrepareOptions | WebResource)'
      parameters:
        - id: options
          type:
            - RequestPrepareOptions | WebResource
          description: ''
      return:
        type:
          - Promise<HttpOperationResponse>
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.DataLakeStorageClient.xMsVersion'
    name: xMsVersion
    fullName: xMsVersion
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    optional: true
    syntax:
      content: 'xMsVersion?: undefined | string'
      return:
        type:
          - undefined | string
    package: '@azure/storage-datalake'
references:
  - uid: '@azure/storage-datalake.DataLakeStorageClientContext'
    name: DataLakeStorageClientContext
    spec.typeScript:
      - name: DataLakeStorageClientContext
        fullName: DataLakeStorageClientContext
        uid: '@azure/storage-datalake.DataLakeStorageClientContext'
  - uid: '@azure/storage-datalake.FilesystemOperations'
    name: FilesystemOperations
    spec.typeScript:
      - name: FilesystemOperations
        fullName: FilesystemOperations
        uid: '@azure/storage-datalake.FilesystemOperations'
  - uid: '@azure/storage-datalake.PathOperations'
    name: PathOperations
    spec.typeScript:
      - name: PathOperations
        fullName: PathOperations
        uid: '@azure/storage-datalake.PathOperations'
