### YamlMime:UniversalReference
items:
  - uid: '@azure/storage-datalake.PathUpdateOptionalParams'
    name: PathUpdateOptionalParams
    fullName: PathUpdateOptionalParams
    children:
      - '@azure/storage-datalake.PathUpdateOptionalParams.abortSignal'
      - '@azure/storage-datalake.PathUpdateOptionalParams.close'
      - '@azure/storage-datalake.PathUpdateOptionalParams.contentLength'
      - '@azure/storage-datalake.PathUpdateOptionalParams.contentMD5'
      - '@azure/storage-datalake.PathUpdateOptionalParams.customHeaders'
      - '@azure/storage-datalake.PathUpdateOptionalParams.ifMatch'
      - '@azure/storage-datalake.PathUpdateOptionalParams.ifModifiedSince'
      - '@azure/storage-datalake.PathUpdateOptionalParams.ifNoneMatch'
      - '@azure/storage-datalake.PathUpdateOptionalParams.ifUnmodifiedSince'
      - '@azure/storage-datalake.PathUpdateOptionalParams.onDownloadProgress'
      - '@azure/storage-datalake.PathUpdateOptionalParams.onUploadProgress'
      - '@azure/storage-datalake.PathUpdateOptionalParams.position'
      - '@azure/storage-datalake.PathUpdateOptionalParams.requestBody'
      - '@azure/storage-datalake.PathUpdateOptionalParams.retainUncommittedData'
      - '@azure/storage-datalake.PathUpdateOptionalParams.timeout'
      - '@azure/storage-datalake.PathUpdateOptionalParams.timeoutParameter'
      - '@azure/storage-datalake.PathUpdateOptionalParams.xMsAcl'
      - '@azure/storage-datalake.PathUpdateOptionalParams.xMsCacheControl'
      - '@azure/storage-datalake.PathUpdateOptionalParams.xMsClientRequestId'
      - '@azure/storage-datalake.PathUpdateOptionalParams.xMsContentDisposition'
      - '@azure/storage-datalake.PathUpdateOptionalParams.xMsContentEncoding'
      - '@azure/storage-datalake.PathUpdateOptionalParams.xMsContentLanguage'
      - '@azure/storage-datalake.PathUpdateOptionalParams.xMsContentMd5'
      - '@azure/storage-datalake.PathUpdateOptionalParams.xMsContentType'
      - '@azure/storage-datalake.PathUpdateOptionalParams.xMsDate'
      - '@azure/storage-datalake.PathUpdateOptionalParams.xMsGroup'
      - '@azure/storage-datalake.PathUpdateOptionalParams.xMsLeaseId'
      - '@azure/storage-datalake.PathUpdateOptionalParams.xMsOwner'
      - '@azure/storage-datalake.PathUpdateOptionalParams.xMsPermissions'
      - '@azure/storage-datalake.PathUpdateOptionalParams.xMsProperties'
    langs:
      - typeScript
    type: interface
    summary: Optional Parameters.
    extends:
      name: RequestOptionsBase
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathUpdateOptionalParams.abortSignal'
    name: abortSignal
    fullName: abortSignal
    children: []
    langs:
      - typeScript
    type: property
    summary: The signal which can be used to abort requests.
    optional: true
    syntax:
      content: 'abortSignal?: AbortSignalLike'
      return:
        type:
          - AbortSignalLike
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathUpdateOptionalParams.close'
    name: close
    fullName: close
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Azure Storage Events allow applications to receive notifications when
      files change. When Azure

      Storage Events are enabled, a file changed event is raised. This event has
      a property

      indicating whether this is the final change to distinguish the difference
      between an

      intermediate flush to a file stream and the final close of a file stream.
      The close query

      parameter is valid only when the action is "flush" and change
      notifications are enabled. If

      the value of close is "true" and the flush operation completes
      successfully, the service

      raises a file change notification with a property indicating that this is
      the final update

      (the file stream has been closed). If "false" a change notification is
      raised indicating the

      file has changed. The default is false. This query parameter is set to
      true by the Hadoop ABFS

      driver to indicate that the file stream has been closed."
    optional: true
    syntax:
      content: 'close?: undefined | false | true'
      return:
        type:
          - undefined | false | true
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathUpdateOptionalParams.contentLength'
    name: contentLength
    fullName: contentLength
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Required for "Append Data" and "Flush Data".  Must be 0 for "Flush Data". 
      Must be the length

      of the request content in bytes for "Append Data".
    optional: true
    syntax:
      content: 'contentLength?: undefined | number'
      return:
        type:
          - undefined | number
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathUpdateOptionalParams.contentMD5'
    name: contentMD5
    fullName: contentMD5
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Optional. An MD5 hash of the request content. This header is valid on
      "Append" and "Flush"

      operations. This hash is used to verify the integrity of the request
      content during transport.

      When this header is specified, the storage service compares the hash of
      the content that has

      arrived with this header value. If the two hashes do not match, the
      operation will fail with

      error code 400 (Bad Request). Note that this MD5 hash is not stored with
      the file. This header

      is associated with the request content, and not with the stored content of
      the file itself.
    optional: true
    syntax:
      content: 'contentMD5?: undefined | string'
      return:
        type:
          - undefined | string
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathUpdateOptionalParams.customHeaders'
    name: customHeaders
    fullName: customHeaders
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      {object} [customHeaders] User defined custom request headers that
      will be applied before the request is sent.
    optional: true
    syntax:
      content: 'customHeaders?: undefined | [key: string]: string'
      return:
        type:
          - 'undefined | [key: string]: string'
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathUpdateOptionalParams.ifMatch'
    name: ifMatch
    fullName: ifMatch
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Optional for Flush Data and Set Properties, but invalid for Append Data. 
      An ETag value.

      Specify this header to perform the operation only if the resource's ETag
      matches the value

      specified. The ETag must be specified in quotes.
    optional: true
    syntax:
      content: 'ifMatch?: undefined | string'
      return:
        type:
          - undefined | string
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathUpdateOptionalParams.ifModifiedSince'
    name: ifModifiedSince
    fullName: ifModifiedSince
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Optional for Flush Data and Set Properties, but invalid for Append Data. A
      date and time

      value. Specify this header to perform the operation only if the resource
      has been modified

      since the specified date and time.
    optional: true
    syntax:
      content: 'ifModifiedSince?: undefined | string'
      return:
        type:
          - undefined | string
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathUpdateOptionalParams.ifNoneMatch'
    name: ifNoneMatch
    fullName: ifNoneMatch
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Optional for Flush Data and Set Properties, but invalid for Append Data. 
      An ETag value or the

      special wildcard ("*") value. Specify this header to perform the operation
      only if the

      resource's ETag does not match the value specified. The ETag must be
      specified in quotes.
    optional: true
    syntax:
      content: 'ifNoneMatch?: undefined | string'
      return:
        type:
          - undefined | string
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathUpdateOptionalParams.ifUnmodifiedSince'
    name: ifUnmodifiedSince
    fullName: ifUnmodifiedSince
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Optional for Flush Data and Set Properties, but invalid for Append Data. A
      date and time

      value. Specify this header to perform the operation only if the resource
      has not been modified

      since the specified date and time.
    optional: true
    syntax:
      content: 'ifUnmodifiedSince?: undefined | string'
      return:
        type:
          - undefined | string
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathUpdateOptionalParams.onDownloadProgress'
    name: onDownloadProgress
    fullName: onDownloadProgress
    children: []
    langs:
      - typeScript
    type: property
    summary: Callback which fires upon download progress.
    optional: true
    syntax:
      content: >-
        onDownloadProgress?: undefined | (progress: TransferProgressEvent) =>
        void
      return:
        type:
          - 'undefined | (progress: TransferProgressEvent) => void'
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathUpdateOptionalParams.onUploadProgress'
    name: onUploadProgress
    fullName: onUploadProgress
    children: []
    langs:
      - typeScript
    type: property
    summary: Callback which fires upon upload progress.
    optional: true
    syntax:
      content: 'onUploadProgress?: undefined | (progress: TransferProgressEvent) => void'
      return:
        type:
          - 'undefined | (progress: TransferProgressEvent) => void'
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathUpdateOptionalParams.position'
    name: position
    fullName: position
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      This parameter allows the caller to upload data in parallel and control
      the order in which it

      is appended to the file.  It is required when uploading data to be
      appended to the file and

      when flushing previously uploaded data to the file.  The value must be the
      position where the

      data is to be appended.  Uploaded data is not immediately flushed, or
      written, to the file.

      To flush, the previously uploaded data must be contiguous, the position
      parameter must be

      specified and equal to the length of the file after all data has been
      written, and there must

      not be a request entity body included with the request.
    optional: true
    syntax:
      content: 'position?: undefined | number'
      return:
        type:
          - undefined | number
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathUpdateOptionalParams.requestBody'
    name: requestBody
    fullName: requestBody
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Valid only for append operations.  The data to be uploaded and appended to
      the file.
    optional: true
    syntax:
      content: 'requestBody?: msRest.HttpRequestBody'
      return:
        type:
          - msRest.HttpRequestBody
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathUpdateOptionalParams.retainUncommittedData'
    name: retainUncommittedData
    fullName: retainUncommittedData
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Valid only for flush operations.  If "true", uncommitted data is retained
      after the flush

      operation completes; otherwise, the uncommitted data is deleted after the
      flush operation.

      The default is false.  Data at offsets less than the specified position
      are written to the

      file when flush succeeds, but this optional parameter allows data after
      the flush position to

      be retained for a future flush operation.
    optional: true
    syntax:
      content: 'retainUncommittedData?: undefined | false | true'
      return:
        type:
          - undefined | false | true
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathUpdateOptionalParams.timeout'
    name: timeout
    fullName: timeout
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      The number of milliseconds a request can take before automatically being
      terminated.
    optional: true
    syntax:
      content: 'timeout?: undefined | number'
      return:
        type:
          - undefined | number
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathUpdateOptionalParams.timeoutParameter'
    name: timeoutParameter
    fullName: timeoutParameter
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      An optional operation timeout value in seconds. The period begins when the
      request is received

      by the service. If the timeout value elapses before the operation
      completes, the operation

      fails.
    optional: true
    syntax:
      content: 'timeoutParameter?: undefined | number'
      return:
        type:
          - undefined | number
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathUpdateOptionalParams.xMsAcl'
    name: xMsAcl
    fullName: xMsAcl
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Optional and valid only for the setAccessControl operation. Sets POSIX
      access control rights

      on files and directories. The value is a comma-separated list of access
      control entries that

      fully replaces the existing access control list (ACL).  Each access
      control entry (ACE)

      consists of a scope, a type, a user or group identifier, and permissions
      in the format

      "[scope:][type]:[id]:[permissions]". The scope must be "default" to
      indicate the ACE belongs

      to the default ACL for a directory; otherwise scope is implicit and the
      ACE belongs to the

      access ACL.  There are four ACE types: "user" grants rights to the owner
      or a named user,

      "group" grants rights to the owning group or a named group, "mask"
      restricts rights granted to

      named users and the members of groups, and "other" grants rights to all
      users not found in any

      of the other entries. The user or group identifier is omitted for entries
      of type "mask" and

      "other".  The user or group identifier is also omitted for the owner and
      owning group.  The

      permission field is a 3-character sequence where the first character is
      'r' to grant read

      access, the second character is 'w' to grant write access, and the third
      character is 'x' to

      grant execute permission.  If access is not granted, the '-' character is
      used to denote that

      the permission is denied. For example, the following ACL grants read,
      write, and execute

      rights to the file owner and john.doe@contoso, the read right to the
      owning group, and nothing

      to everyone else:
      "user::rwx,user:john.doe@contoso:rwx,group::r--,other::---,mask=rwx".

      Invalid in conjunction with x-ms-permissions.
    optional: true
    syntax:
      content: 'xMsAcl?: undefined | string'
      return:
        type:
          - undefined | string
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathUpdateOptionalParams.xMsCacheControl'
    name: xMsCacheControl
    fullName: xMsCacheControl
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Optional and only valid for flush and set properties operations.  The
      service stores this

      value and includes it in the "Cache-Control" response header for "Read
      File" operations.
    optional: true
    syntax:
      content: 'xMsCacheControl?: undefined | string'
      return:
        type:
          - undefined | string
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathUpdateOptionalParams.xMsClientRequestId'
    name: xMsClientRequestId
    fullName: xMsClientRequestId
    children: []
    langs:
      - typeScript
    type: property
    summary: A UUID recorded in the analytics logs for troubleshooting and correlation.
    optional: true
    syntax:
      content: 'xMsClientRequestId?: undefined | string'
      return:
        type:
          - undefined | string
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathUpdateOptionalParams.xMsContentDisposition'
    name: xMsContentDisposition
    fullName: xMsContentDisposition
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Optional and only valid for flush and set properties operations.  The
      service stores this

      value and includes it in the "Content-Disposition" response header for
      "Read File" operations.
    optional: true
    syntax:
      content: 'xMsContentDisposition?: undefined | string'
      return:
        type:
          - undefined | string
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathUpdateOptionalParams.xMsContentEncoding'
    name: xMsContentEncoding
    fullName: xMsContentEncoding
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Optional and only valid for flush and set properties operations.  The
      service stores this

      value and includes it in the "Content-Encoding" response header for "Read
      File" operations.
    optional: true
    syntax:
      content: 'xMsContentEncoding?: undefined | string'
      return:
        type:
          - undefined | string
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathUpdateOptionalParams.xMsContentLanguage'
    name: xMsContentLanguage
    fullName: xMsContentLanguage
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Optional and only valid for flush and set properties operations.  The
      service stores this

      value and includes it in the "Content-Language" response header for "Read
      File" operations.
    optional: true
    syntax:
      content: 'xMsContentLanguage?: undefined | string'
      return:
        type:
          - undefined | string
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathUpdateOptionalParams.xMsContentMd5'
    name: xMsContentMd5
    fullName: xMsContentMd5
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Optional and only valid for "Flush & Set Properties" operations.  The
      service stores this

      value and includes it in the "Content-Md5" response header for "Read & Get
      Properties"

      operations. If this property is not specified on the request, then the
      property will be

      cleared for the file. Subsequent calls to "Read & Get Properties" will not
      return this

      property unless it is explicitly set on that file again.
    optional: true
    syntax:
      content: 'xMsContentMd5?: undefined | string'
      return:
        type:
          - undefined | string
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathUpdateOptionalParams.xMsContentType'
    name: xMsContentType
    fullName: xMsContentType
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Optional and only valid for flush and set properties operations.  The
      service stores this

      value and includes it in the "Content-Type" response header for "Read
      File" operations.
    optional: true
    syntax:
      content: 'xMsContentType?: undefined | string'
      return:
        type:
          - undefined | string
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathUpdateOptionalParams.xMsDate'
    name: xMsDate
    fullName: xMsDate
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Specifies the Coordinated Universal Time (UTC) for the request.  This is
      required when using

      shared key authorization.
    optional: true
    syntax:
      content: 'xMsDate?: undefined | string'
      return:
        type:
          - undefined | string
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathUpdateOptionalParams.xMsGroup'
    name: xMsGroup
    fullName: xMsGroup
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Optional and valid only for the setAccessControl operation. Sets the
      owning group of the file

      or directory.
    optional: true
    syntax:
      content: 'xMsGroup?: undefined | string'
      return:
        type:
          - undefined | string
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathUpdateOptionalParams.xMsLeaseId'
    name: xMsLeaseId
    fullName: xMsLeaseId
    children: []
    langs:
      - typeScript
    type: property
    summary: The lease ID must be specified if there is an active lease.
    optional: true
    syntax:
      content: 'xMsLeaseId?: undefined | string'
      return:
        type:
          - undefined | string
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathUpdateOptionalParams.xMsOwner'
    name: xMsOwner
    fullName: xMsOwner
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Optional and valid only for the setAccessControl operation. Sets the owner
      of the file or

      directory.
    optional: true
    syntax:
      content: 'xMsOwner?: undefined | string'
      return:
        type:
          - undefined | string
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathUpdateOptionalParams.xMsPermissions'
    name: xMsPermissions
    fullName: xMsPermissions
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Optional and only valid if Hierarchical Namespace is enabled for the
      account. Sets POSIX

      access permissions for the file owner, the file owning group, and others.
      Each class may be

      granted read, write, or execute permission.  The sticky bit is also
      supported.  Both symbolic

      (rwxrw-rw-) and 4-digit octal notation (e.g. 0766) are supported. Invalid
      in conjunction with

      x-ms-acl.
    optional: true
    syntax:
      content: 'xMsPermissions?: undefined | string'
      return:
        type:
          - undefined | string
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathUpdateOptionalParams.xMsProperties'
    name: xMsProperties
    fullName: xMsProperties
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Optional.  User-defined properties to be stored with the file or
      directory, in the format of a

      comma-separated list of name and value pairs "n1=v1, n2=v2, ...", where
      each value is a base64

      encoded string. Note that the string may only contain ASCII characters in
      the ISO-8859-1

      character set. Valid only for the setProperties operation. If the file or
      directory exists,

      any properties not included in the list will be removed.  All properties
      are removed if the

      header is omitted.  To merge new and existing properties, first get all
      existing properties

      and the current E-Tag, then make a conditional request with the E-Tag and
      include values for

      all properties.
    optional: true
    syntax:
      content: 'xMsProperties?: undefined | string'
      return:
        type:
          - undefined | string
    package: '@azure/storage-datalake'
