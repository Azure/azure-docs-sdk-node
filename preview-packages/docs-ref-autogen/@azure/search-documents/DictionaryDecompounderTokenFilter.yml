### YamlMime:UniversalReference
items:
  - uid: '@azure/search-documents.DictionaryDecompounderTokenFilter'
    name: DictionaryDecompounderTokenFilter
    fullName: DictionaryDecompounderTokenFilter
    children:
      - '@azure/search-documents.DictionaryDecompounderTokenFilter.maxSubwordSize'
      - '@azure/search-documents.DictionaryDecompounderTokenFilter.minSubwordSize'
      - '@azure/search-documents.DictionaryDecompounderTokenFilter.minWordSize'
      - '@azure/search-documents.DictionaryDecompounderTokenFilter.name'
      - '@azure/search-documents.DictionaryDecompounderTokenFilter.odatatype'
      - >-
        @azure/search-documents.DictionaryDecompounderTokenFilter.onlyLongestMatch
      - '@azure/search-documents.DictionaryDecompounderTokenFilter.wordList'
    langs:
      - typeScript
    type: interface
    summary: >-
      Decomposes compound words found in many Germanic languages. This token
      filter is implemented

      using Apache Lucene.
    package: '@azure/search-documents'
  - uid: '@azure/search-documents.DictionaryDecompounderTokenFilter.maxSubwordSize'
    name: maxSubwordSize
    fullName: maxSubwordSize
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      The maximum subword size. Only subwords shorter than this are outputted.
      Default is 15.

      Maximum is 300. Default value: 15.
    optional: true
    syntax:
      content: 'maxSubwordSize?: number'
      return:
        type:
          - number
        description: ''
    package: '@azure/search-documents'
  - uid: '@azure/search-documents.DictionaryDecompounderTokenFilter.minSubwordSize'
    name: minSubwordSize
    fullName: minSubwordSize
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      The minimum subword size. Only subwords longer than this are outputted.
      Default is 2. Maximum

      is 300. Default value: 2.
    optional: true
    syntax:
      content: 'minSubwordSize?: number'
      return:
        type:
          - number
        description: ''
    package: '@azure/search-documents'
  - uid: '@azure/search-documents.DictionaryDecompounderTokenFilter.minWordSize'
    name: minWordSize
    fullName: minWordSize
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      The minimum word size. Only words longer than this get processed. Default
      is 5. Maximum is

      300. Default value: 5.
    optional: true
    syntax:
      content: 'minWordSize?: number'
      return:
        type:
          - number
        description: ''
    package: '@azure/search-documents'
  - uid: '@azure/search-documents.DictionaryDecompounderTokenFilter.name'
    name: name
    fullName: name
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      The name of the token filter. It must only contain letters, digits,
      spaces, dashes or

      underscores, can only start and end with alphanumeric characters, and is
      limited to 128

      characters.
    syntax:
      content: 'name: string'
      return:
        type:
          - string
        description: ''
    package: '@azure/search-documents'
  - uid: '@azure/search-documents.DictionaryDecompounderTokenFilter.odatatype'
    name: odatatype
    fullName: odatatype
    children: []
    langs:
      - typeScript
    type: property
    summary: Polymorphic Discriminator
    syntax:
      content: 'odatatype: "#Microsoft.Azure.Search.DictionaryDecompounderTokenFilter"'
      return:
        type:
          - '"#Microsoft.Azure.Search.DictionaryDecompounderTokenFilter"'
        description: ''
    package: '@azure/search-documents'
  - uid: '@azure/search-documents.DictionaryDecompounderTokenFilter.onlyLongestMatch'
    name: onlyLongestMatch
    fullName: onlyLongestMatch
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      A value indicating whether to add only the longest matching subword to the
      output. Default is

      false. Default value: false.
    optional: true
    syntax:
      content: 'onlyLongestMatch?: boolean'
      return:
        type:
          - boolean
        description: ''
    package: '@azure/search-documents'
  - uid: '@azure/search-documents.DictionaryDecompounderTokenFilter.wordList'
    name: wordList
    fullName: wordList
    children: []
    langs:
      - typeScript
    type: property
    summary: The list of words to match against.
    syntax:
      content: 'wordList: string[]'
      return:
        type:
          - 'string[]'
        description: ''
    package: '@azure/search-documents'
