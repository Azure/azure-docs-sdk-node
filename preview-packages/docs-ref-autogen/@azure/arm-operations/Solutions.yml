### YamlMime:TSType
name: Solutions
uid: '@azure/arm-operations.Solutions'
package: '@azure/arm-operations'
summary: Interface representing a Solutions.
fullName: Solutions
remarks: ''
isPreview: false
isDeprecated: false
type: interface
methods:
  - name: >-
      beginCreateOrUpdate(string, string, Solution,
      SolutionsCreateOrUpdateOptionalParams)
    uid: '@azure/arm-operations.Solutions.beginCreateOrUpdate'
    package: '@azure/arm-operations'
    summary: Creates or updates the Solution.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginCreateOrUpdate(resourceGroupName: string, solutionName:
        string, parameters: Solution, options?:
        SolutionsCreateOrUpdateOptionalParams):
        Promise<PollerLike<PollOperationState<SolutionsCreateOrUpdateResponse>,
        SolutionsCreateOrUpdateResponse>>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group to get. The name is case insensitive.
        - id: solutionName
          type: string
          description: User Solution Name.
        - id: parameters
          type: <xref uid="@azure/arm-operations.Solution" />
          description: The parameters required to create OMS Solution.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-operations.SolutionsCreateOrUpdateOptionalParams" />
          description: |
            The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;PollerLike&lt;PollOperationState&lt;<xref
          uid="@azure/arm-operations.SolutionsCreateOrUpdateResponse" />&gt;,
          <xref uid="@azure/arm-operations.SolutionsCreateOrUpdateResponse"
          />&gt;&gt;
  - name: >-
      beginCreateOrUpdateAndWait(string, string, Solution,
      SolutionsCreateOrUpdateOptionalParams)
    uid: '@azure/arm-operations.Solutions.beginCreateOrUpdateAndWait'
    package: '@azure/arm-operations'
    summary: Creates or updates the Solution.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginCreateOrUpdateAndWait(resourceGroupName: string,
        solutionName: string, parameters: Solution, options?:
        SolutionsCreateOrUpdateOptionalParams):
        Promise<SolutionsCreateOrUpdateResponse>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group to get. The name is case insensitive.
        - id: solutionName
          type: string
          description: User Solution Name.
        - id: parameters
          type: <xref uid="@azure/arm-operations.Solution" />
          description: The parameters required to create OMS Solution.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-operations.SolutionsCreateOrUpdateOptionalParams" />
          description: |
            The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/arm-operations.SolutionsCreateOrUpdateResponse" />&gt;
  - name: 'beginDelete(string, string, SolutionsDeleteOptionalParams)'
    uid: '@azure/arm-operations.Solutions.beginDelete'
    package: '@azure/arm-operations'
    summary: Deletes the solution in the subscription.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginDelete(resourceGroupName: string, solutionName: string,
        options?: SolutionsDeleteOptionalParams):
        Promise<PollerLike<PollOperationState<void>, void>>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group to get. The name is case insensitive.
        - id: solutionName
          type: string
          description: User Solution Name.
        - id: options
          type: <xref uid="@azure/arm-operations.SolutionsDeleteOptionalParams" />
          description: |
            The options parameters.
      return:
        description: ''
        type: 'Promise&lt;PollerLike&lt;PollOperationState&lt;void&gt;, void&gt;&gt;'
  - name: 'beginDeleteAndWait(string, string, SolutionsDeleteOptionalParams)'
    uid: '@azure/arm-operations.Solutions.beginDeleteAndWait'
    package: '@azure/arm-operations'
    summary: Deletes the solution in the subscription.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginDeleteAndWait(resourceGroupName: string, solutionName:
        string, options?: SolutionsDeleteOptionalParams): Promise<void>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group to get. The name is case insensitive.
        - id: solutionName
          type: string
          description: User Solution Name.
        - id: options
          type: <xref uid="@azure/arm-operations.SolutionsDeleteOptionalParams" />
          description: |
            The options parameters.
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: 'beginUpdate(string, string, SolutionPatch, SolutionsUpdateOptionalParams)'
    uid: '@azure/arm-operations.Solutions.beginUpdate'
    package: '@azure/arm-operations'
    summary: Patch a Solution. Only updating tags supported.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginUpdate(resourceGroupName: string, solutionName: string,
        parameters: SolutionPatch, options?: SolutionsUpdateOptionalParams):
        Promise<PollerLike<PollOperationState<SolutionsUpdateResponse>,
        SolutionsUpdateResponse>>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group to get. The name is case insensitive.
        - id: solutionName
          type: string
          description: User Solution Name.
        - id: parameters
          type: <xref uid="@azure/arm-operations.SolutionPatch" />
          description: The parameters required to patch a Solution.
        - id: options
          type: <xref uid="@azure/arm-operations.SolutionsUpdateOptionalParams" />
          description: |
            The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;PollerLike&lt;PollOperationState&lt;<xref
          uid="@azure/arm-operations.SolutionsUpdateResponse" />&gt;, <xref
          uid="@azure/arm-operations.SolutionsUpdateResponse" />&gt;&gt;
  - name: >-
      beginUpdateAndWait(string, string, SolutionPatch,
      SolutionsUpdateOptionalParams)
    uid: '@azure/arm-operations.Solutions.beginUpdateAndWait'
    package: '@azure/arm-operations'
    summary: Patch a Solution. Only updating tags supported.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginUpdateAndWait(resourceGroupName: string, solutionName:
        string, parameters: SolutionPatch, options?:
        SolutionsUpdateOptionalParams): Promise<SolutionsUpdateResponse>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group to get. The name is case insensitive.
        - id: solutionName
          type: string
          description: User Solution Name.
        - id: parameters
          type: <xref uid="@azure/arm-operations.SolutionPatch" />
          description: The parameters required to patch a Solution.
        - id: options
          type: <xref uid="@azure/arm-operations.SolutionsUpdateOptionalParams" />
          description: |
            The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/arm-operations.SolutionsUpdateResponse"
          />&gt;
  - name: 'get(string, string, SolutionsGetOptionalParams)'
    uid: '@azure/arm-operations.Solutions.get'
    package: '@azure/arm-operations'
    summary: Retrieves the user solution.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function get(resourceGroupName: string, solutionName: string, options?:
        SolutionsGetOptionalParams): Promise<SolutionsGetResponse>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group to get. The name is case insensitive.
        - id: solutionName
          type: string
          description: User Solution Name.
        - id: options
          type: <xref uid="@azure/arm-operations.SolutionsGetOptionalParams" />
          description: |
            The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/arm-operations.SolutionsGetResponse"
          />&gt;
  - name: 'listByResourceGroup(string, SolutionsListByResourceGroupOptionalParams)'
    uid: '@azure/arm-operations.Solutions.listByResourceGroup'
    package: '@azure/arm-operations'
    summary: >-
      Retrieves the solution list. It will retrieve both first party and third
      party solutions
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listByResourceGroup(resourceGroupName: string, options?:
        SolutionsListByResourceGroupOptionalParams):
        Promise<SolutionsListByResourceGroupResponse>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group to get. The name is case insensitive.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-operations.SolutionsListByResourceGroupOptionalParams"
            />
          description: |
            The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/arm-operations.SolutionsListByResourceGroupResponse"
          />&gt;
  - name: listBySubscription(SolutionsListBySubscriptionOptionalParams)
    uid: '@azure/arm-operations.Solutions.listBySubscription'
    package: '@azure/arm-operations'
    summary: >-
      Retrieves the solution list. It will retrieve both first party and third
      party solutions
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listBySubscription(options?:
        SolutionsListBySubscriptionOptionalParams):
        Promise<SolutionsListBySubscriptionResponse>
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/arm-operations.SolutionsListBySubscriptionOptionalParams"
            />
          description: |
            The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/arm-operations.SolutionsListBySubscriptionResponse" />&gt;
