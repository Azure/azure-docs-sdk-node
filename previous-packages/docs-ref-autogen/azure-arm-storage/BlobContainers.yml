### YamlMime:UniversalReference
items:
  - uid: azure-arm-storage.BlobContainers
    name: BlobContainers
    fullName: BlobContainers
    children:
      - azure-arm-storage.BlobContainers.clearLegalHold
      - azure-arm-storage.BlobContainers.clearLegalHold_2
      - azure-arm-storage.BlobContainers.clearLegalHold_1
      - azure-arm-storage.BlobContainers.clearLegalHoldWithHttpOperationResponse
      - azure-arm-storage.BlobContainers.create
      - azure-arm-storage.BlobContainers.create_2
      - azure-arm-storage.BlobContainers.create_1
      - azure-arm-storage.BlobContainers.createOrUpdateImmutabilityPolicy
      - azure-arm-storage.BlobContainers.createOrUpdateImmutabilityPolicy_2
      - azure-arm-storage.BlobContainers.createOrUpdateImmutabilityPolicy_1
      - >-
        azure-arm-storage.BlobContainers.createOrUpdateImmutabilityPolicyWithHttpOperationResponse
      - azure-arm-storage.BlobContainers.createWithHttpOperationResponse
      - azure-arm-storage.BlobContainers.deleteImmutabilityPolicy
      - azure-arm-storage.BlobContainers.deleteImmutabilityPolicy_2
      - azure-arm-storage.BlobContainers.deleteImmutabilityPolicy_1
      - >-
        azure-arm-storage.BlobContainers.deleteImmutabilityPolicyWithHttpOperationResponse
      - azure-arm-storage.BlobContainers.deleteMethod
      - azure-arm-storage.BlobContainers.deleteMethod_2
      - azure-arm-storage.BlobContainers.deleteMethod_1
      - azure-arm-storage.BlobContainers.deleteMethodWithHttpOperationResponse
      - azure-arm-storage.BlobContainers.extendImmutabilityPolicy
      - azure-arm-storage.BlobContainers.extendImmutabilityPolicy_2
      - azure-arm-storage.BlobContainers.extendImmutabilityPolicy_1
      - >-
        azure-arm-storage.BlobContainers.extendImmutabilityPolicyWithHttpOperationResponse
      - azure-arm-storage.BlobContainers.get
      - azure-arm-storage.BlobContainers.get_2
      - azure-arm-storage.BlobContainers.get_1
      - azure-arm-storage.BlobContainers.getImmutabilityPolicy
      - azure-arm-storage.BlobContainers.getImmutabilityPolicy_2
      - azure-arm-storage.BlobContainers.getImmutabilityPolicy_1
      - >-
        azure-arm-storage.BlobContainers.getImmutabilityPolicyWithHttpOperationResponse
      - azure-arm-storage.BlobContainers.getWithHttpOperationResponse
      - azure-arm-storage.BlobContainers.lease
      - azure-arm-storage.BlobContainers.lease_2
      - azure-arm-storage.BlobContainers.lease_1
      - azure-arm-storage.BlobContainers.leaseWithHttpOperationResponse
      - azure-arm-storage.BlobContainers.list
      - azure-arm-storage.BlobContainers.list_2
      - azure-arm-storage.BlobContainers.list_1
      - azure-arm-storage.BlobContainers.listWithHttpOperationResponse
      - azure-arm-storage.BlobContainers.lockImmutabilityPolicy
      - azure-arm-storage.BlobContainers.lockImmutabilityPolicy_2
      - azure-arm-storage.BlobContainers.lockImmutabilityPolicy_1
      - >-
        azure-arm-storage.BlobContainers.lockImmutabilityPolicyWithHttpOperationResponse
      - azure-arm-storage.BlobContainers.setLegalHold
      - azure-arm-storage.BlobContainers.setLegalHold_2
      - azure-arm-storage.BlobContainers.setLegalHold_1
      - azure-arm-storage.BlobContainers.setLegalHoldWithHttpOperationResponse
      - azure-arm-storage.BlobContainers.update
      - azure-arm-storage.BlobContainers.update_2
      - azure-arm-storage.BlobContainers.update_1
      - azure-arm-storage.BlobContainers.updateWithHttpOperationResponse
    langs:
      - typeScript
    type: interface
    summary: ''
    package: azure-arm-storage
  - uid: azure-arm-storage.BlobContainers.clearLegalHold
    name: 'clearLegalHold(string, string, string, string[], Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Clears legal hold tags. Clearing the same or non-existent tag results in
      an

      idempotent operation. ClearLegalHold clears out only the specified tags in

      the request.
    syntax:
      content: >-
        function clearLegalHold(resourceGroupName: string, accountName: string,
        containerName: string, tags: string[], options?: Object)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: containerName
          type:
            - string
          description: >
            The name of the blob container within the

            specified storage account. Blob container names must be between 3
            and 63

            characters in length and use numbers, lower-case letters and dash
            (-) only.

            Every dash (-) character must be immediately preceded and followed
            by a

            letter or number.
        - id: tags
          type:
            - 'string[]'
          description: |
            Each tag should be 3 to 23 alphanumeric characters and
            is normalized to lower case at SRP.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<azure-arm-storage.LegalHold>
    package: azure-arm-storage
  - uid: azure-arm-storage.BlobContainers.clearLegalHold_2
    name: >-
      clearLegalHold(string, string, string, string[], Object,
      ServiceCallback<LegalHold>)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Clears legal hold tags. Clearing the same or non-existent tag results in
      an

      idempotent operation. ClearLegalHold clears out only the specified tags in

      the request.
    syntax:
      content: >-
        function clearLegalHold(resourceGroupName: string, accountName: string,
        containerName: string, tags: string[], options: Object, callback:
        ServiceCallback<LegalHold>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: ''
        - id: accountName
          type:
            - string
          description: ''
        - id: containerName
          type:
            - string
          description: ''
        - id: tags
          type:
            - 'string[]'
          description: ''
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - ServiceCallback<azure-arm-storage.LegalHold>
          description: ''
      return:
        type:
          - Promise<azure-arm-storage.LegalHold>
    package: azure-arm-storage
  - uid: azure-arm-storage.BlobContainers.clearLegalHold_1
    name: >-
      clearLegalHold(string, string, string, string[],
      ServiceCallback<LegalHold>)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Clears legal hold tags. Clearing the same or non-existent tag results in
      an

      idempotent operation. ClearLegalHold clears out only the specified tags in

      the request.
    syntax:
      content: >-
        function clearLegalHold(resourceGroupName: string, accountName: string,
        containerName: string, tags: string[], callback:
        ServiceCallback<LegalHold>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: ''
        - id: accountName
          type:
            - string
          description: ''
        - id: containerName
          type:
            - string
          description: ''
        - id: tags
          type:
            - 'string[]'
          description: ''
        - id: callback
          type:
            - ServiceCallback<azure-arm-storage.LegalHold>
          description: ''
      return:
        type:
          - Promise<azure-arm-storage.LegalHold>
    package: azure-arm-storage
  - uid: azure-arm-storage.BlobContainers.clearLegalHoldWithHttpOperationResponse
    name: >-
      clearLegalHoldWithHttpOperationResponse(string, string, string, string[],
      Object)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Clears legal hold tags. Clearing the same or non-existent tag results in
      an

      idempotent operation. ClearLegalHold clears out only the specified tags in

      the request.
    syntax:
      content: >-
        function clearLegalHoldWithHttpOperationResponse(resourceGroupName:
        string, accountName: string, containerName: string, tags: string[],
        options?: Object)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: containerName
          type:
            - string
          description: >
            The name of the blob container within the

            specified storage account. Blob container names must be between 3
            and 63

            characters in length and use numbers, lower-case letters and dash
            (-) only.

            Every dash (-) character must be immediately preceded and followed
            by a

            letter or number.
        - id: tags
          type:
            - 'string[]'
          description: |
            Each tag should be 3 to 23 alphanumeric characters and
            is normalized to lower case at SRP.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<HttpOperationResponse<azure-arm-storage.LegalHold>>
    package: azure-arm-storage
  - uid: azure-arm-storage.BlobContainers.create
    name: 'create(string, string, string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Creates a new container under the specified account as described by
      request

      body. The container resource includes metadata and properties for that

      container. It does not include a list of the blobs contained by the

      container.
    syntax:
      content: >-
        function create(resourceGroupName: string, accountName: string,
        containerName: string, options?: Object)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: containerName
          type:
            - string
          description: >
            The name of the blob container within the

            specified storage account. Blob container names must be between 3
            and 63

            characters in length and use numbers, lower-case letters and dash
            (-) only.

            Every dash (-) character must be immediately preceded and followed
            by a

            letter or number.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<azure-arm-storage.BlobContainer>
    package: azure-arm-storage
  - uid: azure-arm-storage.BlobContainers.create_2
    name: 'create(string, string, string, Object, ServiceCallback<BlobContainer>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Creates a new container under the specified account as described by
      request

      body. The container resource includes metadata and properties for that

      container. It does not include a list of the blobs contained by the

      container.
    syntax:
      content: >-
        function create(resourceGroupName: string, accountName: string,
        containerName: string, options: Object, callback:
        ServiceCallback<BlobContainer>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: ''
        - id: accountName
          type:
            - string
          description: ''
        - id: containerName
          type:
            - string
          description: ''
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - ServiceCallback<azure-arm-storage.BlobContainer>
          description: ''
      return:
        type:
          - Promise<azure-arm-storage.BlobContainer>
    package: azure-arm-storage
  - uid: azure-arm-storage.BlobContainers.create_1
    name: 'create(string, string, string, ServiceCallback<BlobContainer>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Creates a new container under the specified account as described by
      request

      body. The container resource includes metadata and properties for that

      container. It does not include a list of the blobs contained by the

      container.
    syntax:
      content: >-
        function create(resourceGroupName: string, accountName: string,
        containerName: string, callback: ServiceCallback<BlobContainer>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: ''
        - id: accountName
          type:
            - string
          description: ''
        - id: containerName
          type:
            - string
          description: ''
        - id: callback
          type:
            - ServiceCallback<azure-arm-storage.BlobContainer>
          description: ''
      return:
        type:
          - Promise<azure-arm-storage.BlobContainer>
    package: azure-arm-storage
  - uid: azure-arm-storage.BlobContainers.createOrUpdateImmutabilityPolicy
    name: 'createOrUpdateImmutabilityPolicy(string, string, string, number, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Creates or updates an unlocked immutability policy. ETag in If-Match is
      honored if given but not required for this operation.
    syntax:
      content: >-
        function createOrUpdateImmutabilityPolicy(resourceGroupName: string,
        accountName: string, containerName: string,
        immutabilityPeriodSinceCreationInDays: number, options?: Object)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: containerName
          type:
            - string
          description: >
            The name of the blob container within the

            specified storage account. Blob container names must be between 3
            and 63

            characters in length and use numbers, lower-case letters and dash
            (-) only.

            Every dash (-) character must be immediately preceded and followed
            by a

            letter or number.
        - id: immutabilityPeriodSinceCreationInDays
          type:
            - number
          description: >
            The immutability

            period for the blobs in the container since the policy creation, in
            days.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<azure-arm-storage.ImmutabilityPolicy>
    package: azure-arm-storage
  - uid: azure-arm-storage.BlobContainers.createOrUpdateImmutabilityPolicy_2
    name: >-
      createOrUpdateImmutabilityPolicy(string, string, string, number, Object,
      ServiceCallback<ImmutabilityPolicy>)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Creates or updates an unlocked immutability policy. ETag in If-Match is
      honored if given but not required for this operation.
    syntax:
      content: >-
        function createOrUpdateImmutabilityPolicy(resourceGroupName: string,
        accountName: string, containerName: string,
        immutabilityPeriodSinceCreationInDays: number, options: Object,
        callback: ServiceCallback<ImmutabilityPolicy>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: ''
        - id: accountName
          type:
            - string
          description: ''
        - id: containerName
          type:
            - string
          description: ''
        - id: immutabilityPeriodSinceCreationInDays
          type:
            - number
          description: ''
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - ServiceCallback<azure-arm-storage.ImmutabilityPolicy>
          description: ''
      return:
        type:
          - Promise<azure-arm-storage.ImmutabilityPolicy>
    package: azure-arm-storage
  - uid: azure-arm-storage.BlobContainers.createOrUpdateImmutabilityPolicy_1
    name: >-
      createOrUpdateImmutabilityPolicy(string, string, string, number,
      ServiceCallback<ImmutabilityPolicy>)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Creates or updates an unlocked immutability policy. ETag in If-Match is
      honored if given but not required for this operation.
    syntax:
      content: >-
        function createOrUpdateImmutabilityPolicy(resourceGroupName: string,
        accountName: string, containerName: string,
        immutabilityPeriodSinceCreationInDays: number, callback:
        ServiceCallback<ImmutabilityPolicy>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: ''
        - id: accountName
          type:
            - string
          description: ''
        - id: containerName
          type:
            - string
          description: ''
        - id: immutabilityPeriodSinceCreationInDays
          type:
            - number
          description: ''
        - id: callback
          type:
            - ServiceCallback<azure-arm-storage.ImmutabilityPolicy>
          description: ''
      return:
        type:
          - Promise<azure-arm-storage.ImmutabilityPolicy>
    package: azure-arm-storage
  - uid: >-
      azure-arm-storage.BlobContainers.createOrUpdateImmutabilityPolicyWithHttpOperationResponse
    name: >-
      createOrUpdateImmutabilityPolicyWithHttpOperationResponse(string, string,
      string, number, Object)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Creates or updates an unlocked immutability policy. ETag in If-Match is
      honored if given but not required for this operation.
    syntax:
      content: >-
        function
        createOrUpdateImmutabilityPolicyWithHttpOperationResponse(resourceGroupName:
        string, accountName: string, containerName: string,
        immutabilityPeriodSinceCreationInDays: number, options?: Object)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: containerName
          type:
            - string
          description: >
            The name of the blob container within the

            specified storage account. Blob container names must be between 3
            and 63

            characters in length and use numbers, lower-case letters and dash
            (-) only.

            Every dash (-) character must be immediately preceded and followed
            by a

            letter or number.
        - id: immutabilityPeriodSinceCreationInDays
          type:
            - number
          description: >
            The immutability

            period for the blobs in the container since the policy creation, in
            days.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<HttpOperationResponse<azure-arm-storage.ImmutabilityPolicy>>
    package: azure-arm-storage
  - uid: azure-arm-storage.BlobContainers.createWithHttpOperationResponse
    name: 'createWithHttpOperationResponse(string, string, string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Creates a new container under the specified account as described by
      request

      body. The container resource includes metadata and properties for that

      container. It does not include a list of the blobs contained by the

      container.
    syntax:
      content: >-
        function createWithHttpOperationResponse(resourceGroupName: string,
        accountName: string, containerName: string, options?: Object)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: containerName
          type:
            - string
          description: >
            The name of the blob container within the

            specified storage account. Blob container names must be between 3
            and 63

            characters in length and use numbers, lower-case letters and dash
            (-) only.

            Every dash (-) character must be immediately preceded and followed
            by a

            letter or number.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<HttpOperationResponse<azure-arm-storage.BlobContainer>>
    package: azure-arm-storage
  - uid: azure-arm-storage.BlobContainers.deleteImmutabilityPolicy
    name: 'deleteImmutabilityPolicy(string, string, string, string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Aborts an unlocked immutability policy. The response of delete has

      immutabilityPeriodSinceCreationInDays set to 0. ETag in If-Match is
      required

      for this operation. Deleting a locked immutability policy is not allowed,

      only way is to delete the container after deleting all blobs inside the

      container.
    syntax:
      content: >-
        function deleteImmutabilityPolicy(resourceGroupName: string,
        accountName: string, containerName: string, ifMatch: string, options?:
        Object)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: containerName
          type:
            - string
          description: >
            The name of the blob container within the

            specified storage account. Blob container names must be between 3
            and 63

            characters in length and use numbers, lower-case letters and dash
            (-) only.

            Every dash (-) character must be immediately preceded and followed
            by a

            letter or number.
        - id: ifMatch
          type:
            - string
          description: >
            The entity state (ETag) version of the immutability

            policy to update. A value of "*" can be used to apply the operation
            only if

            the immutability policy already exists. If omitted, this operation
            will

            always be applied.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<azure-arm-storage.ImmutabilityPolicy>
    package: azure-arm-storage
  - uid: azure-arm-storage.BlobContainers.deleteImmutabilityPolicy_2
    name: >-
      deleteImmutabilityPolicy(string, string, string, string, Object,
      ServiceCallback<ImmutabilityPolicy>)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Aborts an unlocked immutability policy. The response of delete has

      immutabilityPeriodSinceCreationInDays set to 0. ETag in If-Match is
      required

      for this operation. Deleting a locked immutability policy is not allowed,

      only way is to delete the container after deleting all blobs inside the

      container.
    syntax:
      content: >-
        function deleteImmutabilityPolicy(resourceGroupName: string,
        accountName: string, containerName: string, ifMatch: string, options:
        Object, callback: ServiceCallback<ImmutabilityPolicy>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: ''
        - id: accountName
          type:
            - string
          description: ''
        - id: containerName
          type:
            - string
          description: ''
        - id: ifMatch
          type:
            - string
          description: ''
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - ServiceCallback<azure-arm-storage.ImmutabilityPolicy>
          description: ''
      return:
        type:
          - Promise<azure-arm-storage.ImmutabilityPolicy>
    package: azure-arm-storage
  - uid: azure-arm-storage.BlobContainers.deleteImmutabilityPolicy_1
    name: >-
      deleteImmutabilityPolicy(string, string, string, string,
      ServiceCallback<ImmutabilityPolicy>)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Aborts an unlocked immutability policy. The response of delete has

      immutabilityPeriodSinceCreationInDays set to 0. ETag in If-Match is
      required

      for this operation. Deleting a locked immutability policy is not allowed,

      only way is to delete the container after deleting all blobs inside the

      container.
    syntax:
      content: >-
        function deleteImmutabilityPolicy(resourceGroupName: string,
        accountName: string, containerName: string, ifMatch: string, callback:
        ServiceCallback<ImmutabilityPolicy>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: ''
        - id: accountName
          type:
            - string
          description: ''
        - id: containerName
          type:
            - string
          description: ''
        - id: ifMatch
          type:
            - string
          description: ''
        - id: callback
          type:
            - ServiceCallback<azure-arm-storage.ImmutabilityPolicy>
          description: ''
      return:
        type:
          - Promise<azure-arm-storage.ImmutabilityPolicy>
    package: azure-arm-storage
  - uid: >-
      azure-arm-storage.BlobContainers.deleteImmutabilityPolicyWithHttpOperationResponse
    name: >-
      deleteImmutabilityPolicyWithHttpOperationResponse(string, string, string,
      string, Object)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Aborts an unlocked immutability policy. The response of delete has

      immutabilityPeriodSinceCreationInDays set to 0. ETag in If-Match is
      required

      for this operation. Deleting a locked immutability policy is not allowed,

      only way is to delete the container after deleting all blobs inside the

      container.
    syntax:
      content: >-
        function
        deleteImmutabilityPolicyWithHttpOperationResponse(resourceGroupName:
        string, accountName: string, containerName: string, ifMatch: string,
        options?: Object)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: containerName
          type:
            - string
          description: >
            The name of the blob container within the

            specified storage account. Blob container names must be between 3
            and 63

            characters in length and use numbers, lower-case letters and dash
            (-) only.

            Every dash (-) character must be immediately preceded and followed
            by a

            letter or number.
        - id: ifMatch
          type:
            - string
          description: >
            The entity state (ETag) version of the immutability

            policy to update. A value of "*" can be used to apply the operation
            only if

            the immutability policy already exists. If omitted, this operation
            will

            always be applied.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<HttpOperationResponse<azure-arm-storage.ImmutabilityPolicy>>
    package: azure-arm-storage
  - uid: azure-arm-storage.BlobContainers.deleteMethod
    name: 'deleteMethod(string, string, string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Deletes specified container under its account.
    syntax:
      content: >-
        function deleteMethod(resourceGroupName: string, accountName: string,
        containerName: string, options?: Object)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: containerName
          type:
            - string
          description: >
            The name of the blob container within the

            specified storage account. Blob container names must be between 3
            and 63

            characters in length and use numbers, lower-case letters and dash
            (-) only.

            Every dash (-) character must be immediately preceded and followed
            by a

            letter or number.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<void>
    package: azure-arm-storage
  - uid: azure-arm-storage.BlobContainers.deleteMethod_2
    name: 'deleteMethod(string, string, string, Object, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Deletes specified container under its account.
    syntax:
      content: >-
        function deleteMethod(resourceGroupName: string, accountName: string,
        containerName: string, options: Object, callback: ServiceCallback<void>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: ''
        - id: accountName
          type:
            - string
          description: ''
        - id: containerName
          type:
            - string
          description: ''
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: azure-arm-storage
  - uid: azure-arm-storage.BlobContainers.deleteMethod_1
    name: 'deleteMethod(string, string, string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Deletes specified container under its account.
    syntax:
      content: >-
        function deleteMethod(resourceGroupName: string, accountName: string,
        containerName: string, callback: ServiceCallback<void>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: ''
        - id: accountName
          type:
            - string
          description: ''
        - id: containerName
          type:
            - string
          description: ''
        - id: callback
          type:
            - ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: azure-arm-storage
  - uid: azure-arm-storage.BlobContainers.deleteMethodWithHttpOperationResponse
    name: 'deleteMethodWithHttpOperationResponse(string, string, string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Deletes specified container under its account.
    syntax:
      content: >-
        function deleteMethodWithHttpOperationResponse(resourceGroupName:
        string, accountName: string, containerName: string, options?: Object)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: containerName
          type:
            - string
          description: >
            The name of the blob container within the

            specified storage account. Blob container names must be between 3
            and 63

            characters in length and use numbers, lower-case letters and dash
            (-) only.

            Every dash (-) character must be immediately preceded and followed
            by a

            letter or number.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<HttpOperationResponse<void>>
    package: azure-arm-storage
  - uid: azure-arm-storage.BlobContainers.extendImmutabilityPolicy
    name: 'extendImmutabilityPolicy(string, string, string, string, number, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Extends the immutabilityPeriodSinceCreationInDays of a locked

      immutabilityPolicy. The only action allowed on a Locked policy will be
      this

      action. ETag in If-Match is required for this operation.
    syntax:
      content: >-
        function extendImmutabilityPolicy(resourceGroupName: string,
        accountName: string, containerName: string, ifMatch: string,
        immutabilityPeriodSinceCreationInDays: number, options?: Object)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: containerName
          type:
            - string
          description: >
            The name of the blob container within the

            specified storage account. Blob container names must be between 3
            and 63

            characters in length and use numbers, lower-case letters and dash
            (-) only.

            Every dash (-) character must be immediately preceded and followed
            by a

            letter or number.
        - id: ifMatch
          type:
            - string
          description: >
            The entity state (ETag) version of the immutability

            policy to update. A value of "*" can be used to apply the operation
            only if

            the immutability policy already exists. If omitted, this operation
            will

            always be applied.
        - id: immutabilityPeriodSinceCreationInDays
          type:
            - number
          description: >
            The immutability

            period for the blobs in the container since the policy creation, in
            days.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<azure-arm-storage.ImmutabilityPolicy>
    package: azure-arm-storage
  - uid: azure-arm-storage.BlobContainers.extendImmutabilityPolicy_2
    name: >-
      extendImmutabilityPolicy(string, string, string, string, number, Object,
      ServiceCallback<ImmutabilityPolicy>)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Extends the immutabilityPeriodSinceCreationInDays of a locked

      immutabilityPolicy. The only action allowed on a Locked policy will be
      this

      action. ETag in If-Match is required for this operation.
    syntax:
      content: >-
        function extendImmutabilityPolicy(resourceGroupName: string,
        accountName: string, containerName: string, ifMatch: string,
        immutabilityPeriodSinceCreationInDays: number, options: Object,
        callback: ServiceCallback<ImmutabilityPolicy>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: ''
        - id: accountName
          type:
            - string
          description: ''
        - id: containerName
          type:
            - string
          description: ''
        - id: ifMatch
          type:
            - string
          description: ''
        - id: immutabilityPeriodSinceCreationInDays
          type:
            - number
          description: ''
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - ServiceCallback<azure-arm-storage.ImmutabilityPolicy>
          description: ''
      return:
        type:
          - Promise<azure-arm-storage.ImmutabilityPolicy>
    package: azure-arm-storage
  - uid: azure-arm-storage.BlobContainers.extendImmutabilityPolicy_1
    name: >-
      extendImmutabilityPolicy(string, string, string, string, number,
      ServiceCallback<ImmutabilityPolicy>)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Extends the immutabilityPeriodSinceCreationInDays of a locked

      immutabilityPolicy. The only action allowed on a Locked policy will be
      this

      action. ETag in If-Match is required for this operation.
    syntax:
      content: >-
        function extendImmutabilityPolicy(resourceGroupName: string,
        accountName: string, containerName: string, ifMatch: string,
        immutabilityPeriodSinceCreationInDays: number, callback:
        ServiceCallback<ImmutabilityPolicy>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: ''
        - id: accountName
          type:
            - string
          description: ''
        - id: containerName
          type:
            - string
          description: ''
        - id: ifMatch
          type:
            - string
          description: ''
        - id: immutabilityPeriodSinceCreationInDays
          type:
            - number
          description: ''
        - id: callback
          type:
            - ServiceCallback<azure-arm-storage.ImmutabilityPolicy>
          description: ''
      return:
        type:
          - Promise<azure-arm-storage.ImmutabilityPolicy>
    package: azure-arm-storage
  - uid: >-
      azure-arm-storage.BlobContainers.extendImmutabilityPolicyWithHttpOperationResponse
    name: >-
      extendImmutabilityPolicyWithHttpOperationResponse(string, string, string,
      string, number, Object)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Extends the immutabilityPeriodSinceCreationInDays of a locked

      immutabilityPolicy. The only action allowed on a Locked policy will be
      this

      action. ETag in If-Match is required for this operation.
    syntax:
      content: >-
        function
        extendImmutabilityPolicyWithHttpOperationResponse(resourceGroupName:
        string, accountName: string, containerName: string, ifMatch: string,
        immutabilityPeriodSinceCreationInDays: number, options?: Object)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: containerName
          type:
            - string
          description: >
            The name of the blob container within the

            specified storage account. Blob container names must be between 3
            and 63

            characters in length and use numbers, lower-case letters and dash
            (-) only.

            Every dash (-) character must be immediately preceded and followed
            by a

            letter or number.
        - id: ifMatch
          type:
            - string
          description: >
            The entity state (ETag) version of the immutability

            policy to update. A value of "*" can be used to apply the operation
            only if

            the immutability policy already exists. If omitted, this operation
            will

            always be applied.
        - id: immutabilityPeriodSinceCreationInDays
          type:
            - number
          description: >
            The immutability

            period for the blobs in the container since the policy creation, in
            days.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<HttpOperationResponse<azure-arm-storage.ImmutabilityPolicy>>
    package: azure-arm-storage
  - uid: azure-arm-storage.BlobContainers.get
    name: 'get(string, string, string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Gets properties of a specified container.
    syntax:
      content: >-
        function get(resourceGroupName: string, accountName: string,
        containerName: string, options?: Object)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: containerName
          type:
            - string
          description: >
            The name of the blob container within the

            specified storage account. Blob container names must be between 3
            and 63

            characters in length and use numbers, lower-case letters and dash
            (-) only.

            Every dash (-) character must be immediately preceded and followed
            by a

            letter or number.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<azure-arm-storage.BlobContainer>
    package: azure-arm-storage
  - uid: azure-arm-storage.BlobContainers.get_2
    name: 'get(string, string, string, Object, ServiceCallback<BlobContainer>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Gets properties of a specified container.
    syntax:
      content: >-
        function get(resourceGroupName: string, accountName: string,
        containerName: string, options: Object, callback:
        ServiceCallback<BlobContainer>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: ''
        - id: accountName
          type:
            - string
          description: ''
        - id: containerName
          type:
            - string
          description: ''
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - ServiceCallback<azure-arm-storage.BlobContainer>
          description: ''
      return:
        type:
          - Promise<azure-arm-storage.BlobContainer>
    package: azure-arm-storage
  - uid: azure-arm-storage.BlobContainers.get_1
    name: 'get(string, string, string, ServiceCallback<BlobContainer>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Gets properties of a specified container.
    syntax:
      content: >-
        function get(resourceGroupName: string, accountName: string,
        containerName: string, callback: ServiceCallback<BlobContainer>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: ''
        - id: accountName
          type:
            - string
          description: ''
        - id: containerName
          type:
            - string
          description: ''
        - id: callback
          type:
            - ServiceCallback<azure-arm-storage.BlobContainer>
          description: ''
      return:
        type:
          - Promise<azure-arm-storage.BlobContainer>
    package: azure-arm-storage
  - uid: azure-arm-storage.BlobContainers.getImmutabilityPolicy
    name: 'getImmutabilityPolicy(string, string, string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Gets the existing immutability policy along with the corresponding ETag in
      response headers and body.
    syntax:
      content: >-
        function getImmutabilityPolicy(resourceGroupName: string, accountName:
        string, containerName: string, options?: Object)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: containerName
          type:
            - string
          description: >
            The name of the blob container within the

            specified storage account. Blob container names must be between 3
            and 63

            characters in length and use numbers, lower-case letters and dash
            (-) only.

            Every dash (-) character must be immediately preceded and followed
            by a

            letter or number.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<azure-arm-storage.ImmutabilityPolicy>
    package: azure-arm-storage
  - uid: azure-arm-storage.BlobContainers.getImmutabilityPolicy_2
    name: >-
      getImmutabilityPolicy(string, string, string, Object,
      ServiceCallback<ImmutabilityPolicy>)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Gets the existing immutability policy along with the corresponding ETag in
      response headers and body.
    syntax:
      content: >-
        function getImmutabilityPolicy(resourceGroupName: string, accountName:
        string, containerName: string, options: Object, callback:
        ServiceCallback<ImmutabilityPolicy>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: ''
        - id: accountName
          type:
            - string
          description: ''
        - id: containerName
          type:
            - string
          description: ''
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - ServiceCallback<azure-arm-storage.ImmutabilityPolicy>
          description: ''
      return:
        type:
          - Promise<azure-arm-storage.ImmutabilityPolicy>
    package: azure-arm-storage
  - uid: azure-arm-storage.BlobContainers.getImmutabilityPolicy_1
    name: >-
      getImmutabilityPolicy(string, string, string,
      ServiceCallback<ImmutabilityPolicy>)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Gets the existing immutability policy along with the corresponding ETag in
      response headers and body.
    syntax:
      content: >-
        function getImmutabilityPolicy(resourceGroupName: string, accountName:
        string, containerName: string, callback:
        ServiceCallback<ImmutabilityPolicy>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: ''
        - id: accountName
          type:
            - string
          description: ''
        - id: containerName
          type:
            - string
          description: ''
        - id: callback
          type:
            - ServiceCallback<azure-arm-storage.ImmutabilityPolicy>
          description: ''
      return:
        type:
          - Promise<azure-arm-storage.ImmutabilityPolicy>
    package: azure-arm-storage
  - uid: >-
      azure-arm-storage.BlobContainers.getImmutabilityPolicyWithHttpOperationResponse
    name: >-
      getImmutabilityPolicyWithHttpOperationResponse(string, string, string,
      Object)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Gets the existing immutability policy along with the corresponding ETag in
      response headers and body.
    syntax:
      content: >-
        function
        getImmutabilityPolicyWithHttpOperationResponse(resourceGroupName:
        string, accountName: string, containerName: string, options?: Object)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: containerName
          type:
            - string
          description: >
            The name of the blob container within the

            specified storage account. Blob container names must be between 3
            and 63

            characters in length and use numbers, lower-case letters and dash
            (-) only.

            Every dash (-) character must be immediately preceded and followed
            by a

            letter or number.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<HttpOperationResponse<azure-arm-storage.ImmutabilityPolicy>>
    package: azure-arm-storage
  - uid: azure-arm-storage.BlobContainers.getWithHttpOperationResponse
    name: 'getWithHttpOperationResponse(string, string, string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Gets properties of a specified container.
    syntax:
      content: >-
        function getWithHttpOperationResponse(resourceGroupName: string,
        accountName: string, containerName: string, options?: Object)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: containerName
          type:
            - string
          description: >
            The name of the blob container within the

            specified storage account. Blob container names must be between 3
            and 63

            characters in length and use numbers, lower-case letters and dash
            (-) only.

            Every dash (-) character must be immediately preceded and followed
            by a

            letter or number.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<HttpOperationResponse<azure-arm-storage.BlobContainer>>
    package: azure-arm-storage
  - uid: azure-arm-storage.BlobContainers.lease
    name: 'lease(string, string, string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Lease Container operation establishes and manages a lock on a
      container

      for delete operations. The lock duration can be 15 to 60 seconds, or can
      be

      infinite.
    syntax:
      content: >-
        function lease(resourceGroupName: string, accountName: string,
        containerName: string, options?: Object)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: containerName
          type:
            - string
          description: >
            The name of the blob container within the

            specified storage account. Blob container names must be between 3
            and 63

            characters in length and use numbers, lower-case letters and dash
            (-) only.

            Every dash (-) character must be immediately preceded and followed
            by a

            letter or number.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<azure-arm-storage.LeaseContainerResponse>
    package: azure-arm-storage
  - uid: azure-arm-storage.BlobContainers.lease_2
    name: >-
      lease(string, string, string, Object,
      ServiceCallback<LeaseContainerResponse>)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Lease Container operation establishes and manages a lock on a
      container

      for delete operations. The lock duration can be 15 to 60 seconds, or can
      be

      infinite.
    syntax:
      content: >-
        function lease(resourceGroupName: string, accountName: string,
        containerName: string, options: Object, callback:
        ServiceCallback<LeaseContainerResponse>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: ''
        - id: accountName
          type:
            - string
          description: ''
        - id: containerName
          type:
            - string
          description: ''
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - ServiceCallback<azure-arm-storage.LeaseContainerResponse>
          description: ''
      return:
        type:
          - Promise<azure-arm-storage.LeaseContainerResponse>
    package: azure-arm-storage
  - uid: azure-arm-storage.BlobContainers.lease_1
    name: 'lease(string, string, string, ServiceCallback<LeaseContainerResponse>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Lease Container operation establishes and manages a lock on a
      container

      for delete operations. The lock duration can be 15 to 60 seconds, or can
      be

      infinite.
    syntax:
      content: >-
        function lease(resourceGroupName: string, accountName: string,
        containerName: string, callback:
        ServiceCallback<LeaseContainerResponse>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: ''
        - id: accountName
          type:
            - string
          description: ''
        - id: containerName
          type:
            - string
          description: ''
        - id: callback
          type:
            - ServiceCallback<azure-arm-storage.LeaseContainerResponse>
          description: ''
      return:
        type:
          - Promise<azure-arm-storage.LeaseContainerResponse>
    package: azure-arm-storage
  - uid: azure-arm-storage.BlobContainers.leaseWithHttpOperationResponse
    name: 'leaseWithHttpOperationResponse(string, string, string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Lease Container operation establishes and manages a lock on a
      container

      for delete operations. The lock duration can be 15 to 60 seconds, or can
      be

      infinite.
    syntax:
      content: >-
        function leaseWithHttpOperationResponse(resourceGroupName: string,
        accountName: string, containerName: string, options?: Object)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: containerName
          type:
            - string
          description: >
            The name of the blob container within the

            specified storage account. Blob container names must be between 3
            and 63

            characters in length and use numbers, lower-case letters and dash
            (-) only.

            Every dash (-) character must be immediately preceded and followed
            by a

            letter or number.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<HttpOperationResponse<azure-arm-storage.LeaseContainerResponse>>
    package: azure-arm-storage
  - uid: azure-arm-storage.BlobContainers.list
    name: 'list(string, string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Lists all containers and does not support a prefix like data plane. Also
      SRP

      today does not return continuation token.
    syntax:
      content: >-
        function list(resourceGroupName: string, accountName: string, options?:
        Object)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<azure-arm-storage.ListContainerItems>
    package: azure-arm-storage
  - uid: azure-arm-storage.BlobContainers.list_2
    name: 'list(string, string, Object, ServiceCallback<ListContainerItems>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Lists all containers and does not support a prefix like data plane. Also
      SRP

      today does not return continuation token.
    syntax:
      content: >-
        function list(resourceGroupName: string, accountName: string, options:
        Object, callback: ServiceCallback<ListContainerItems>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: ''
        - id: accountName
          type:
            - string
          description: ''
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - ServiceCallback<azure-arm-storage.ListContainerItems>
          description: ''
      return:
        type:
          - Promise<azure-arm-storage.ListContainerItems>
    package: azure-arm-storage
  - uid: azure-arm-storage.BlobContainers.list_1
    name: 'list(string, string, ServiceCallback<ListContainerItems>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Lists all containers and does not support a prefix like data plane. Also
      SRP

      today does not return continuation token.
    syntax:
      content: >-
        function list(resourceGroupName: string, accountName: string, callback:
        ServiceCallback<ListContainerItems>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: ''
        - id: accountName
          type:
            - string
          description: ''
        - id: callback
          type:
            - ServiceCallback<azure-arm-storage.ListContainerItems>
          description: ''
      return:
        type:
          - Promise<azure-arm-storage.ListContainerItems>
    package: azure-arm-storage
  - uid: azure-arm-storage.BlobContainers.listWithHttpOperationResponse
    name: 'listWithHttpOperationResponse(string, string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Lists all containers and does not support a prefix like data plane. Also
      SRP

      today does not return continuation token.
    syntax:
      content: >-
        function listWithHttpOperationResponse(resourceGroupName: string,
        accountName: string, options?: Object)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<HttpOperationResponse<azure-arm-storage.ListContainerItems>>
    package: azure-arm-storage
  - uid: azure-arm-storage.BlobContainers.lockImmutabilityPolicy
    name: 'lockImmutabilityPolicy(string, string, string, string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Sets the ImmutabilityPolicy to Locked state. The only action allowed on a
      Locked policy is ExtendImmutabilityPolicy action. ETag in If-Match is
      required for this operation.
    syntax:
      content: >-
        function lockImmutabilityPolicy(resourceGroupName: string, accountName:
        string, containerName: string, ifMatch: string, options?: Object)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: containerName
          type:
            - string
          description: >
            The name of the blob container within the

            specified storage account. Blob container names must be between 3
            and 63

            characters in length and use numbers, lower-case letters and dash
            (-) only.

            Every dash (-) character must be immediately preceded and followed
            by a

            letter or number.
        - id: ifMatch
          type:
            - string
          description: >
            The entity state (ETag) version of the immutability

            policy to update. A value of "*" can be used to apply the operation
            only if

            the immutability policy already exists. If omitted, this operation
            will

            always be applied.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<azure-arm-storage.ImmutabilityPolicy>
    package: azure-arm-storage
  - uid: azure-arm-storage.BlobContainers.lockImmutabilityPolicy_2
    name: >-
      lockImmutabilityPolicy(string, string, string, string, Object,
      ServiceCallback<ImmutabilityPolicy>)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Sets the ImmutabilityPolicy to Locked state. The only action allowed on a
      Locked policy is ExtendImmutabilityPolicy action. ETag in If-Match is
      required for this operation.
    syntax:
      content: >-
        function lockImmutabilityPolicy(resourceGroupName: string, accountName:
        string, containerName: string, ifMatch: string, options: Object,
        callback: ServiceCallback<ImmutabilityPolicy>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: ''
        - id: accountName
          type:
            - string
          description: ''
        - id: containerName
          type:
            - string
          description: ''
        - id: ifMatch
          type:
            - string
          description: ''
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - ServiceCallback<azure-arm-storage.ImmutabilityPolicy>
          description: ''
      return:
        type:
          - Promise<azure-arm-storage.ImmutabilityPolicy>
    package: azure-arm-storage
  - uid: azure-arm-storage.BlobContainers.lockImmutabilityPolicy_1
    name: >-
      lockImmutabilityPolicy(string, string, string, string,
      ServiceCallback<ImmutabilityPolicy>)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Sets the ImmutabilityPolicy to Locked state. The only action allowed on a
      Locked policy is ExtendImmutabilityPolicy action. ETag in If-Match is
      required for this operation.
    syntax:
      content: >-
        function lockImmutabilityPolicy(resourceGroupName: string, accountName:
        string, containerName: string, ifMatch: string, callback:
        ServiceCallback<ImmutabilityPolicy>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: ''
        - id: accountName
          type:
            - string
          description: ''
        - id: containerName
          type:
            - string
          description: ''
        - id: ifMatch
          type:
            - string
          description: ''
        - id: callback
          type:
            - ServiceCallback<azure-arm-storage.ImmutabilityPolicy>
          description: ''
      return:
        type:
          - Promise<azure-arm-storage.ImmutabilityPolicy>
    package: azure-arm-storage
  - uid: >-
      azure-arm-storage.BlobContainers.lockImmutabilityPolicyWithHttpOperationResponse
    name: >-
      lockImmutabilityPolicyWithHttpOperationResponse(string, string, string,
      string, Object)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Sets the ImmutabilityPolicy to Locked state. The only action allowed on a
      Locked policy is ExtendImmutabilityPolicy action. ETag in If-Match is
      required for this operation.
    syntax:
      content: >-
        function
        lockImmutabilityPolicyWithHttpOperationResponse(resourceGroupName:
        string, accountName: string, containerName: string, ifMatch: string,
        options?: Object)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: containerName
          type:
            - string
          description: >
            The name of the blob container within the

            specified storage account. Blob container names must be between 3
            and 63

            characters in length and use numbers, lower-case letters and dash
            (-) only.

            Every dash (-) character must be immediately preceded and followed
            by a

            letter or number.
        - id: ifMatch
          type:
            - string
          description: >
            The entity state (ETag) version of the immutability

            policy to update. A value of "*" can be used to apply the operation
            only if

            the immutability policy already exists. If omitted, this operation
            will

            always be applied.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<HttpOperationResponse<azure-arm-storage.ImmutabilityPolicy>>
    package: azure-arm-storage
  - uid: azure-arm-storage.BlobContainers.setLegalHold
    name: 'setLegalHold(string, string, string, string[], Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Sets legal hold tags. Setting the same tag results in an idempotent

      operation. SetLegalHold follows an append pattern and does not clear out
      the

      existing tags that are not specified in the request.
    syntax:
      content: >-
        function setLegalHold(resourceGroupName: string, accountName: string,
        containerName: string, tags: string[], options?: Object)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: containerName
          type:
            - string
          description: >
            The name of the blob container within the

            specified storage account. Blob container names must be between 3
            and 63

            characters in length and use numbers, lower-case letters and dash
            (-) only.

            Every dash (-) character must be immediately preceded and followed
            by a

            letter or number.
        - id: tags
          type:
            - 'string[]'
          description: |
            Each tag should be 3 to 23 alphanumeric characters and
            is normalized to lower case at SRP.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<azure-arm-storage.LegalHold>
    package: azure-arm-storage
  - uid: azure-arm-storage.BlobContainers.setLegalHold_2
    name: >-
      setLegalHold(string, string, string, string[], Object,
      ServiceCallback<LegalHold>)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Sets legal hold tags. Setting the same tag results in an idempotent

      operation. SetLegalHold follows an append pattern and does not clear out
      the

      existing tags that are not specified in the request.
    syntax:
      content: >-
        function setLegalHold(resourceGroupName: string, accountName: string,
        containerName: string, tags: string[], options: Object, callback:
        ServiceCallback<LegalHold>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: ''
        - id: accountName
          type:
            - string
          description: ''
        - id: containerName
          type:
            - string
          description: ''
        - id: tags
          type:
            - 'string[]'
          description: ''
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - ServiceCallback<azure-arm-storage.LegalHold>
          description: ''
      return:
        type:
          - Promise<azure-arm-storage.LegalHold>
    package: azure-arm-storage
  - uid: azure-arm-storage.BlobContainers.setLegalHold_1
    name: 'setLegalHold(string, string, string, string[], ServiceCallback<LegalHold>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Sets legal hold tags. Setting the same tag results in an idempotent

      operation. SetLegalHold follows an append pattern and does not clear out
      the

      existing tags that are not specified in the request.
    syntax:
      content: >-
        function setLegalHold(resourceGroupName: string, accountName: string,
        containerName: string, tags: string[], callback:
        ServiceCallback<LegalHold>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: ''
        - id: accountName
          type:
            - string
          description: ''
        - id: containerName
          type:
            - string
          description: ''
        - id: tags
          type:
            - 'string[]'
          description: ''
        - id: callback
          type:
            - ServiceCallback<azure-arm-storage.LegalHold>
          description: ''
      return:
        type:
          - Promise<azure-arm-storage.LegalHold>
    package: azure-arm-storage
  - uid: azure-arm-storage.BlobContainers.setLegalHoldWithHttpOperationResponse
    name: >-
      setLegalHoldWithHttpOperationResponse(string, string, string, string[],
      Object)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Sets legal hold tags. Setting the same tag results in an idempotent

      operation. SetLegalHold follows an append pattern and does not clear out
      the

      existing tags that are not specified in the request.
    syntax:
      content: >-
        function setLegalHoldWithHttpOperationResponse(resourceGroupName:
        string, accountName: string, containerName: string, tags: string[],
        options?: Object)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: containerName
          type:
            - string
          description: >
            The name of the blob container within the

            specified storage account. Blob container names must be between 3
            and 63

            characters in length and use numbers, lower-case letters and dash
            (-) only.

            Every dash (-) character must be immediately preceded and followed
            by a

            letter or number.
        - id: tags
          type:
            - 'string[]'
          description: |
            Each tag should be 3 to 23 alphanumeric characters and
            is normalized to lower case at SRP.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<HttpOperationResponse<azure-arm-storage.LegalHold>>
    package: azure-arm-storage
  - uid: azure-arm-storage.BlobContainers.update
    name: 'update(string, string, string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Updates container properties as specified in request body. Properties not
      mentioned in the request will be unchanged. Update fails if the specified
      container doesn't already exist.
    syntax:
      content: >-
        function update(resourceGroupName: string, accountName: string,
        containerName: string, options?: Object)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: containerName
          type:
            - string
          description: >
            The name of the blob container within the

            specified storage account. Blob container names must be between 3
            and 63

            characters in length and use numbers, lower-case letters and dash
            (-) only.

            Every dash (-) character must be immediately preceded and followed
            by a

            letter or number.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<azure-arm-storage.BlobContainer>
    package: azure-arm-storage
  - uid: azure-arm-storage.BlobContainers.update_2
    name: 'update(string, string, string, Object, ServiceCallback<BlobContainer>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Updates container properties as specified in request body. Properties not
      mentioned in the request will be unchanged. Update fails if the specified
      container doesn't already exist.
    syntax:
      content: >-
        function update(resourceGroupName: string, accountName: string,
        containerName: string, options: Object, callback:
        ServiceCallback<BlobContainer>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: ''
        - id: accountName
          type:
            - string
          description: ''
        - id: containerName
          type:
            - string
          description: ''
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - ServiceCallback<azure-arm-storage.BlobContainer>
          description: ''
      return:
        type:
          - Promise<azure-arm-storage.BlobContainer>
    package: azure-arm-storage
  - uid: azure-arm-storage.BlobContainers.update_1
    name: 'update(string, string, string, ServiceCallback<BlobContainer>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Updates container properties as specified in request body. Properties not
      mentioned in the request will be unchanged. Update fails if the specified
      container doesn't already exist.
    syntax:
      content: >-
        function update(resourceGroupName: string, accountName: string,
        containerName: string, callback: ServiceCallback<BlobContainer>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: ''
        - id: accountName
          type:
            - string
          description: ''
        - id: containerName
          type:
            - string
          description: ''
        - id: callback
          type:
            - ServiceCallback<azure-arm-storage.BlobContainer>
          description: ''
      return:
        type:
          - Promise<azure-arm-storage.BlobContainer>
    package: azure-arm-storage
  - uid: azure-arm-storage.BlobContainers.updateWithHttpOperationResponse
    name: 'updateWithHttpOperationResponse(string, string, string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Updates container properties as specified in request body. Properties not
      mentioned in the request will be unchanged. Update fails if the specified
      container doesn't already exist.
    syntax:
      content: >-
        function updateWithHttpOperationResponse(resourceGroupName: string,
        accountName: string, containerName: string, options?: Object)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: containerName
          type:
            - string
          description: >
            The name of the blob container within the

            specified storage account. Blob container names must be between 3
            and 63

            characters in length and use numbers, lower-case letters and dash
            (-) only.

            Every dash (-) character must be immediately preceded and followed
            by a

            letter or number.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<HttpOperationResponse<azure-arm-storage.BlobContainer>>
    package: azure-arm-storage
references:
  - uid: Promise<azure-arm-storage.LegalHold>
    name: LegalHold>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: LegalHold
        fullName: LegalHold
        uid: azure-arm-storage.LegalHold
      - name: '>'
        fullName: '>'
  - uid: ServiceCallback<azure-arm-storage.LegalHold>
    name: LegalHold>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: LegalHold
        fullName: LegalHold
        uid: azure-arm-storage.LegalHold
      - name: '>'
        fullName: '>'
  - uid: Promise<HttpOperationResponse<azure-arm-storage.LegalHold>>
    name: LegalHold>>
    spec.typeScript:
      - name: Promise<HttpOperationResponse<
        fullName: Promise<HttpOperationResponse<
      - name: LegalHold
        fullName: LegalHold
        uid: azure-arm-storage.LegalHold
      - name: '>>'
        fullName: '>>'
  - uid: Promise<azure-arm-storage.BlobContainer>
    name: BlobContainer>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: BlobContainer
        fullName: BlobContainer
        uid: azure-arm-storage.BlobContainer
      - name: '>'
        fullName: '>'
  - uid: ServiceCallback<azure-arm-storage.BlobContainer>
    name: BlobContainer>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: BlobContainer
        fullName: BlobContainer
        uid: azure-arm-storage.BlobContainer
      - name: '>'
        fullName: '>'
  - uid: Promise<azure-arm-storage.ImmutabilityPolicy>
    name: ImmutabilityPolicy>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ImmutabilityPolicy
        fullName: ImmutabilityPolicy
        uid: azure-arm-storage.ImmutabilityPolicy
      - name: '>'
        fullName: '>'
  - uid: ServiceCallback<azure-arm-storage.ImmutabilityPolicy>
    name: ImmutabilityPolicy>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: ImmutabilityPolicy
        fullName: ImmutabilityPolicy
        uid: azure-arm-storage.ImmutabilityPolicy
      - name: '>'
        fullName: '>'
  - uid: Promise<HttpOperationResponse<azure-arm-storage.ImmutabilityPolicy>>
    name: ImmutabilityPolicy>>
    spec.typeScript:
      - name: Promise<HttpOperationResponse<
        fullName: Promise<HttpOperationResponse<
      - name: ImmutabilityPolicy
        fullName: ImmutabilityPolicy
        uid: azure-arm-storage.ImmutabilityPolicy
      - name: '>>'
        fullName: '>>'
  - uid: Promise<HttpOperationResponse<azure-arm-storage.BlobContainer>>
    name: BlobContainer>>
    spec.typeScript:
      - name: Promise<HttpOperationResponse<
        fullName: Promise<HttpOperationResponse<
      - name: BlobContainer
        fullName: BlobContainer
        uid: azure-arm-storage.BlobContainer
      - name: '>>'
        fullName: '>>'
  - uid: Promise<azure-arm-storage.LeaseContainerResponse>
    name: LeaseContainerResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: LeaseContainerResponse
        fullName: LeaseContainerResponse
        uid: azure-arm-storage.LeaseContainerResponse
      - name: '>'
        fullName: '>'
  - uid: ServiceCallback<azure-arm-storage.LeaseContainerResponse>
    name: LeaseContainerResponse>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: LeaseContainerResponse
        fullName: LeaseContainerResponse
        uid: azure-arm-storage.LeaseContainerResponse
      - name: '>'
        fullName: '>'
  - uid: Promise<HttpOperationResponse<azure-arm-storage.LeaseContainerResponse>>
    name: LeaseContainerResponse>>
    spec.typeScript:
      - name: Promise<HttpOperationResponse<
        fullName: Promise<HttpOperationResponse<
      - name: LeaseContainerResponse
        fullName: LeaseContainerResponse
        uid: azure-arm-storage.LeaseContainerResponse
      - name: '>>'
        fullName: '>>'
  - uid: Promise<azure-arm-storage.ListContainerItems>
    name: ListContainerItems>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ListContainerItems
        fullName: ListContainerItems
        uid: azure-arm-storage.ListContainerItems
      - name: '>'
        fullName: '>'
  - uid: ServiceCallback<azure-arm-storage.ListContainerItems>
    name: ListContainerItems>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: ListContainerItems
        fullName: ListContainerItems
        uid: azure-arm-storage.ListContainerItems
      - name: '>'
        fullName: '>'
  - uid: Promise<HttpOperationResponse<azure-arm-storage.ListContainerItems>>
    name: ListContainerItems>>
    spec.typeScript:
      - name: Promise<HttpOperationResponse<
        fullName: Promise<HttpOperationResponse<
      - name: ListContainerItems
        fullName: ListContainerItems
        uid: azure-arm-storage.ListContainerItems
      - name: '>>'
        fullName: '>>'
