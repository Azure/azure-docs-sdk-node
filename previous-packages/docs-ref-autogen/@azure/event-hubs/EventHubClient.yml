### YamlMime:TSType
name: EventHubClient
uid: '@azure/event-hubs.EventHubClient'
package: '@azure/event-hubs'
summary: ''
fullName: EventHubClient
remarks: ''
isDeprecated: false
type: class
constructors:
  - name: 'EventHubClient(EventHubConnectionConfig, ClientOptions)'
    uid: '@azure/event-hubs.EventHubClient.constructor'
    package: '@azure/event-hubs'
    summary: >-
      Instantiates a client pointing to the Event Hub given by this
      configuration.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        new EventHubClient(config: EventHubConnectionConfig, options?:
        ClientOptions)
      parameters:
        - id: config
          type: EventHubConnectionConfig
          description: The connection configuration to create the EventHub Client.
        - id: options
          type: <xref uid="@azure/event-hubs.ClientOptions" />
          description: |
            The optional parameters that can be provided to the EventHub
            Client constructor.
properties:
  - name: connectionId
    uid: '@azure/event-hubs.EventHubClient.connectionId'
    package: '@azure/event-hubs'
    summary: >-
      {string} [connectionId] The amqp connection id that uniquely identifies
      the connection within a process.
    fullName: connectionId
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'connectionId?: undefined | string'
      return:
        description: ''
        type: undefined | string
  - name: eventhubName
    uid: '@azure/event-hubs.EventHubClient.eventhubName'
    package: '@azure/event-hubs'
    summary: '{string} eventhubName The name of the Eventhub.'
    fullName: eventhubName
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'eventhubName: string'
      return:
        description: ''
        type: string
methods:
  - name: close()
    uid: '@azure/event-hubs.EventHubClient.close'
    package: '@azure/event-hubs'
    summary: |-
      Closes the AMQP connection to the Event Hub for this client,
      returning a promise that will be resolved when disconnection is completed.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function close(): Promise<void>'
      return:
        description: Promise<void>
        type: Promise&lt;void&gt;
  - name: >-
      createFromAadTokenCredentials(string, string, ApplicationTokenCredentials
      | UserTokenCredentials | DeviceTokenCredentials | MSITokenCredentials,
      ClientOptionsBase)
    uid: '@azure/event-hubs.EventHubClient.createFromAadTokenCredentials'
    package: '@azure/event-hubs'
    summary: Creates an EventHub Client from AADTokenCredentials.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        static function createFromAadTokenCredentials(host: string, entityPath:
        string, credentials: ApplicationTokenCredentials | UserTokenCredentials
        | DeviceTokenCredentials | MSITokenCredentials, options?:
        ClientOptionsBase): EventHubClient
      parameters:
        - id: host
          type: string
          description: |-
            Fully qualified domain name for Event Hubs. Most likely,
            <yournamespace>.servicebus.windows.net
        - id: entityPath
          type: string
          description: EventHub path of the form 'my-event-hub-name'
        - id: credentials
          type: >-
            ApplicationTokenCredentials | UserTokenCredentials |
            DeviceTokenCredentials | MSITokenCredentials
          description: >-
            The AAD Token credentials. It can be one of the following:

            ApplicationTokenCredentials | UserTokenCredentials |
            DeviceTokenCredentials | MSITokenCredentials.
        - id: options
          type: <xref uid="@azure/event-hubs.ClientOptionsBase" />
          description: The options that can be provided during client creation.
      return:
        description: An instance of the Eventhub client.
        type: <xref uid="@azure/event-hubs.EventHubClient" />
  - name: 'createFromConnectionString(string, undefined | string, ClientOptions)'
    uid: '@azure/event-hubs.EventHubClient.createFromConnectionString'
    package: '@azure/event-hubs'
    summary: Creates an EventHub Client from connection string.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        static function createFromConnectionString(connectionString: string,
        path?: undefined | string, options?: ClientOptions): EventHubClient
      parameters:
        - id: connectionString
          type: string
          description: >-
            Connection string of the form
            'Endpoint=sb://my-servicebus-namespace.servicebus.windows.net/;SharedAccessKeyName=my-SA-name;SharedAccessKey=my-SA-key'
        - id: path
          type: undefined | string
          description: ''
        - id: options
          type: <xref uid="@azure/event-hubs.ClientOptions" />
          description: ''
      return:
        description: '- An instance of the eventhub client.'
        type: <xref uid="@azure/event-hubs.EventHubClient" />
  - name: 'createFromIotHubConnectionString(string, ClientOptions)'
    uid: '@azure/event-hubs.EventHubClient.createFromIotHubConnectionString'
    package: '@azure/event-hubs'
    summary: Creates an EventHub Client from connection string.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        static function createFromIotHubConnectionString(iothubConnectionString:
        string, options?: ClientOptions): Promise<EventHubClient>
      parameters:
        - id: iothubConnectionString
          type: string
          description: >-
            Connection string of the form
            'HostName=iot-host-name;SharedAccessKeyName=my-SA-name;SharedAccessKey=my-SA-key'
        - id: options
          type: <xref uid="@azure/event-hubs.ClientOptions" />
          description: ''
      return:
        description: '- Promise<EventHubClient>.'
        type: Promise&lt;<xref uid="@azure/event-hubs.EventHubClient" />&gt;
  - name: 'createFromTokenProvider(string, string, TokenProvider, ClientOptionsBase)'
    uid: '@azure/event-hubs.EventHubClient.createFromTokenProvider'
    package: '@azure/event-hubs'
    summary: Creates an EventHub Client from a generic token provider.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        static function createFromTokenProvider(host: string, entityPath:
        string, tokenProvider: TokenProvider, options?: ClientOptionsBase):
        EventHubClient
      parameters:
        - id: host
          type: string
          description: |-
            Fully qualified domain name for Event Hubs. Most likely,
            <yournamespace>.servicebus.windows.net
        - id: entityPath
          type: string
          description: EventHub path of the form 'my-event-hub-name'
        - id: tokenProvider
          type: TokenProvider
          description: Your token provider that implements the TokenProvider interface.
        - id: options
          type: <xref uid="@azure/event-hubs.ClientOptionsBase" />
          description: The options that can be provided during client creation.
      return:
        description: An instance of the Eventhub client.
        type: <xref uid="@azure/event-hubs.EventHubClient" />
  - name: getHubRuntimeInformation()
    uid: '@azure/event-hubs.EventHubClient.getHubRuntimeInformation'
    package: '@azure/event-hubs'
    summary: Provides the eventhub runtime information.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getHubRuntimeInformation(): Promise<EventHubRuntimeInformation>'
      return:
        description: A promise that resolves with EventHubRuntimeInformation.
        type: >-
          Promise&lt;<xref uid="@azure/event-hubs.EventHubRuntimeInformation"
          />&gt;
  - name: getPartitionIds()
    uid: '@azure/event-hubs.EventHubClient.getPartitionIds'
    package: '@azure/event-hubs'
    summary: Provides an array of partitionIds.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getPartitionIds(): Promise<Array<string>>'
      return:
        description: A promise that resolves with an Array of strings.
        type: Promise&lt;Array&lt;string&gt;&gt;
  - name: getPartitionInformation(string | number)
    uid: '@azure/event-hubs.EventHubClient.getPartitionInformation'
    package: '@azure/event-hubs'
    summary: Provides information about the specified partition.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getPartitionInformation(partitionId: string | number):
        Promise<EventHubPartitionRuntimeInformation>
      parameters:
        - id: partitionId
          type: string | number
          description: Partition ID for which partition information is required.
      return:
        description: A promise that resoloves with EventHubPartitionRuntimeInformation.
        type: >-
          Promise&lt;<xref
          uid="@azure/event-hubs.EventHubPartitionRuntimeInformation" />&gt;
  - name: 'receive(string | number, OnMessage, OnError, ReceiveOptions)'
    uid: '@azure/event-hubs.EventHubClient.receive'
    package: '@azure/event-hubs'
    summary: >-
      Starts the receiver by establishing an AMQP session and an AMQP receiver
      link on the session. Messages will be passed to

      the provided onMessage handler and error will be passed to the provided
      onError handler.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function receive(partitionId: string | number, onMessage: OnMessage,
        onError: OnError, options?: ReceiveOptions): ReceiveHandler
      parameters:
        - id: partitionId
          type: string | number
          description: Partition ID from which to receive.
        - id: onMessage
          type: <xref uid="@azure/event-hubs.OnMessage" />
          description: The message handler to receive event data objects.
        - id: onError
          type: <xref uid="@azure/event-hubs.OnError" />
          description: |-
            The error handler to receive an error that occurs
            while receiving messages.
        - id: options
          type: <xref uid="@azure/event-hubs.ReceiveOptions" />
          description: ''
      return:
        description: >-
          ReceiveHandler - An object that provides a mechanism to stop receiving
          more messages.
        type: <xref uid="@azure/event-hubs.ReceiveHandler" />
  - name: 'receiveBatch(string | number, number, undefined | number, ReceiveOptions)'
    uid: '@azure/event-hubs.EventHubClient.receiveBatch'
    package: '@azure/event-hubs'
    summary: >-
      Receives a batch of EventData objects from an EventHub partition for a
      given count and a given max wait time in seconds, whichever

      happens first. This method can be used directly after creating the
      receiver object and **MUST NOT** be used along with the `start()` method.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function receiveBatch(partitionId: string | number, maxMessageCount:
        number, maxWaitTimeInSeconds?: undefined | number, options?:
        ReceiveOptions): Promise<EventData[]>
      parameters:
        - id: partitionId
          type: string | number
          description: Partition ID from which to receive.
        - id: maxMessageCount
          type: number
          description: The maximum message count. Must be a value greater than 0.
        - id: maxWaitTimeInSeconds
          type: undefined | number
          description: ''
        - id: options
          type: <xref uid="@azure/event-hubs.ReceiveOptions" />
          description: ''
      return:
        description: Promise<Array<EventData>>.
        type: 'Promise&lt;<xref uid="@azure/event-hubs.EventData" />[]&gt;'
  - name: 'send(EventData, string | number)'
    uid: '@azure/event-hubs.EventHubClient.send'
    package: '@azure/event-hubs'
    summary: Sends the given message to the EventHub.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function send(data: EventData, partitionId?: string | number):
        Promise<Delivery>
      parameters:
        - id: data
          type: <xref uid="@azure/event-hubs.EventData" />
          description: Message to send.  Will be sent as UTF8-encoded JSON string.
        - id: partitionId
          type: string | number
          description: ''
      return:
        description: Promise<Delivery>
        type: Promise&lt;Delivery&gt;
  - name: 'sendBatch(EventData[], string | number)'
    uid: '@azure/event-hubs.EventHubClient.sendBatch'
    package: '@azure/event-hubs'
    summary: >-
      Send a batch of EventData to the EventHub. The "message_annotations",
      "application_properties" and "properties"

      of the first message will be set as that of the envelope (batch message).
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function sendBatch(datas: EventData[], partitionId?: string | number):
        Promise<Delivery>
      parameters:
        - id: datas
          type: '<xref uid="@azure/event-hubs.EventData" />[]'
          description: An array of EventData objects to be sent in a Batch message.
        - id: partitionId
          type: string | number
          description: ''
      return:
        description: Promise<Delivery>
        type: Promise&lt;Delivery&gt;
