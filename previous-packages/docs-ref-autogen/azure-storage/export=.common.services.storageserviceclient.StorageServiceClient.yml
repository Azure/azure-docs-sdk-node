### YamlMime:TSType
name: StorageServiceClient
uid: >-
  azure-storage.export=.common.services.storageserviceclient.StorageServiceClient
package: azure-storage
summary: ''
fullName: StorageServiceClient
remarks: ''
isDeprecated: false
type: class
constructors:
  - name: StorageServiceClient(string, string, StorageHost, boolean, string)
    uid: >-
      azure-storage.export=.common.services.storageserviceclient.StorageServiceClient.constructor
    package: azure-storage
    summary: Creates a new StorageServiceClient object.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        new StorageServiceClient(storageAccount?: string, storageAccessKey?:
        string, host?: StorageHost, usePathStyleUri?: boolean, sasToken?:
        string)
      parameters:
        - id: storageAccount
          type: string
          description: The storage account.
        - id: storageAccessKey
          type: string
          description: The storage access key.
        - id: host
          type: <xref uid="azure-storage.export" />=.StorageHost
          description: The host for the service.
        - id: usePathStyleUri
          type: boolean
          description: Boolean value indicating wether to use path style uris.
        - id: sasToken
          type: string
          description: The Shared Access Signature token.
properties:
  - name: defaultClientRequestTimeoutInMs
    uid: >-
      azure-storage.export=.common.services.storageserviceclient.StorageServiceClient.defaultClientRequestTimeoutInMs
    package: azure-storage
    summary: >-
      The default timeout of client requests, in milliseconds, to use for the
      request.
    fullName: defaultClientRequestTimeoutInMs
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'defaultClientRequestTimeoutInMs: number'
      return:
        description: ''
        type: number
  - name: defaultLocationMode
    uid: >-
      azure-storage.export=.common.services.storageserviceclient.StorageServiceClient.defaultLocationMode
    package: azure-storage
    summary: The default location mode for requests made via the service.
    fullName: defaultLocationMode
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'defaultLocationMode: LocationMode'
      return:
        description: ''
        type: >-
          <xref uid="azure-storage.export" />=.<xref
          uid="common.util.storageutilities.LocationMode" />
  - name: defaultMaximumExecutionTimeInMs
    uid: >-
      azure-storage.export=.common.services.storageserviceclient.StorageServiceClient.defaultMaximumExecutionTimeInMs
    package: azure-storage
    summary: >-
      The default maximum execution time across all potential retries, for
      requests made via the service.
    fullName: defaultMaximumExecutionTimeInMs
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'defaultMaximumExecutionTimeInMs: number'
      return:
        description: ''
        type: number
  - name: defaultTimeoutIntervalInMs
    uid: >-
      azure-storage.export=.common.services.storageserviceclient.StorageServiceClient.defaultTimeoutIntervalInMs
    package: azure-storage
    summary: >-
      The default timeout interval, in milliseconds, to use for request made via
      the service.
    fullName: defaultTimeoutIntervalInMs
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'defaultTimeoutIntervalInMs: number'
      return:
        description: ''
        type: number
  - name: enableGlobalHttpAgent
    uid: >-
      azure-storage.export=.common.services.storageserviceclient.StorageServiceClient.enableGlobalHttpAgent
    package: azure-storage
    summary: >-
      Determines whether global HTTP(s) agent is enabled; true to use Global
      HTTP(s) agent; otherwise, false to use

      http(s).Agent({keepAlive:true}).
    fullName: enableGlobalHttpAgent
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'enableGlobalHttpAgent: boolean'
      return:
        description: ''
        type: boolean
  - name: logger
    uid: >-
      azure-storage.export=.common.services.storageserviceclient.StorageServiceClient.logger
    package: azure-storage
    summary: The logging settings object.
    fullName: logger
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'logger: Logger'
      return:
        description: ''
        type: >-
          <xref uid="azure-storage.export" />=.<xref
          uid="common.diagnostics.logger.Logger" />
  - name: proxy
    uid: >-
      azure-storage.export=.common.services.storageserviceclient.StorageServiceClient.proxy
    package: azure-storage
    summary: The proxy object specified by caller.
    fullName: proxy
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'proxy: Proxy'
      return:
        description: ''
        type: >-
          <xref uid="azure-storage.export" />=.<xref
          uid="common.services.storageserviceclient.Proxy" />
  - name: useNagleAlgorithm
    uid: >-
      azure-storage.export=.common.services.storageserviceclient.StorageServiceClient.useNagleAlgorithm
    package: azure-storage
    summary: >-
      Determines whether the Nagle algorithm is used for requests made via the
      Queue service; true to use the

      Nagle algorithm; otherwise, false. The default value is false.
    fullName: useNagleAlgorithm
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'useNagleAlgorithm: boolean'
      return:
        description: ''
        type: boolean
inheritedProperties:
  - name: captureRejections
    uid: >-
      azure-storage.export=.common.services.storageserviceclient.StorageServiceClient.captureRejections
    package: azure-storage
    summary: >-
      Value:
      [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type)


      Change the default `captureRejections` option on all new `EventEmitter`
      objects.
    fullName: captureRejections
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static captureRejections: boolean'
      return:
        description: ''
        type: boolean
    inheritanceDescription: <b>Inherited From</b> events.EventEmitter.captureRejections
  - name: captureRejectionSymbol
    uid: >-
      azure-storage.export=.common.services.storageserviceclient.StorageServiceClient.captureRejectionSymbol
    package: azure-storage
    summary: |-
      Value: `Symbol.for('nodejs.rejection')`

      See how to write a custom `rejection handler`.
    fullName: captureRejectionSymbol
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static captureRejectionSymbol: typeof captureRejectionSymbol'
      return:
        description: ''
        type: typeof captureRejectionSymbol
    inheritanceDescription: <b>Inherited From</b> events.EventEmitter.captureRejectionSymbol
  - name: defaultMaxListeners
    uid: >-
      azure-storage.export=.common.services.storageserviceclient.StorageServiceClient.defaultMaxListeners
    package: azure-storage
    summary: >-
      By default, a maximum of `10` listeners can be registered for any single

      event. This limit can be changed for individual `EventEmitter` instances

      using the `emitter.setMaxListeners(n)` method. To change the default

      for _all_`EventEmitter` instances, the
      `events.defaultMaxListeners`property can be used. If this value is not a
      positive number, a `RangeError`is thrown.


      Take caution when setting the `events.defaultMaxListeners` because the

      change affects _all_`EventEmitter` instances, including those created
      before

      the change is made. However, calling `emitter.setMaxListeners(n)` still
      has

      precedence over `events.defaultMaxListeners`.


      This is not a hard limit. The `EventEmitter` instance will allow

      more listeners to be added but will output a trace warning to stderr
      indicating

      that a "possible EventEmitter memory leak" has been detected. For any
      single`EventEmitter`, the `emitter.getMaxListeners()` and
      `emitter.setMaxListeners()`methods can be used to

      temporarily avoid this warning:


      ```js

      import { EventEmitter } from 'node:events';

      const emitter = new EventEmitter();

      emitter.setMaxListeners(emitter.getMaxListeners() + 1);

      emitter.once('event', () => {
        // do stuff
        emitter.setMaxListeners(Math.max(emitter.getMaxListeners() - 1, 0));
      });

      ```


      The `--trace-warnings` command-line flag can be used to display the

      stack trace for such warnings.


      The emitted warning can be inspected with `process.on('warning')` and will

      have the additional `emitter`, `type`, and `count` properties, referring
      to

      the event emitter instance, the event's name and the number of attached

      listeners, respectively.

      Its `name` property is set to `'MaxListenersExceededWarning'`.
    fullName: defaultMaxListeners
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static defaultMaxListeners: number'
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> events.EventEmitter.defaultMaxListeners
  - name: errorMonitor
    uid: >-
      azure-storage.export=.common.services.storageserviceclient.StorageServiceClient.errorMonitor
    package: azure-storage
    summary: >-
      This symbol shall be used to install a listener for only monitoring
      `'error'`events. Listeners installed using this symbol are called before
      the regular`'error'` listeners are called.


      Installing a listener using this symbol does not change the behavior once
      an`'error'` event is emitted. Therefore, the process will still crash if
      no

      regular `'error'` listener is installed.
    fullName: errorMonitor
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static errorMonitor: typeof errorMonitor'
      return:
        description: ''
        type: typeof errorMonitor
    inheritanceDescription: <b>Inherited From</b> events.EventEmitter.errorMonitor
inheritedMethods:
  - name: 'addAbortListener(AbortSignal, (event: Event) => void)'
    uid: >-
      azure-storage.export=.common.services.storageserviceclient.StorageServiceClient.addAbortListener
    package: azure-storage
    summary: >-
      Listens once to the `abort` event on the provided `signal`.


      Listening to the `abort` event on abort signals is unsafe and may

      lead to resource leaks since another third party with the signal can

      call `e.stopImmediatePropagation()`. Unfortunately Node.js cannot change

      this since it would violate the web standard. Additionally, the original

      API makes it easy to forget to remove listeners.


      This API allows safely using `AbortSignal`s in Node.js APIs by solving
      these

      two issues by listening to the event such that `stopImmediatePropagation`
      does

      not prevent the listener from running.


      Returns a disposable so that it may be unsubscribed from more easily.


      ```js

      import { addAbortListener } from 'node:events';


      function example(signal) {
        let disposable;
        try {
          signal.addEventListener('abort', (e) => e.stopImmediatePropagation());
          disposable = addAbortListener(signal, (e) => {
            // Do something when signal is aborted.
          });
        } finally {
          disposable?.[Symbol.dispose]();
        }
      }

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        static function addAbortListener(signal: AbortSignal, resource: (event:
        Event) => void): Disposable
      parameters:
        - id: signal
          type: AbortSignal
          description: ''
        - id: resource
          type: '(event: Event) =&gt; void'
          description: ''
      return:
        description: that removes the `abort` listener.
        type: Disposable
    inheritanceDescription: <b>Inherited From</b> events.EventEmitter.addAbortListener
  - name: addListener(string, Function)
    uid: >-
      azure-storage.export=.common.services.storageserviceclient.StorageServiceClient.addListener
    package: azure-storage
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function addListener(event: string, listener: Function):
        StorageServiceClient
      parameters:
        - id: event
          type: string
          description: ''
        - id: listener
          type: Function
          description: ''
      return:
        description: ''
        type: >-
          <xref uid="azure-storage.export" />=.<xref
          uid="common.services.storageserviceclient.StorageServiceClient" />
    inheritanceDescription: <b>Inherited From</b> events.EventEmitter.addListener
  - name: emit(string, any[])
    uid: >-
      azure-storage.export=.common.services.storageserviceclient.StorageServiceClient.emit
    package: azure-storage
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function emit(event: string, args: any[]): boolean'
      parameters:
        - id: event
          type: string
          description: ''
        - id: args
          type: any[]
          description: ''
      return:
        description: ''
        type: boolean
    inheritanceDescription: <b>Inherited From</b> events.EventEmitter.emit
  - name: eventNames()
    uid: >-
      azure-storage.export=.common.services.storageserviceclient.StorageServiceClient.eventNames
    package: azure-storage
    summary: |-
      Returns an array listing the events for which the emitter has registered
      listeners. The values in the array are strings or `Symbol`s.

      ```js
      import { EventEmitter } from 'node:events';

      const myEE = new EventEmitter();
      myEE.on('foo', () => {});
      myEE.on('bar', () => {});

      const sym = Symbol('symbol');
      myEE.on(sym, () => {});

      console.log(myEE.eventNames());
      // Prints: [ 'foo', 'bar', Symbol(symbol) ]
      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function eventNames(): (string | symbol)[]'
      return:
        description: ''
        type: (string | symbol)[]
    inheritanceDescription: <b>Inherited From</b> events.EventEmitter.eventNames
  - name: getEventListeners(_DOMEventTarget | EventEmitter, string | symbol)
    uid: >-
      azure-storage.export=.common.services.storageserviceclient.StorageServiceClient.getEventListeners
    package: azure-storage
    summary: >-
      Returns a copy of the array of listeners for the event named `eventName`.


      For `EventEmitter`s this behaves exactly the same as calling `.listeners`
      on

      the emitter.


      For `EventTarget`s this is the only way to get the event listeners for the

      event target. This is useful for debugging and diagnostic purposes.


      ```js

      import { getEventListeners, EventEmitter } from 'node:events';


      {
        const ee = new EventEmitter();
        const listener = () => console.log('Events are fun');
        ee.on('foo', listener);
        console.log(getEventListeners(ee, 'foo')); // [ [Function: listener] ]
      }

      {
        const et = new EventTarget();
        const listener = () => console.log('Events are fun');
        et.addEventListener('foo', listener);
        console.log(getEventListeners(et, 'foo')); // [ [Function: listener] ]
      }

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        static function getEventListeners(emitter: _DOMEventTarget |
        EventEmitter, name: string | symbol): Function[]
      parameters:
        - id: emitter
          type: _DOMEventTarget | EventEmitter
          description: ''
        - id: name
          type: string | symbol
          description: ''
      return:
        description: ''
        type: Function[]
    inheritanceDescription: <b>Inherited From</b> events.EventEmitter.getEventListeners
  - name: getMaxListeners()
    uid: >-
      azure-storage.export=.common.services.storageserviceclient.StorageServiceClient.getMaxListeners
    package: azure-storage
    summary: >-
      Returns the current max listener value for the `EventEmitter` which is
      either

      set by `emitter.setMaxListeners(n)` or defaults to
      [defaultMaxListeners](xref:azure-storage.export=.common.services.storageserviceclient.StorageServiceClient.defaultMaxListeners).
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getMaxListeners(): number'
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> events.EventEmitter.getMaxListeners
  - name: getMaxListeners(_DOMEventTarget | EventEmitter)
    uid: >-
      azure-storage.export=.common.services.storageserviceclient.StorageServiceClient.getMaxListeners
    package: azure-storage
    summary: >-
      Returns the currently set max amount of listeners.


      For `EventEmitter`s this behaves exactly the same as calling
      `.getMaxListeners` on

      the emitter.


      For `EventTarget`s this is the only way to get the max event listeners for
      the

      event target. If the number of event handlers on a single EventTarget
      exceeds

      the max set, the EventTarget will print a warning.


      ```js

      import { getMaxListeners, setMaxListeners, EventEmitter } from
      'node:events';


      {
        const ee = new EventEmitter();
        console.log(getMaxListeners(ee)); // 10
        setMaxListeners(11, ee);
        console.log(getMaxListeners(ee)); // 11
      }

      {
        const et = new EventTarget();
        console.log(getMaxListeners(et)); // 10
        setMaxListeners(11, et);
        console.log(getMaxListeners(et)); // 11
      }

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        static function getMaxListeners(emitter: _DOMEventTarget |
        EventEmitter): number
      parameters:
        - id: emitter
          type: _DOMEventTarget | EventEmitter
          description: ''
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> events.EventEmitter.getMaxListeners
  - name: listenerCount(EventEmitter, string | symbol)
    uid: >-
      azure-storage.export=.common.services.storageserviceclient.StorageServiceClient.listenerCount
    package: azure-storage
    summary: >-
      A class method that returns the number of listeners for the given
      `eventName`registered on the given `emitter`.


      ```js

      import { EventEmitter, listenerCount } from 'node:events';


      const myEmitter = new EventEmitter();

      myEmitter.on('event', () => {});

      myEmitter.on('event', () => {});

      console.log(listenerCount(myEmitter, 'event'));

      // Prints: 2

      ```
    remarks: ''
    isDeprecated: true
    customDeprecatedMessage: Since v3.2.0 - Use `listenerCount` instead.
    syntax:
      content: >-
        static function listenerCount(emitter: EventEmitter, eventName: string |
        symbol): number
      parameters:
        - id: emitter
          type: EventEmitter
          description: The emitter to query
        - id: eventName
          type: string | symbol
          description: The event name
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> events.EventEmitter.listenerCount
  - name: listenerCount(EventEmitter, string)
    uid: >-
      azure-storage.export=.common.services.storageserviceclient.StorageServiceClient.listenerCount_1
    package: azure-storage
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        static function listenerCount(emitter: EventEmitter, event: string):
        number
      parameters:
        - id: emitter
          type: EventEmitter
          description: ''
        - id: event
          type: string
          description: ''
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> events.EventEmitter.listenerCount
  - name: listenerCount(string | symbol, Function)
    uid: >-
      azure-storage.export=.common.services.storageserviceclient.StorageServiceClient.listenerCount
    package: azure-storage
    summary: >-
      Returns the number of listeners listening for the event named `eventName`.

      If `listener` is provided, it will return how many times the listener is
      found

      in the list of the listeners of the event.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listenerCount(eventName: string | symbol, listener?: Function):
        number
      parameters:
        - id: eventName
          type: string | symbol
          description: The name of the event being listened for
        - id: listener
          type: Function
          description: The event handler function
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> events.EventEmitter.listenerCount
  - name: listeners(string)
    uid: >-
      azure-storage.export=.common.services.storageserviceclient.StorageServiceClient.listeners
    package: azure-storage
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function listeners(event: string): Function[]'
      parameters:
        - id: event
          type: string
          description: ''
      return:
        description: ''
        type: Function[]
    inheritanceDescription: <b>Inherited From</b> events.EventEmitter.listeners
  - name: 'off(string | symbol, (args: any[]) => void)'
    uid: >-
      azure-storage.export=.common.services.storageserviceclient.StorageServiceClient.off
    package: azure-storage
    summary: Alias for `emitter.removeListener()`.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function off(eventName: string | symbol, listener: (args: any[]) =>
        void): StorageServiceClient
      parameters:
        - id: eventName
          type: string | symbol
          description: ''
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: ''
      return:
        description: ''
        type: >-
          <xref uid="azure-storage.export" />=.<xref
          uid="common.services.storageserviceclient.StorageServiceClient" />
    inheritanceDescription: <b>Inherited From</b> events.EventEmitter.off
  - name: on(EventEmitter, string, StaticEventEmitterOptions)
    uid: >-
      azure-storage.export=.common.services.storageserviceclient.StorageServiceClient.on
    package: azure-storage
    summary: |-
      ```js
      import { on, EventEmitter } from 'node:events';
      import process from 'node:process';

      const ee = new EventEmitter();

      // Emit later on
      process.nextTick(() => {
        ee.emit('foo', 'bar');
        ee.emit('foo', 42);
      });

      for await (const event of on(ee, 'foo')) {
        // The execution of this inner block is synchronous and it
        // processes one event at a time (even with await). Do not use
        // if concurrent execution is required.
        console.log(event); // prints ['bar'] [42]
      }
      // Unreachable here
      ```

      Returns an `AsyncIterator` that iterates `eventName` events. It will throw
      if the `EventEmitter` emits `'error'`. It removes all listeners when
      exiting the loop. The `value` returned by each iteration is an array
      composed of the emitted event arguments.

      An `AbortSignal` can be used to cancel waiting on events:

      ```js
      import { on, EventEmitter } from 'node:events';
      import process from 'node:process';

      const ac = new AbortController();

      (async () => {
        const ee = new EventEmitter();

        // Emit later on
        process.nextTick(() => {
          ee.emit('foo', 'bar');
          ee.emit('foo', 42);
        });

        for await (const event of on(ee, 'foo', { signal: ac.signal })) {
          // The execution of this inner block is synchronous and it
          // processes one event at a time (even with await). Do not use
          // if concurrent execution is required.
          console.log(event); // prints ['bar'] [42]
        }
        // Unreachable here
      })();

      process.nextTick(() => ac.abort());
      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        static function on(emitter: EventEmitter, eventName: string, options?:
        StaticEventEmitterOptions): AsyncIterableIterator<any>
      parameters:
        - id: emitter
          type: EventEmitter
          description: ''
        - id: eventName
          type: string
          description: The name of the event being listened for
        - id: options
          type: StaticEventEmitterOptions
          description: ''
      return:
        description: that iterates `eventName` events emitted by the `emitter`
        type: AsyncIterableIterator&lt;any&gt;
    inheritanceDescription: <b>Inherited From</b> events.EventEmitter.on
  - name: on(string, Function)
    uid: >-
      azure-storage.export=.common.services.storageserviceclient.StorageServiceClient.on
    package: azure-storage
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function on(event: string, listener: Function): StorageServiceClient'
      parameters:
        - id: event
          type: string
          description: ''
        - id: listener
          type: Function
          description: ''
      return:
        description: ''
        type: >-
          <xref uid="azure-storage.export" />=.<xref
          uid="common.services.storageserviceclient.StorageServiceClient" />
    inheritanceDescription: <b>Inherited From</b> events.EventEmitter.on
  - name: once(string, Function)
    uid: >-
      azure-storage.export=.common.services.storageserviceclient.StorageServiceClient.once
    package: azure-storage
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function once(event: string, listener: Function): StorageServiceClient'
      parameters:
        - id: event
          type: string
          description: ''
        - id: listener
          type: Function
          description: ''
      return:
        description: ''
        type: >-
          <xref uid="azure-storage.export" />=.<xref
          uid="common.services.storageserviceclient.StorageServiceClient" />
    inheritanceDescription: <b>Inherited From</b> events.EventEmitter.once
  - name: once(_DOMEventTarget, string, StaticEventEmitterOptions)
    uid: >-
      azure-storage.export=.common.services.storageserviceclient.StorageServiceClient.once_1
    package: azure-storage
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        static function once(emitter: _DOMEventTarget, eventName: string,
        options?: StaticEventEmitterOptions): Promise<any[]>
      parameters:
        - id: emitter
          type: _DOMEventTarget
          description: ''
        - id: eventName
          type: string
          description: ''
        - id: options
          type: StaticEventEmitterOptions
          description: ''
      return:
        description: ''
        type: Promise&lt;any[]&gt;
    inheritanceDescription: <b>Inherited From</b> events.EventEmitter.once
  - name: once(_NodeEventTarget, string | symbol, StaticEventEmitterOptions)
    uid: >-
      azure-storage.export=.common.services.storageserviceclient.StorageServiceClient.once
    package: azure-storage
    summary: >-
      Creates a `Promise` that is fulfilled when the `EventEmitter` emits the
      given

      event or that is rejected if the `EventEmitter` emits `'error'` while
      waiting.

      The `Promise` will resolve with an array of all the arguments emitted to
      the

      given event.


      This method is intentionally generic and works with the web platform
      [EventTarget](https://dom.spec.whatwg.org/#interface-eventtarget)
      interface, which has no special`'error'` event

      semantics and does not listen to the `'error'` event.


      ```js

      import { once, EventEmitter } from 'node:events';

      import process from 'node:process';


      const ee = new EventEmitter();


      process.nextTick(() => {
        ee.emit('myevent', 42);
      });


      const [value] = await once(ee, 'myevent');

      console.log(value);


      const err = new Error('kaboom');

      process.nextTick(() => {
        ee.emit('error', err);
      });


      try {
        await once(ee, 'myevent');
      } catch (err) {
        console.error('error happened', err);
      }

      ```


      The special handling of the `'error'` event is only used when
      `events.once()`is used to wait for another event. If `events.once()` is
      used to wait for the

      '`error'` event itself, then it is treated as any other kind of event
      without

      special handling:


      ```js

      import { EventEmitter, once } from 'node:events';


      const ee = new EventEmitter();


      once(ee, 'error')
        .then(([err]) => console.log('ok', err.message))
        .catch((err) => console.error('error', err.message));

      ee.emit('error', new Error('boom'));


      // Prints: ok boom

      ```


      An `AbortSignal` can be used to cancel waiting for the event:


      ```js

      import { EventEmitter, once } from 'node:events';


      const ee = new EventEmitter();

      const ac = new AbortController();


      async function foo(emitter, event, signal) {
        try {
          await once(emitter, event, { signal });
          console.log('event emitted!');
        } catch (error) {
          if (error.name === 'AbortError') {
            console.error('Waiting for the event was canceled!');
          } else {
            console.error('There was an error', error.message);
          }
        }
      }


      foo(ee, 'foo', ac.signal);

      ac.abort(); // Abort waiting for the event

      ee.emit('foo'); // Prints: Waiting for the event was canceled!

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        static function once(emitter: _NodeEventTarget, eventName: string |
        symbol, options?: StaticEventEmitterOptions): Promise<any[]>
      parameters:
        - id: emitter
          type: _NodeEventTarget
          description: ''
        - id: eventName
          type: string | symbol
          description: ''
        - id: options
          type: StaticEventEmitterOptions
          description: ''
      return:
        description: ''
        type: Promise&lt;any[]&gt;
    inheritanceDescription: <b>Inherited From</b> events.EventEmitter.once
  - name: 'prependListener(string | symbol, (args: any[]) => void)'
    uid: >-
      azure-storage.export=.common.services.storageserviceclient.StorageServiceClient.prependListener
    package: azure-storage
    summary: >-
      Adds the `listener` function to the _beginning_ of the listeners array for
      the

      event named `eventName`. No checks are made to see if the `listener` has

      already been added. Multiple calls passing the same combination of
      `eventName`and `listener` will result in the `listener` being added, and
      called, multiple

      times.


      ```js

      server.prependListener('connection', (stream) => {
        console.log('someone connected!');
      });

      ```


      Returns a reference to the `EventEmitter`, so that calls can be chained.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function prependListener(eventName: string | symbol, listener: (args:
        any[]) => void): StorageServiceClient
      parameters:
        - id: eventName
          type: string | symbol
          description: The name of the event.
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: The callback function
      return:
        description: ''
        type: >-
          <xref uid="azure-storage.export" />=.<xref
          uid="common.services.storageserviceclient.StorageServiceClient" />
    inheritanceDescription: <b>Inherited From</b> events.EventEmitter.prependListener
  - name: 'prependOnceListener(string | symbol, (args: any[]) => void)'
    uid: >-
      azure-storage.export=.common.services.storageserviceclient.StorageServiceClient.prependOnceListener
    package: azure-storage
    summary: >-
      Adds a **one-time**`listener` function for the event named `eventName` to
      the _beginning_ of the listeners array. The next time `eventName` is
      triggered, this

      listener is removed, and then invoked.


      ```js

      server.prependOnceListener('connection', (stream) => {
        console.log('Ah, we have our first user!');
      });

      ```


      Returns a reference to the `EventEmitter`, so that calls can be chained.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function prependOnceListener(eventName: string | symbol, listener:
        (args: any[]) => void): StorageServiceClient
      parameters:
        - id: eventName
          type: string | symbol
          description: The name of the event.
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: The callback function
      return:
        description: ''
        type: >-
          <xref uid="azure-storage.export" />=.<xref
          uid="common.services.storageserviceclient.StorageServiceClient" />
    inheritanceDescription: <b>Inherited From</b> events.EventEmitter.prependOnceListener
  - name: rawListeners(string | symbol)
    uid: >-
      azure-storage.export=.common.services.storageserviceclient.StorageServiceClient.rawListeners
    package: azure-storage
    summary: |-
      Returns a copy of the array of listeners for the event named `eventName`,
      including any wrappers (such as those created by `.once()`).

      ```js
      import { EventEmitter } from 'node:events';
      const emitter = new EventEmitter();
      emitter.once('log', () => console.log('log once'));

      // Returns a new Array with a function `onceWrapper` which has a property
      // `listener` which contains the original listener bound above
      const listeners = emitter.rawListeners('log');
      const logFnWrapper = listeners[0];

      // Logs "log once" to the console and does not unbind the `once` event
      logFnWrapper.listener();

      // Logs "log once" to the console and removes the listener
      logFnWrapper();

      emitter.on('log', () => console.log('log persistently'));
      // Will return a new Array with a single function bound by `.on()` above
      const newListeners = emitter.rawListeners('log');

      // Logs "log persistently" twice
      newListeners[0]();
      emitter.emit('log');
      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function rawListeners(eventName: string | symbol): Function[]'
      parameters:
        - id: eventName
          type: string | symbol
          description: ''
      return:
        description: ''
        type: Function[]
    inheritanceDescription: <b>Inherited From</b> events.EventEmitter.rawListeners
  - name: removeAllListeners(string)
    uid: >-
      azure-storage.export=.common.services.storageserviceclient.StorageServiceClient.removeAllListeners
    package: azure-storage
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function removeAllListeners(event?: string): StorageServiceClient'
      parameters:
        - id: event
          type: string
          description: ''
      return:
        description: ''
        type: >-
          <xref uid="azure-storage.export" />=.<xref
          uid="common.services.storageserviceclient.StorageServiceClient" />
    inheritanceDescription: <b>Inherited From</b> events.EventEmitter.removeAllListeners
  - name: removeListener(string, Function)
    uid: >-
      azure-storage.export=.common.services.storageserviceclient.StorageServiceClient.removeListener
    package: azure-storage
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function removeListener(event: string, listener: Function):
        StorageServiceClient
      parameters:
        - id: event
          type: string
          description: ''
        - id: listener
          type: Function
          description: ''
      return:
        description: ''
        type: >-
          <xref uid="azure-storage.export" />=.<xref
          uid="common.services.storageserviceclient.StorageServiceClient" />
    inheritanceDescription: <b>Inherited From</b> events.EventEmitter.removeListener
  - name: setMaxListeners(number)
    uid: >-
      azure-storage.export=.common.services.storageserviceclient.StorageServiceClient.setMaxListeners
    package: azure-storage
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function setMaxListeners(n: number)'
      parameters:
        - id: 'n'
          type: number
          description: ''
    inheritanceDescription: <b>Inherited From</b> events.EventEmitter.setMaxListeners
  - name: setMaxListeners(number, (_DOMEventTarget | EventEmitter)[])
    uid: >-
      azure-storage.export=.common.services.storageserviceclient.StorageServiceClient.setMaxListeners
    package: azure-storage
    summary: |-
      ```js
      import { setMaxListeners, EventEmitter } from 'node:events';

      const target = new EventTarget();
      const emitter = new EventEmitter();

      setMaxListeners(5, target, emitter);
      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        static function setMaxListeners(n?: number, eventTargets:
        (_DOMEventTarget | EventEmitter)[])
      parameters:
        - id: 'n'
          type: number
          description: >-
            A non-negative number. The maximum number of listeners per
            `EventTarget` event.
        - id: eventTargets
          type: (_DOMEventTarget | EventEmitter)[]
          description: ''
    inheritanceDescription: <b>Inherited From</b> events.EventEmitter.setMaxListeners
methods:
  - name: setProxy(Proxy)
    uid: >-
      azure-storage.export=.common.services.storageserviceclient.StorageServiceClient.setProxy
    package: azure-storage
    summary: Sets proxy object specified by caller.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function setProxy(proxy: Proxy)'
      parameters:
        - id: proxy
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="common.services.storageserviceclient.Proxy" />
          description: |-
            proxy to use for tunneling
                                                   {
                                                    host: hostname
                                                    port: port number
                                                    proxyAuth: 'user:password' for basic auth
                                                    headers: {...} headers for proxy server
                                                    key: key for proxy server
                                                    ca: ca for proxy server
                                                    cert: cert for proxy server
                                                   }
                                                   if null or undefined, clears proxy
  - name: withFilter(IFilter)
    uid: >-
      azure-storage.export=.common.services.storageserviceclient.StorageServiceClient.withFilter
    package: azure-storage
    summary: >-
      Associate a filtering operation with this StorageServiceClient. Filtering
      operations

      can include logging, automatically retrying, etc. Filter operations are
      objects

      that implement a method with the signature:

          "function handle (requestOptions, next)".

      After doing its preprocessing on the request options, the method needs to
      call

      "next" passing a callback with the following signature:

      signature:

          "function (returnObject, finalCallback, next)"

      In this callback, and after processing the returnObject (the response from
      the

      request to the server), the callback needs to either invoke next if it
      exists to

      continue processing other filters or simply invoke finalCallback otherwise
      to end

      up the service invocation.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function withFilter(newFilter: IFilter): StorageServiceClient'
      parameters:
        - id: newFilter
          type: >-
            <xref uid="azure-storage.export" />=.<xref
            uid="common.filters.IFilter" />
          description: ''
      return:
        description: A new service client with the filter applied.
        type: >-
          <xref uid="azure-storage.export" />=.<xref
          uid="common.services.storageserviceclient.StorageServiceClient" />
extends: EventEmitter
