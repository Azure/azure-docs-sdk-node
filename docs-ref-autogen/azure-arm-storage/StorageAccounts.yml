### YamlMime:UniversalReference
items:
  - uid: azure-arm-storage.StorageAccounts
    name: StorageAccounts
    fullName: StorageAccounts
    children:
      - azure-arm-storage.StorageAccounts.beginCreate
      - azure-arm-storage.StorageAccounts.beginCreate_2
      - azure-arm-storage.StorageAccounts.beginCreate_1
      - azure-arm-storage.StorageAccounts.beginCreateWithHttpOperationResponse
      - azure-arm-storage.StorageAccounts.beginFailover
      - azure-arm-storage.StorageAccounts.beginFailover_2
      - azure-arm-storage.StorageAccounts.beginFailover_1
      - azure-arm-storage.StorageAccounts.beginFailoverWithHttpOperationResponse
      - azure-arm-storage.StorageAccounts.checkNameAvailability
      - azure-arm-storage.StorageAccounts.checkNameAvailability_2
      - azure-arm-storage.StorageAccounts.checkNameAvailability_1
      - >-
        azure-arm-storage.StorageAccounts.checkNameAvailabilityWithHttpOperationResponse
      - azure-arm-storage.StorageAccounts.create
      - azure-arm-storage.StorageAccounts.create_2
      - azure-arm-storage.StorageAccounts.create_1
      - azure-arm-storage.StorageAccounts.createWithHttpOperationResponse
      - azure-arm-storage.StorageAccounts.deleteMethod
      - azure-arm-storage.StorageAccounts.deleteMethod_2
      - azure-arm-storage.StorageAccounts.deleteMethod_1
      - azure-arm-storage.StorageAccounts.deleteMethodWithHttpOperationResponse
      - azure-arm-storage.StorageAccounts.failover
      - azure-arm-storage.StorageAccounts.failover_2
      - azure-arm-storage.StorageAccounts.failover_1
      - azure-arm-storage.StorageAccounts.failoverWithHttpOperationResponse
      - azure-arm-storage.StorageAccounts.getProperties
      - azure-arm-storage.StorageAccounts.getProperties_2
      - azure-arm-storage.StorageAccounts.getProperties_1
      - azure-arm-storage.StorageAccounts.getPropertiesWithHttpOperationResponse
      - azure-arm-storage.StorageAccounts.list
      - azure-arm-storage.StorageAccounts.list_2
      - azure-arm-storage.StorageAccounts.list_1
      - azure-arm-storage.StorageAccounts.listAccountSAS
      - azure-arm-storage.StorageAccounts.listAccountSAS_2
      - azure-arm-storage.StorageAccounts.listAccountSAS_1
      - >-
        azure-arm-storage.StorageAccounts.listAccountSASWithHttpOperationResponse
      - azure-arm-storage.StorageAccounts.listByResourceGroup
      - azure-arm-storage.StorageAccounts.listByResourceGroup_2
      - azure-arm-storage.StorageAccounts.listByResourceGroup_1
      - >-
        azure-arm-storage.StorageAccounts.listByResourceGroupWithHttpOperationResponse
      - azure-arm-storage.StorageAccounts.listKeys
      - azure-arm-storage.StorageAccounts.listKeys_2
      - azure-arm-storage.StorageAccounts.listKeys_1
      - azure-arm-storage.StorageAccounts.listKeysWithHttpOperationResponse
      - azure-arm-storage.StorageAccounts.listServiceSAS
      - azure-arm-storage.StorageAccounts.listServiceSAS_2
      - azure-arm-storage.StorageAccounts.listServiceSAS_1
      - >-
        azure-arm-storage.StorageAccounts.listServiceSASWithHttpOperationResponse
      - azure-arm-storage.StorageAccounts.listWithHttpOperationResponse
      - azure-arm-storage.StorageAccounts.regenerateKey
      - azure-arm-storage.StorageAccounts.regenerateKey_2
      - azure-arm-storage.StorageAccounts.regenerateKey_1
      - azure-arm-storage.StorageAccounts.regenerateKeyWithHttpOperationResponse
      - azure-arm-storage.StorageAccounts.update
      - azure-arm-storage.StorageAccounts.update_2
      - azure-arm-storage.StorageAccounts.update_1
      - azure-arm-storage.StorageAccounts.updateWithHttpOperationResponse
    langs:
      - typeScript
    type: interface
    summary: ''
    package: azure-arm-storage
  - uid: azure-arm-storage.StorageAccounts.beginCreate
    name: 'beginCreate(string, string, StorageAccountCreateParameters, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Asynchronously creates a new storage account with the specified
      parameters.

      If an account is already created and a subsequent create request is issued

      with different properties, the account properties will be updated. If an

      account is already created and a subsequent create or update request is

      issued with the exact same set of properties, the request will succeed.
    syntax:
      content: >-
        function beginCreate(resourceGroupName: string, accountName: string,
        parameters: StorageAccountCreateParameters, options?: Object)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: parameters
          type:
            - azure-arm-storage.StorageAccountCreateParameters
          description: |
            The parameters to provide for the created
            account.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<azure-arm-storage.StorageAccount>
    package: azure-arm-storage
  - uid: azure-arm-storage.StorageAccounts.beginCreate_2
    name: >-
      beginCreate(string, string, StorageAccountCreateParameters, Object,
      ServiceCallback<StorageAccount>)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Asynchronously creates a new storage account with the specified
      parameters.

      If an account is already created and a subsequent create request is issued

      with different properties, the account properties will be updated. If an

      account is already created and a subsequent create or update request is

      issued with the exact same set of properties, the request will succeed.
    syntax:
      content: >-
        function beginCreate(resourceGroupName: string, accountName: string,
        parameters: StorageAccountCreateParameters, options: Object, callback:
        ServiceCallback<StorageAccount>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: ''
        - id: accountName
          type:
            - string
          description: ''
        - id: parameters
          type:
            - azure-arm-storage.StorageAccountCreateParameters
          description: ''
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - ServiceCallback<azure-arm-storage.StorageAccount>
          description: ''
      return:
        type:
          - Promise<azure-arm-storage.StorageAccount>
    package: azure-arm-storage
  - uid: azure-arm-storage.StorageAccounts.beginCreate_1
    name: >-
      beginCreate(string, string, StorageAccountCreateParameters,
      ServiceCallback<StorageAccount>)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Asynchronously creates a new storage account with the specified
      parameters.

      If an account is already created and a subsequent create request is issued

      with different properties, the account properties will be updated. If an

      account is already created and a subsequent create or update request is

      issued with the exact same set of properties, the request will succeed.
    syntax:
      content: >-
        function beginCreate(resourceGroupName: string, accountName: string,
        parameters: StorageAccountCreateParameters, callback:
        ServiceCallback<StorageAccount>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: ''
        - id: accountName
          type:
            - string
          description: ''
        - id: parameters
          type:
            - azure-arm-storage.StorageAccountCreateParameters
          description: ''
        - id: callback
          type:
            - ServiceCallback<azure-arm-storage.StorageAccount>
          description: ''
      return:
        type:
          - Promise<azure-arm-storage.StorageAccount>
    package: azure-arm-storage
  - uid: azure-arm-storage.StorageAccounts.beginCreateWithHttpOperationResponse
    name: >-
      beginCreateWithHttpOperationResponse(string, string,
      StorageAccountCreateParameters, Object)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Asynchronously creates a new storage account with the specified
      parameters.

      If an account is already created and a subsequent create request is issued

      with different properties, the account properties will be updated. If an

      account is already created and a subsequent create or update request is

      issued with the exact same set of properties, the request will succeed.
    syntax:
      content: >-
        function beginCreateWithHttpOperationResponse(resourceGroupName: string,
        accountName: string, parameters: StorageAccountCreateParameters,
        options?: Object)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: parameters
          type:
            - azure-arm-storage.StorageAccountCreateParameters
          description: |
            The parameters to provide for the created
            account.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<HttpOperationResponse<azure-arm-storage.StorageAccount>>
    package: azure-arm-storage
  - uid: azure-arm-storage.StorageAccounts.beginFailover
    name: 'beginFailover(string, string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Failover request can be triggered for a storage account in case of

      availability issues. The failover occurs from the storage account's
      primary

      cluster to secondary cluster for RA-GRS accounts. The secondary cluster
      will

      become primary after failover.
    syntax:
      content: >-
        function beginFailover(resourceGroupName: string, accountName: string,
        options?: Object)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<void>
    package: azure-arm-storage
  - uid: azure-arm-storage.StorageAccounts.beginFailover_2
    name: 'beginFailover(string, string, Object, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Failover request can be triggered for a storage account in case of

      availability issues. The failover occurs from the storage account's
      primary

      cluster to secondary cluster for RA-GRS accounts. The secondary cluster
      will

      become primary after failover.
    syntax:
      content: >-
        function beginFailover(resourceGroupName: string, accountName: string,
        options: Object, callback: ServiceCallback<void>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: ''
        - id: accountName
          type:
            - string
          description: ''
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: azure-arm-storage
  - uid: azure-arm-storage.StorageAccounts.beginFailover_1
    name: 'beginFailover(string, string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Failover request can be triggered for a storage account in case of

      availability issues. The failover occurs from the storage account's
      primary

      cluster to secondary cluster for RA-GRS accounts. The secondary cluster
      will

      become primary after failover.
    syntax:
      content: >-
        function beginFailover(resourceGroupName: string, accountName: string,
        callback: ServiceCallback<void>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: ''
        - id: accountName
          type:
            - string
          description: ''
        - id: callback
          type:
            - ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: azure-arm-storage
  - uid: azure-arm-storage.StorageAccounts.beginFailoverWithHttpOperationResponse
    name: 'beginFailoverWithHttpOperationResponse(string, string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Failover request can be triggered for a storage account in case of

      availability issues. The failover occurs from the storage account's
      primary

      cluster to secondary cluster for RA-GRS accounts. The secondary cluster
      will

      become primary after failover.
    syntax:
      content: >-
        function beginFailoverWithHttpOperationResponse(resourceGroupName:
        string, accountName: string, options?: Object)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<HttpOperationResponse<void>>
    package: azure-arm-storage
  - uid: azure-arm-storage.StorageAccounts.checkNameAvailability
    name: 'checkNameAvailability(string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Checks that the storage account name is valid and is not already in use.
    syntax:
      content: 'function checkNameAvailability(name: string, options?: Object)'
      parameters:
        - id: name
          type:
            - string
          description: |
            The storage account name.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<azure-arm-storage.CheckNameAvailabilityResult>
    package: azure-arm-storage
  - uid: azure-arm-storage.StorageAccounts.checkNameAvailability_2
    name: >-
      checkNameAvailability(string, Object,
      ServiceCallback<CheckNameAvailabilityResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: Checks that the storage account name is valid and is not already in use.
    syntax:
      content: >-
        function checkNameAvailability(name: string, options: Object, callback:
        ServiceCallback<CheckNameAvailabilityResult>)
      parameters:
        - id: name
          type:
            - string
          description: ''
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - ServiceCallback<azure-arm-storage.CheckNameAvailabilityResult>
          description: ''
      return:
        type:
          - Promise<azure-arm-storage.CheckNameAvailabilityResult>
    package: azure-arm-storage
  - uid: azure-arm-storage.StorageAccounts.checkNameAvailability_1
    name: >-
      checkNameAvailability(string,
      ServiceCallback<CheckNameAvailabilityResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: Checks that the storage account name is valid and is not already in use.
    syntax:
      content: >-
        function checkNameAvailability(name: string, callback:
        ServiceCallback<CheckNameAvailabilityResult>)
      parameters:
        - id: name
          type:
            - string
          description: ''
        - id: callback
          type:
            - ServiceCallback<azure-arm-storage.CheckNameAvailabilityResult>
          description: ''
      return:
        type:
          - Promise<azure-arm-storage.CheckNameAvailabilityResult>
    package: azure-arm-storage
  - uid: >-
      azure-arm-storage.StorageAccounts.checkNameAvailabilityWithHttpOperationResponse
    name: 'checkNameAvailabilityWithHttpOperationResponse(string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Checks that the storage account name is valid and is not already in use.
    syntax:
      content: >-
        function checkNameAvailabilityWithHttpOperationResponse(name: string,
        options?: Object)
      parameters:
        - id: name
          type:
            - string
          description: |
            The storage account name.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<HttpOperationResponse<azure-arm-storage.CheckNameAvailabilityResult>>
    package: azure-arm-storage
  - uid: azure-arm-storage.StorageAccounts.create
    name: 'create(string, string, StorageAccountCreateParameters, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Asynchronously creates a new storage account with the specified
      parameters.

      If an account is already created and a subsequent create request is issued

      with different properties, the account properties will be updated. If an

      account is already created and a subsequent create or update request is

      issued with the exact same set of properties, the request will succeed.
    syntax:
      content: >-
        function create(resourceGroupName: string, accountName: string,
        parameters: StorageAccountCreateParameters, options?: Object)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: parameters
          type:
            - azure-arm-storage.StorageAccountCreateParameters
          description: |
            The parameters to provide for the created
            account.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<azure-arm-storage.StorageAccount>
    package: azure-arm-storage
  - uid: azure-arm-storage.StorageAccounts.create_2
    name: >-
      create(string, string, StorageAccountCreateParameters, Object,
      ServiceCallback<StorageAccount>)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Asynchronously creates a new storage account with the specified
      parameters.

      If an account is already created and a subsequent create request is issued

      with different properties, the account properties will be updated. If an

      account is already created and a subsequent create or update request is

      issued with the exact same set of properties, the request will succeed.
    syntax:
      content: >-
        function create(resourceGroupName: string, accountName: string,
        parameters: StorageAccountCreateParameters, options: Object, callback:
        ServiceCallback<StorageAccount>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: ''
        - id: accountName
          type:
            - string
          description: ''
        - id: parameters
          type:
            - azure-arm-storage.StorageAccountCreateParameters
          description: ''
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - ServiceCallback<azure-arm-storage.StorageAccount>
          description: ''
      return:
        type:
          - Promise<azure-arm-storage.StorageAccount>
    package: azure-arm-storage
  - uid: azure-arm-storage.StorageAccounts.create_1
    name: >-
      create(string, string, StorageAccountCreateParameters,
      ServiceCallback<StorageAccount>)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Asynchronously creates a new storage account with the specified
      parameters.

      If an account is already created and a subsequent create request is issued

      with different properties, the account properties will be updated. If an

      account is already created and a subsequent create or update request is

      issued with the exact same set of properties, the request will succeed.
    syntax:
      content: >-
        function create(resourceGroupName: string, accountName: string,
        parameters: StorageAccountCreateParameters, callback:
        ServiceCallback<StorageAccount>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: ''
        - id: accountName
          type:
            - string
          description: ''
        - id: parameters
          type:
            - azure-arm-storage.StorageAccountCreateParameters
          description: ''
        - id: callback
          type:
            - ServiceCallback<azure-arm-storage.StorageAccount>
          description: ''
      return:
        type:
          - Promise<azure-arm-storage.StorageAccount>
    package: azure-arm-storage
  - uid: azure-arm-storage.StorageAccounts.createWithHttpOperationResponse
    name: >-
      createWithHttpOperationResponse(string, string,
      StorageAccountCreateParameters, Object)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Asynchronously creates a new storage account with the specified
      parameters.

      If an account is already created and a subsequent create request is issued

      with different properties, the account properties will be updated. If an

      account is already created and a subsequent create or update request is

      issued with the exact same set of properties, the request will succeed.
    syntax:
      content: >-
        function createWithHttpOperationResponse(resourceGroupName: string,
        accountName: string, parameters: StorageAccountCreateParameters,
        options?: Object)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: parameters
          type:
            - azure-arm-storage.StorageAccountCreateParameters
          description: |
            The parameters to provide for the created
            account.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<HttpOperationResponse<azure-arm-storage.StorageAccount>>
    package: azure-arm-storage
  - uid: azure-arm-storage.StorageAccounts.deleteMethod
    name: 'deleteMethod(string, string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Deletes a storage account in Microsoft Azure.
    syntax:
      content: >-
        function deleteMethod(resourceGroupName: string, accountName: string,
        options?: Object)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<void>
    package: azure-arm-storage
  - uid: azure-arm-storage.StorageAccounts.deleteMethod_2
    name: 'deleteMethod(string, string, Object, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Deletes a storage account in Microsoft Azure.
    syntax:
      content: >-
        function deleteMethod(resourceGroupName: string, accountName: string,
        options: Object, callback: ServiceCallback<void>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: ''
        - id: accountName
          type:
            - string
          description: ''
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: azure-arm-storage
  - uid: azure-arm-storage.StorageAccounts.deleteMethod_1
    name: 'deleteMethod(string, string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Deletes a storage account in Microsoft Azure.
    syntax:
      content: >-
        function deleteMethod(resourceGroupName: string, accountName: string,
        callback: ServiceCallback<void>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: ''
        - id: accountName
          type:
            - string
          description: ''
        - id: callback
          type:
            - ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: azure-arm-storage
  - uid: azure-arm-storage.StorageAccounts.deleteMethodWithHttpOperationResponse
    name: 'deleteMethodWithHttpOperationResponse(string, string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Deletes a storage account in Microsoft Azure.
    syntax:
      content: >-
        function deleteMethodWithHttpOperationResponse(resourceGroupName:
        string, accountName: string, options?: Object)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<HttpOperationResponse<void>>
    package: azure-arm-storage
  - uid: azure-arm-storage.StorageAccounts.failover
    name: 'failover(string, string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Failover request can be triggered for a storage account in case of

      availability issues. The failover occurs from the storage account's
      primary

      cluster to secondary cluster for RA-GRS accounts. The secondary cluster
      will

      become primary after failover.
    syntax:
      content: >-
        function failover(resourceGroupName: string, accountName: string,
        options?: Object)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<void>
    package: azure-arm-storage
  - uid: azure-arm-storage.StorageAccounts.failover_2
    name: 'failover(string, string, Object, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Failover request can be triggered for a storage account in case of

      availability issues. The failover occurs from the storage account's
      primary

      cluster to secondary cluster for RA-GRS accounts. The secondary cluster
      will

      become primary after failover.
    syntax:
      content: >-
        function failover(resourceGroupName: string, accountName: string,
        options: Object, callback: ServiceCallback<void>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: ''
        - id: accountName
          type:
            - string
          description: ''
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: azure-arm-storage
  - uid: azure-arm-storage.StorageAccounts.failover_1
    name: 'failover(string, string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Failover request can be triggered for a storage account in case of

      availability issues. The failover occurs from the storage account's
      primary

      cluster to secondary cluster for RA-GRS accounts. The secondary cluster
      will

      become primary after failover.
    syntax:
      content: >-
        function failover(resourceGroupName: string, accountName: string,
        callback: ServiceCallback<void>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: ''
        - id: accountName
          type:
            - string
          description: ''
        - id: callback
          type:
            - ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: azure-arm-storage
  - uid: azure-arm-storage.StorageAccounts.failoverWithHttpOperationResponse
    name: 'failoverWithHttpOperationResponse(string, string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Failover request can be triggered for a storage account in case of

      availability issues. The failover occurs from the storage account's
      primary

      cluster to secondary cluster for RA-GRS accounts. The secondary cluster
      will

      become primary after failover.
    syntax:
      content: >-
        function failoverWithHttpOperationResponse(resourceGroupName: string,
        accountName: string, options?: Object)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<HttpOperationResponse<void>>
    package: azure-arm-storage
  - uid: azure-arm-storage.StorageAccounts.getProperties
    name: 'getProperties(string, string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Returns the properties for the specified storage account including but not
      limited to name, SKU name, location, and account status. The ListKeys
      operation should be used to retrieve storage keys.
    syntax:
      content: >-
        function getProperties(resourceGroupName: string, accountName: string,
        options?: Object)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<azure-arm-storage.StorageAccount>
    package: azure-arm-storage
  - uid: azure-arm-storage.StorageAccounts.getProperties_2
    name: 'getProperties(string, string, Object, ServiceCallback<StorageAccount>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Returns the properties for the specified storage account including but not
      limited to name, SKU name, location, and account status. The ListKeys
      operation should be used to retrieve storage keys.
    syntax:
      content: >-
        function getProperties(resourceGroupName: string, accountName: string,
        options: Object, callback: ServiceCallback<StorageAccount>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: ''
        - id: accountName
          type:
            - string
          description: ''
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - ServiceCallback<azure-arm-storage.StorageAccount>
          description: ''
      return:
        type:
          - Promise<azure-arm-storage.StorageAccount>
    package: azure-arm-storage
  - uid: azure-arm-storage.StorageAccounts.getProperties_1
    name: 'getProperties(string, string, ServiceCallback<StorageAccount>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Returns the properties for the specified storage account including but not
      limited to name, SKU name, location, and account status. The ListKeys
      operation should be used to retrieve storage keys.
    syntax:
      content: >-
        function getProperties(resourceGroupName: string, accountName: string,
        callback: ServiceCallback<StorageAccount>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: ''
        - id: accountName
          type:
            - string
          description: ''
        - id: callback
          type:
            - ServiceCallback<azure-arm-storage.StorageAccount>
          description: ''
      return:
        type:
          - Promise<azure-arm-storage.StorageAccount>
    package: azure-arm-storage
  - uid: azure-arm-storage.StorageAccounts.getPropertiesWithHttpOperationResponse
    name: 'getPropertiesWithHttpOperationResponse(string, string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Returns the properties for the specified storage account including but not
      limited to name, SKU name, location, and account status. The ListKeys
      operation should be used to retrieve storage keys.
    syntax:
      content: >-
        function getPropertiesWithHttpOperationResponse(resourceGroupName:
        string, accountName: string, options?: Object)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<HttpOperationResponse<azure-arm-storage.StorageAccount>>
    package: azure-arm-storage
  - uid: azure-arm-storage.StorageAccounts.list
    name: list(Object)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Lists all the storage accounts available under the subscription. Note that
      storage keys are not returned; use the ListKeys operation for this.
    syntax:
      content: 'function list(options?: Object)'
      parameters:
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<azure-arm-storage.StorageAccountListResult>
    package: azure-arm-storage
  - uid: azure-arm-storage.StorageAccounts.list_2
    name: 'list(Object, ServiceCallback<StorageAccountListResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Lists all the storage accounts available under the subscription. Note that
      storage keys are not returned; use the ListKeys operation for this.
    syntax:
      content: >-
        function list(options: Object, callback:
        ServiceCallback<StorageAccountListResult>)
      parameters:
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - ServiceCallback<azure-arm-storage.StorageAccountListResult>
          description: ''
      return:
        type:
          - Promise<azure-arm-storage.StorageAccountListResult>
    package: azure-arm-storage
  - uid: azure-arm-storage.StorageAccounts.list_1
    name: list(ServiceCallback<StorageAccountListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Lists all the storage accounts available under the subscription. Note that
      storage keys are not returned; use the ListKeys operation for this.
    syntax:
      content: 'function list(callback: ServiceCallback<StorageAccountListResult>)'
      parameters:
        - id: callback
          type:
            - ServiceCallback<azure-arm-storage.StorageAccountListResult>
          description: ''
      return:
        type:
          - Promise<azure-arm-storage.StorageAccountListResult>
    package: azure-arm-storage
  - uid: azure-arm-storage.StorageAccounts.listAccountSAS
    name: 'listAccountSAS(string, string, AccountSasParameters, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: List SAS credentials of a storage account.
    syntax:
      content: >-
        function listAccountSAS(resourceGroupName: string, accountName: string,
        parameters: AccountSasParameters, options?: Object)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: parameters
          type:
            - azure-arm-storage.AccountSasParameters
          description: |
            The parameters to provide to list SAS credentials
            for the storage account.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<azure-arm-storage.ListAccountSasResponse>
    package: azure-arm-storage
  - uid: azure-arm-storage.StorageAccounts.listAccountSAS_2
    name: >-
      listAccountSAS(string, string, AccountSasParameters, Object,
      ServiceCallback<ListAccountSasResponse>)
    children: []
    type: method
    langs:
      - typeScript
    summary: List SAS credentials of a storage account.
    syntax:
      content: >-
        function listAccountSAS(resourceGroupName: string, accountName: string,
        parameters: AccountSasParameters, options: Object, callback:
        ServiceCallback<ListAccountSasResponse>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: ''
        - id: accountName
          type:
            - string
          description: ''
        - id: parameters
          type:
            - azure-arm-storage.AccountSasParameters
          description: ''
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - ServiceCallback<azure-arm-storage.ListAccountSasResponse>
          description: ''
      return:
        type:
          - Promise<azure-arm-storage.ListAccountSasResponse>
    package: azure-arm-storage
  - uid: azure-arm-storage.StorageAccounts.listAccountSAS_1
    name: >-
      listAccountSAS(string, string, AccountSasParameters,
      ServiceCallback<ListAccountSasResponse>)
    children: []
    type: method
    langs:
      - typeScript
    summary: List SAS credentials of a storage account.
    syntax:
      content: >-
        function listAccountSAS(resourceGroupName: string, accountName: string,
        parameters: AccountSasParameters, callback:
        ServiceCallback<ListAccountSasResponse>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: ''
        - id: accountName
          type:
            - string
          description: ''
        - id: parameters
          type:
            - azure-arm-storage.AccountSasParameters
          description: ''
        - id: callback
          type:
            - ServiceCallback<azure-arm-storage.ListAccountSasResponse>
          description: ''
      return:
        type:
          - Promise<azure-arm-storage.ListAccountSasResponse>
    package: azure-arm-storage
  - uid: azure-arm-storage.StorageAccounts.listAccountSASWithHttpOperationResponse
    name: >-
      listAccountSASWithHttpOperationResponse(string, string,
      AccountSasParameters, Object)
    children: []
    type: method
    langs:
      - typeScript
    summary: List SAS credentials of a storage account.
    syntax:
      content: >-
        function listAccountSASWithHttpOperationResponse(resourceGroupName:
        string, accountName: string, parameters: AccountSasParameters, options?:
        Object)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: parameters
          type:
            - azure-arm-storage.AccountSasParameters
          description: |
            The parameters to provide to list SAS credentials
            for the storage account.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<HttpOperationResponse<azure-arm-storage.ListAccountSasResponse>>
    package: azure-arm-storage
  - uid: azure-arm-storage.StorageAccounts.listByResourceGroup
    name: 'listByResourceGroup(string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Lists all the storage accounts available under the given resource group.
      Note that storage keys are not returned; use the ListKeys operation for
      this.
    syntax:
      content: >-
        function listByResourceGroup(resourceGroupName: string, options?:
        Object)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<azure-arm-storage.StorageAccountListResult>
    package: azure-arm-storage
  - uid: azure-arm-storage.StorageAccounts.listByResourceGroup_2
    name: >-
      listByResourceGroup(string, Object,
      ServiceCallback<StorageAccountListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Lists all the storage accounts available under the given resource group.
      Note that storage keys are not returned; use the ListKeys operation for
      this.
    syntax:
      content: >-
        function listByResourceGroup(resourceGroupName: string, options: Object,
        callback: ServiceCallback<StorageAccountListResult>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: ''
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - ServiceCallback<azure-arm-storage.StorageAccountListResult>
          description: ''
      return:
        type:
          - Promise<azure-arm-storage.StorageAccountListResult>
    package: azure-arm-storage
  - uid: azure-arm-storage.StorageAccounts.listByResourceGroup_1
    name: 'listByResourceGroup(string, ServiceCallback<StorageAccountListResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Lists all the storage accounts available under the given resource group.
      Note that storage keys are not returned; use the ListKeys operation for
      this.
    syntax:
      content: >-
        function listByResourceGroup(resourceGroupName: string, callback:
        ServiceCallback<StorageAccountListResult>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: ''
        - id: callback
          type:
            - ServiceCallback<azure-arm-storage.StorageAccountListResult>
          description: ''
      return:
        type:
          - Promise<azure-arm-storage.StorageAccountListResult>
    package: azure-arm-storage
  - uid: >-
      azure-arm-storage.StorageAccounts.listByResourceGroupWithHttpOperationResponse
    name: 'listByResourceGroupWithHttpOperationResponse(string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Lists all the storage accounts available under the given resource group.
      Note that storage keys are not returned; use the ListKeys operation for
      this.
    syntax:
      content: >-
        function listByResourceGroupWithHttpOperationResponse(resourceGroupName:
        string, options?: Object)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<HttpOperationResponse<azure-arm-storage.StorageAccountListResult>>
    package: azure-arm-storage
  - uid: azure-arm-storage.StorageAccounts.listKeys
    name: 'listKeys(string, string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Lists the access keys for the specified storage account.
    syntax:
      content: >-
        function listKeys(resourceGroupName: string, accountName: string,
        options?: Object)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<azure-arm-storage.StorageAccountListKeysResult>
    package: azure-arm-storage
  - uid: azure-arm-storage.StorageAccounts.listKeys_2
    name: >-
      listKeys(string, string, Object,
      ServiceCallback<StorageAccountListKeysResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: Lists the access keys for the specified storage account.
    syntax:
      content: >-
        function listKeys(resourceGroupName: string, accountName: string,
        options: Object, callback:
        ServiceCallback<StorageAccountListKeysResult>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: ''
        - id: accountName
          type:
            - string
          description: ''
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - ServiceCallback<azure-arm-storage.StorageAccountListKeysResult>
          description: ''
      return:
        type:
          - Promise<azure-arm-storage.StorageAccountListKeysResult>
    package: azure-arm-storage
  - uid: azure-arm-storage.StorageAccounts.listKeys_1
    name: 'listKeys(string, string, ServiceCallback<StorageAccountListKeysResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Lists the access keys for the specified storage account.
    syntax:
      content: >-
        function listKeys(resourceGroupName: string, accountName: string,
        callback: ServiceCallback<StorageAccountListKeysResult>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: ''
        - id: accountName
          type:
            - string
          description: ''
        - id: callback
          type:
            - ServiceCallback<azure-arm-storage.StorageAccountListKeysResult>
          description: ''
      return:
        type:
          - Promise<azure-arm-storage.StorageAccountListKeysResult>
    package: azure-arm-storage
  - uid: azure-arm-storage.StorageAccounts.listKeysWithHttpOperationResponse
    name: 'listKeysWithHttpOperationResponse(string, string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Lists the access keys for the specified storage account.
    syntax:
      content: >-
        function listKeysWithHttpOperationResponse(resourceGroupName: string,
        accountName: string, options?: Object)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<HttpOperationResponse<azure-arm-storage.StorageAccountListKeysResult>>
    package: azure-arm-storage
  - uid: azure-arm-storage.StorageAccounts.listServiceSAS
    name: 'listServiceSAS(string, string, ServiceSasParameters, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: List service SAS credentials of a specific resource.
    syntax:
      content: >-
        function listServiceSAS(resourceGroupName: string, accountName: string,
        parameters: ServiceSasParameters, options?: Object)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: parameters
          type:
            - azure-arm-storage.ServiceSasParameters
          description: |
            The parameters to provide to list service SAS
            credentials.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<azure-arm-storage.ListServiceSasResponse>
    package: azure-arm-storage
  - uid: azure-arm-storage.StorageAccounts.listServiceSAS_2
    name: >-
      listServiceSAS(string, string, ServiceSasParameters, Object,
      ServiceCallback<ListServiceSasResponse>)
    children: []
    type: method
    langs:
      - typeScript
    summary: List service SAS credentials of a specific resource.
    syntax:
      content: >-
        function listServiceSAS(resourceGroupName: string, accountName: string,
        parameters: ServiceSasParameters, options: Object, callback:
        ServiceCallback<ListServiceSasResponse>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: ''
        - id: accountName
          type:
            - string
          description: ''
        - id: parameters
          type:
            - azure-arm-storage.ServiceSasParameters
          description: ''
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - ServiceCallback<azure-arm-storage.ListServiceSasResponse>
          description: ''
      return:
        type:
          - Promise<azure-arm-storage.ListServiceSasResponse>
    package: azure-arm-storage
  - uid: azure-arm-storage.StorageAccounts.listServiceSAS_1
    name: >-
      listServiceSAS(string, string, ServiceSasParameters,
      ServiceCallback<ListServiceSasResponse>)
    children: []
    type: method
    langs:
      - typeScript
    summary: List service SAS credentials of a specific resource.
    syntax:
      content: >-
        function listServiceSAS(resourceGroupName: string, accountName: string,
        parameters: ServiceSasParameters, callback:
        ServiceCallback<ListServiceSasResponse>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: ''
        - id: accountName
          type:
            - string
          description: ''
        - id: parameters
          type:
            - azure-arm-storage.ServiceSasParameters
          description: ''
        - id: callback
          type:
            - ServiceCallback<azure-arm-storage.ListServiceSasResponse>
          description: ''
      return:
        type:
          - Promise<azure-arm-storage.ListServiceSasResponse>
    package: azure-arm-storage
  - uid: azure-arm-storage.StorageAccounts.listServiceSASWithHttpOperationResponse
    name: >-
      listServiceSASWithHttpOperationResponse(string, string,
      ServiceSasParameters, Object)
    children: []
    type: method
    langs:
      - typeScript
    summary: List service SAS credentials of a specific resource.
    syntax:
      content: >-
        function listServiceSASWithHttpOperationResponse(resourceGroupName:
        string, accountName: string, parameters: ServiceSasParameters, options?:
        Object)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: parameters
          type:
            - azure-arm-storage.ServiceSasParameters
          description: |
            The parameters to provide to list service SAS
            credentials.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<HttpOperationResponse<azure-arm-storage.ListServiceSasResponse>>
    package: azure-arm-storage
  - uid: azure-arm-storage.StorageAccounts.listWithHttpOperationResponse
    name: listWithHttpOperationResponse(Object)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Lists all the storage accounts available under the subscription. Note that
      storage keys are not returned; use the ListKeys operation for this.
    syntax:
      content: 'function listWithHttpOperationResponse(options?: Object)'
      parameters:
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<HttpOperationResponse<azure-arm-storage.StorageAccountListResult>>
    package: azure-arm-storage
  - uid: azure-arm-storage.StorageAccounts.regenerateKey
    name: 'regenerateKey(string, string, string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Regenerates one of the access keys for the specified storage account.
    syntax:
      content: >-
        function regenerateKey(resourceGroupName: string, accountName: string,
        keyName: string, options?: Object)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: keyName
          type:
            - string
          description: |
            The name of storage keys that want to be
            regenerated, possible vaules are key1, key2.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<azure-arm-storage.StorageAccountListKeysResult>
    package: azure-arm-storage
  - uid: azure-arm-storage.StorageAccounts.regenerateKey_2
    name: >-
      regenerateKey(string, string, string, Object,
      ServiceCallback<StorageAccountListKeysResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: Regenerates one of the access keys for the specified storage account.
    syntax:
      content: >-
        function regenerateKey(resourceGroupName: string, accountName: string,
        keyName: string, options: Object, callback:
        ServiceCallback<StorageAccountListKeysResult>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: ''
        - id: accountName
          type:
            - string
          description: ''
        - id: keyName
          type:
            - string
          description: ''
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - ServiceCallback<azure-arm-storage.StorageAccountListKeysResult>
          description: ''
      return:
        type:
          - Promise<azure-arm-storage.StorageAccountListKeysResult>
    package: azure-arm-storage
  - uid: azure-arm-storage.StorageAccounts.regenerateKey_1
    name: >-
      regenerateKey(string, string, string,
      ServiceCallback<StorageAccountListKeysResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: Regenerates one of the access keys for the specified storage account.
    syntax:
      content: >-
        function regenerateKey(resourceGroupName: string, accountName: string,
        keyName: string, callback:
        ServiceCallback<StorageAccountListKeysResult>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: ''
        - id: accountName
          type:
            - string
          description: ''
        - id: keyName
          type:
            - string
          description: ''
        - id: callback
          type:
            - ServiceCallback<azure-arm-storage.StorageAccountListKeysResult>
          description: ''
      return:
        type:
          - Promise<azure-arm-storage.StorageAccountListKeysResult>
    package: azure-arm-storage
  - uid: azure-arm-storage.StorageAccounts.regenerateKeyWithHttpOperationResponse
    name: 'regenerateKeyWithHttpOperationResponse(string, string, string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Regenerates one of the access keys for the specified storage account.
    syntax:
      content: >-
        function regenerateKeyWithHttpOperationResponse(resourceGroupName:
        string, accountName: string, keyName: string, options?: Object)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: keyName
          type:
            - string
          description: |
            The name of storage keys that want to be
            regenerated, possible vaules are key1, key2.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<HttpOperationResponse<azure-arm-storage.StorageAccountListKeysResult>>
    package: azure-arm-storage
  - uid: azure-arm-storage.StorageAccounts.update
    name: 'update(string, string, StorageAccountUpdateParameters, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The update operation can be used to update the SKU, encryption, access
      tier,

      or tags for a storage account. It can also be used to map the account to a

      custom domain. Only one custom domain is supported per storage account;
      the

      replacement/change of custom domain is not supported. In order to replace
      an

      old custom domain, the old value must be cleared/unregistered before a new

      value can be set. The update of multiple properties is supported. This
      call

      does not change the storage keys for the account. If you want to change
      the

      storage account keys, use the regenerate keys operation. The location and

      name of the storage account cannot be changed after creation.
    syntax:
      content: >-
        function update(resourceGroupName: string, accountName: string,
        parameters: StorageAccountUpdateParameters, options?: Object)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: parameters
          type:
            - azure-arm-storage.StorageAccountUpdateParameters
          description: |
            The parameters to provide for the updated
            account.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<azure-arm-storage.StorageAccount>
    package: azure-arm-storage
  - uid: azure-arm-storage.StorageAccounts.update_2
    name: >-
      update(string, string, StorageAccountUpdateParameters, Object,
      ServiceCallback<StorageAccount>)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The update operation can be used to update the SKU, encryption, access
      tier,

      or tags for a storage account. It can also be used to map the account to a

      custom domain. Only one custom domain is supported per storage account;
      the

      replacement/change of custom domain is not supported. In order to replace
      an

      old custom domain, the old value must be cleared/unregistered before a new

      value can be set. The update of multiple properties is supported. This
      call

      does not change the storage keys for the account. If you want to change
      the

      storage account keys, use the regenerate keys operation. The location and

      name of the storage account cannot be changed after creation.
    syntax:
      content: >-
        function update(resourceGroupName: string, accountName: string,
        parameters: StorageAccountUpdateParameters, options: Object, callback:
        ServiceCallback<StorageAccount>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: ''
        - id: accountName
          type:
            - string
          description: ''
        - id: parameters
          type:
            - azure-arm-storage.StorageAccountUpdateParameters
          description: ''
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - ServiceCallback<azure-arm-storage.StorageAccount>
          description: ''
      return:
        type:
          - Promise<azure-arm-storage.StorageAccount>
    package: azure-arm-storage
  - uid: azure-arm-storage.StorageAccounts.update_1
    name: >-
      update(string, string, StorageAccountUpdateParameters,
      ServiceCallback<StorageAccount>)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The update operation can be used to update the SKU, encryption, access
      tier,

      or tags for a storage account. It can also be used to map the account to a

      custom domain. Only one custom domain is supported per storage account;
      the

      replacement/change of custom domain is not supported. In order to replace
      an

      old custom domain, the old value must be cleared/unregistered before a new

      value can be set. The update of multiple properties is supported. This
      call

      does not change the storage keys for the account. If you want to change
      the

      storage account keys, use the regenerate keys operation. The location and

      name of the storage account cannot be changed after creation.
    syntax:
      content: >-
        function update(resourceGroupName: string, accountName: string,
        parameters: StorageAccountUpdateParameters, callback:
        ServiceCallback<StorageAccount>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: ''
        - id: accountName
          type:
            - string
          description: ''
        - id: parameters
          type:
            - azure-arm-storage.StorageAccountUpdateParameters
          description: ''
        - id: callback
          type:
            - ServiceCallback<azure-arm-storage.StorageAccount>
          description: ''
      return:
        type:
          - Promise<azure-arm-storage.StorageAccount>
    package: azure-arm-storage
  - uid: azure-arm-storage.StorageAccounts.updateWithHttpOperationResponse
    name: >-
      updateWithHttpOperationResponse(string, string,
      StorageAccountUpdateParameters, Object)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The update operation can be used to update the SKU, encryption, access
      tier,

      or tags for a storage account. It can also be used to map the account to a

      custom domain. Only one custom domain is supported per storage account;
      the

      replacement/change of custom domain is not supported. In order to replace
      an

      old custom domain, the old value must be cleared/unregistered before a new

      value can be set. The update of multiple properties is supported. This
      call

      does not change the storage keys for the account. If you want to change
      the

      storage account keys, use the regenerate keys operation. The location and

      name of the storage account cannot be changed after creation.
    syntax:
      content: >-
        function updateWithHttpOperationResponse(resourceGroupName: string,
        accountName: string, parameters: StorageAccountUpdateParameters,
        options?: Object)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: parameters
          type:
            - azure-arm-storage.StorageAccountUpdateParameters
          description: |
            The parameters to provide for the updated
            account.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<HttpOperationResponse<azure-arm-storage.StorageAccount>>
    package: azure-arm-storage
references:
  - uid: azure-arm-storage.StorageAccountCreateParameters
    name: StorageAccountCreateParameters
    spec.typeScript:
      - name: StorageAccountCreateParameters
        fullName: StorageAccountCreateParameters
        uid: azure-arm-storage.StorageAccountCreateParameters
  - uid: Promise<azure-arm-storage.StorageAccount>
    name: StorageAccount>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: StorageAccount
        fullName: StorageAccount
        uid: azure-arm-storage.StorageAccount
      - name: '>'
        fullName: '>'
  - uid: ServiceCallback<azure-arm-storage.StorageAccount>
    name: StorageAccount>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: StorageAccount
        fullName: StorageAccount
        uid: azure-arm-storage.StorageAccount
      - name: '>'
        fullName: '>'
  - uid: Promise<HttpOperationResponse<azure-arm-storage.StorageAccount>>
    name: StorageAccount>>
    spec.typeScript:
      - name: Promise<HttpOperationResponse<
        fullName: Promise<HttpOperationResponse<
      - name: StorageAccount
        fullName: StorageAccount
        uid: azure-arm-storage.StorageAccount
      - name: '>>'
        fullName: '>>'
  - uid: Promise<azure-arm-storage.CheckNameAvailabilityResult>
    name: CheckNameAvailabilityResult>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: CheckNameAvailabilityResult
        fullName: CheckNameAvailabilityResult
        uid: azure-arm-storage.CheckNameAvailabilityResult
      - name: '>'
        fullName: '>'
  - uid: ServiceCallback<azure-arm-storage.CheckNameAvailabilityResult>
    name: CheckNameAvailabilityResult>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: CheckNameAvailabilityResult
        fullName: CheckNameAvailabilityResult
        uid: azure-arm-storage.CheckNameAvailabilityResult
      - name: '>'
        fullName: '>'
  - uid: >-
      Promise<HttpOperationResponse<azure-arm-storage.CheckNameAvailabilityResult>>
    name: CheckNameAvailabilityResult>>
    spec.typeScript:
      - name: Promise<HttpOperationResponse<
        fullName: Promise<HttpOperationResponse<
      - name: CheckNameAvailabilityResult
        fullName: CheckNameAvailabilityResult
        uid: azure-arm-storage.CheckNameAvailabilityResult
      - name: '>>'
        fullName: '>>'
  - uid: Promise<azure-arm-storage.StorageAccountListResult>
    name: StorageAccountListResult>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: StorageAccountListResult
        fullName: StorageAccountListResult
        uid: azure-arm-storage.StorageAccountListResult
      - name: '>'
        fullName: '>'
  - uid: ServiceCallback<azure-arm-storage.StorageAccountListResult>
    name: StorageAccountListResult>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: StorageAccountListResult
        fullName: StorageAccountListResult
        uid: azure-arm-storage.StorageAccountListResult
      - name: '>'
        fullName: '>'
  - uid: azure-arm-storage.AccountSasParameters
    name: AccountSasParameters
    spec.typeScript:
      - name: AccountSasParameters
        fullName: AccountSasParameters
        uid: azure-arm-storage.AccountSasParameters
  - uid: Promise<azure-arm-storage.ListAccountSasResponse>
    name: ListAccountSasResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ListAccountSasResponse
        fullName: ListAccountSasResponse
        uid: azure-arm-storage.ListAccountSasResponse
      - name: '>'
        fullName: '>'
  - uid: ServiceCallback<azure-arm-storage.ListAccountSasResponse>
    name: ListAccountSasResponse>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: ListAccountSasResponse
        fullName: ListAccountSasResponse
        uid: azure-arm-storage.ListAccountSasResponse
      - name: '>'
        fullName: '>'
  - uid: Promise<HttpOperationResponse<azure-arm-storage.ListAccountSasResponse>>
    name: ListAccountSasResponse>>
    spec.typeScript:
      - name: Promise<HttpOperationResponse<
        fullName: Promise<HttpOperationResponse<
      - name: ListAccountSasResponse
        fullName: ListAccountSasResponse
        uid: azure-arm-storage.ListAccountSasResponse
      - name: '>>'
        fullName: '>>'
  - uid: Promise<HttpOperationResponse<azure-arm-storage.StorageAccountListResult>>
    name: StorageAccountListResult>>
    spec.typeScript:
      - name: Promise<HttpOperationResponse<
        fullName: Promise<HttpOperationResponse<
      - name: StorageAccountListResult
        fullName: StorageAccountListResult
        uid: azure-arm-storage.StorageAccountListResult
      - name: '>>'
        fullName: '>>'
  - uid: Promise<azure-arm-storage.StorageAccountListKeysResult>
    name: StorageAccountListKeysResult>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: StorageAccountListKeysResult
        fullName: StorageAccountListKeysResult
        uid: azure-arm-storage.StorageAccountListKeysResult
      - name: '>'
        fullName: '>'
  - uid: ServiceCallback<azure-arm-storage.StorageAccountListKeysResult>
    name: StorageAccountListKeysResult>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: StorageAccountListKeysResult
        fullName: StorageAccountListKeysResult
        uid: azure-arm-storage.StorageAccountListKeysResult
      - name: '>'
        fullName: '>'
  - uid: >-
      Promise<HttpOperationResponse<azure-arm-storage.StorageAccountListKeysResult>>
    name: StorageAccountListKeysResult>>
    spec.typeScript:
      - name: Promise<HttpOperationResponse<
        fullName: Promise<HttpOperationResponse<
      - name: StorageAccountListKeysResult
        fullName: StorageAccountListKeysResult
        uid: azure-arm-storage.StorageAccountListKeysResult
      - name: '>>'
        fullName: '>>'
  - uid: azure-arm-storage.ServiceSasParameters
    name: ServiceSasParameters
    spec.typeScript:
      - name: ServiceSasParameters
        fullName: ServiceSasParameters
        uid: azure-arm-storage.ServiceSasParameters
  - uid: Promise<azure-arm-storage.ListServiceSasResponse>
    name: ListServiceSasResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ListServiceSasResponse
        fullName: ListServiceSasResponse
        uid: azure-arm-storage.ListServiceSasResponse
      - name: '>'
        fullName: '>'
  - uid: ServiceCallback<azure-arm-storage.ListServiceSasResponse>
    name: ListServiceSasResponse>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: ListServiceSasResponse
        fullName: ListServiceSasResponse
        uid: azure-arm-storage.ListServiceSasResponse
      - name: '>'
        fullName: '>'
  - uid: Promise<HttpOperationResponse<azure-arm-storage.ListServiceSasResponse>>
    name: ListServiceSasResponse>>
    spec.typeScript:
      - name: Promise<HttpOperationResponse<
        fullName: Promise<HttpOperationResponse<
      - name: ListServiceSasResponse
        fullName: ListServiceSasResponse
        uid: azure-arm-storage.ListServiceSasResponse
      - name: '>>'
        fullName: '>>'
  - uid: azure-arm-storage.StorageAccountUpdateParameters
    name: StorageAccountUpdateParameters
    spec.typeScript:
      - name: StorageAccountUpdateParameters
        fullName: StorageAccountUpdateParameters
        uid: azure-arm-storage.StorageAccountUpdateParameters
