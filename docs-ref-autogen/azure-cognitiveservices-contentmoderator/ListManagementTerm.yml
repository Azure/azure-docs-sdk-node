### YamlMime:UniversalReference
items:
  - uid: azure-cognitiveservices-contentmoderator.ListManagementTerm
    name: ListManagementTerm
    fullName: ListManagementTerm
    children:
      - azure-cognitiveservices-contentmoderator.ListManagementTerm.addTerm
      - azure-cognitiveservices-contentmoderator.ListManagementTerm.addTerm_2
      - azure-cognitiveservices-contentmoderator.ListManagementTerm.addTerm_1
      - >-
        azure-cognitiveservices-contentmoderator.ListManagementTerm.addTermWithHttpOperationResponse
      - >-
        azure-cognitiveservices-contentmoderator.ListManagementTerm.deleteAllTerms
      - >-
        azure-cognitiveservices-contentmoderator.ListManagementTerm.deleteAllTerms_2
      - >-
        azure-cognitiveservices-contentmoderator.ListManagementTerm.deleteAllTerms_1
      - >-
        azure-cognitiveservices-contentmoderator.ListManagementTerm.deleteAllTermsWithHttpOperationResponse
      - azure-cognitiveservices-contentmoderator.ListManagementTerm.deleteTerm
      - azure-cognitiveservices-contentmoderator.ListManagementTerm.deleteTerm_2
      - azure-cognitiveservices-contentmoderator.ListManagementTerm.deleteTerm_1
      - >-
        azure-cognitiveservices-contentmoderator.ListManagementTerm.deleteTermWithHttpOperationResponse
      - azure-cognitiveservices-contentmoderator.ListManagementTerm.getAllTerms
      - >-
        azure-cognitiveservices-contentmoderator.ListManagementTerm.getAllTerms_2
      - >-
        azure-cognitiveservices-contentmoderator.ListManagementTerm.getAllTerms_1
      - >-
        azure-cognitiveservices-contentmoderator.ListManagementTerm.getAllTermsWithHttpOperationResponse
    langs:
      - typeScript
    type: interface
    summary: ''
    package: azure-cognitiveservices-contentmoderator
  - uid: azure-cognitiveservices-contentmoderator.ListManagementTerm.addTerm
    name: 'addTerm(string, string, string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Add a term to the term list with list Id equal to list Id passed.
    syntax:
      content: >-
        function addTerm(listId: string, term: string, language: string,
        options?: Object)
      parameters:
        - id: listId
          type:
            - string
          description: |
            List Id of the image list.
        - id: term
          type:
            - string
          description: |
            Term to be deleted
        - id: language
          type:
            - string
          description: |
            Language of the terms.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<any>
    package: azure-cognitiveservices-contentmoderator
  - uid: azure-cognitiveservices-contentmoderator.ListManagementTerm.addTerm_2
    name: 'addTerm(string, string, string, Object, ServiceCallback<any>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Add a term to the term list with list Id equal to list Id passed.
    syntax:
      content: >-
        function addTerm(listId: string, term: string, language: string,
        options: Object, callback: ServiceCallback<any>)
      parameters:
        - id: listId
          type:
            - string
          description: ''
        - id: term
          type:
            - string
          description: ''
        - id: language
          type:
            - string
          description: ''
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - ServiceCallback<any>
          description: ''
      return:
        type:
          - Promise<any>
    package: azure-cognitiveservices-contentmoderator
  - uid: azure-cognitiveservices-contentmoderator.ListManagementTerm.addTerm_1
    name: 'addTerm(string, string, string, ServiceCallback<any>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Add a term to the term list with list Id equal to list Id passed.
    syntax:
      content: >-
        function addTerm(listId: string, term: string, language: string,
        callback: ServiceCallback<any>)
      parameters:
        - id: listId
          type:
            - string
          description: ''
        - id: term
          type:
            - string
          description: ''
        - id: language
          type:
            - string
          description: ''
        - id: callback
          type:
            - ServiceCallback<any>
          description: ''
      return:
        type:
          - Promise<any>
    package: azure-cognitiveservices-contentmoderator
  - uid: >-
      azure-cognitiveservices-contentmoderator.ListManagementTerm.addTermWithHttpOperationResponse
    name: 'addTermWithHttpOperationResponse(string, string, string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Add a term to the term list with list Id equal to list Id passed.
    syntax:
      content: >-
        function addTermWithHttpOperationResponse(listId: string, term: string,
        language: string, options?: Object)
      parameters:
        - id: listId
          type:
            - string
          description: |
            List Id of the image list.
        - id: term
          type:
            - string
          description: |
            Term to be deleted
        - id: language
          type:
            - string
          description: |
            Language of the terms.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<HttpOperationResponse<any>>
    package: azure-cognitiveservices-contentmoderator
  - uid: azure-cognitiveservices-contentmoderator.ListManagementTerm.deleteAllTerms
    name: 'deleteAllTerms(string, string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Deletes all terms from the list with list Id equal to the list Id passed.
    syntax:
      content: >-
        function deleteAllTerms(listId: string, language: string, options?:
        Object)
      parameters:
        - id: listId
          type:
            - string
          description: |
            List Id of the image list.
        - id: language
          type:
            - string
          description: |
            Language of the terms.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<string>
    package: azure-cognitiveservices-contentmoderator
  - uid: >-
      azure-cognitiveservices-contentmoderator.ListManagementTerm.deleteAllTerms_2
    name: 'deleteAllTerms(string, string, Object, ServiceCallback<string>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Deletes all terms from the list with list Id equal to the list Id passed.
    syntax:
      content: >-
        function deleteAllTerms(listId: string, language: string, options:
        Object, callback: ServiceCallback<string>)
      parameters:
        - id: listId
          type:
            - string
          description: ''
        - id: language
          type:
            - string
          description: ''
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - ServiceCallback<string>
          description: ''
      return:
        type:
          - Promise<string>
    package: azure-cognitiveservices-contentmoderator
  - uid: >-
      azure-cognitiveservices-contentmoderator.ListManagementTerm.deleteAllTerms_1
    name: 'deleteAllTerms(string, string, ServiceCallback<string>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Deletes all terms from the list with list Id equal to the list Id passed.
    syntax:
      content: >-
        function deleteAllTerms(listId: string, language: string, callback:
        ServiceCallback<string>)
      parameters:
        - id: listId
          type:
            - string
          description: ''
        - id: language
          type:
            - string
          description: ''
        - id: callback
          type:
            - ServiceCallback<string>
          description: ''
      return:
        type:
          - Promise<string>
    package: azure-cognitiveservices-contentmoderator
  - uid: >-
      azure-cognitiveservices-contentmoderator.ListManagementTerm.deleteAllTermsWithHttpOperationResponse
    name: 'deleteAllTermsWithHttpOperationResponse(string, string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Deletes all terms from the list with list Id equal to the list Id passed.
    syntax:
      content: >-
        function deleteAllTermsWithHttpOperationResponse(listId: string,
        language: string, options?: Object)
      parameters:
        - id: listId
          type:
            - string
          description: |
            List Id of the image list.
        - id: language
          type:
            - string
          description: |
            Language of the terms.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<HttpOperationResponse<string>>
    package: azure-cognitiveservices-contentmoderator
  - uid: azure-cognitiveservices-contentmoderator.ListManagementTerm.deleteTerm
    name: 'deleteTerm(string, string, string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Deletes a term from the list with list Id equal to the list Id passed.
    syntax:
      content: >-
        function deleteTerm(listId: string, term: string, language: string,
        options?: Object)
      parameters:
        - id: listId
          type:
            - string
          description: |
            List Id of the image list.
        - id: term
          type:
            - string
          description: |
            Term to be deleted
        - id: language
          type:
            - string
          description: |
            Language of the terms.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<string>
    package: azure-cognitiveservices-contentmoderator
  - uid: azure-cognitiveservices-contentmoderator.ListManagementTerm.deleteTerm_2
    name: 'deleteTerm(string, string, string, Object, ServiceCallback<string>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Deletes a term from the list with list Id equal to the list Id passed.
    syntax:
      content: >-
        function deleteTerm(listId: string, term: string, language: string,
        options: Object, callback: ServiceCallback<string>)
      parameters:
        - id: listId
          type:
            - string
          description: ''
        - id: term
          type:
            - string
          description: ''
        - id: language
          type:
            - string
          description: ''
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - ServiceCallback<string>
          description: ''
      return:
        type:
          - Promise<string>
    package: azure-cognitiveservices-contentmoderator
  - uid: azure-cognitiveservices-contentmoderator.ListManagementTerm.deleteTerm_1
    name: 'deleteTerm(string, string, string, ServiceCallback<string>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Deletes a term from the list with list Id equal to the list Id passed.
    syntax:
      content: >-
        function deleteTerm(listId: string, term: string, language: string,
        callback: ServiceCallback<string>)
      parameters:
        - id: listId
          type:
            - string
          description: ''
        - id: term
          type:
            - string
          description: ''
        - id: language
          type:
            - string
          description: ''
        - id: callback
          type:
            - ServiceCallback<string>
          description: ''
      return:
        type:
          - Promise<string>
    package: azure-cognitiveservices-contentmoderator
  - uid: >-
      azure-cognitiveservices-contentmoderator.ListManagementTerm.deleteTermWithHttpOperationResponse
    name: 'deleteTermWithHttpOperationResponse(string, string, string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Deletes a term from the list with list Id equal to the list Id passed.
    syntax:
      content: >-
        function deleteTermWithHttpOperationResponse(listId: string, term:
        string, language: string, options?: Object)
      parameters:
        - id: listId
          type:
            - string
          description: |
            List Id of the image list.
        - id: term
          type:
            - string
          description: |
            Term to be deleted
        - id: language
          type:
            - string
          description: |
            Language of the terms.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<HttpOperationResponse<string>>
    package: azure-cognitiveservices-contentmoderator
  - uid: azure-cognitiveservices-contentmoderator.ListManagementTerm.getAllTerms
    name: 'getAllTerms(string, string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Gets all terms from the list with list Id equal to the list Id passed.
    syntax:
      content: 'function getAllTerms(listId: string, language: string, options?: Object)'
      parameters:
        - id: listId
          type:
            - string
          description: |
            List Id of the image list.
        - id: language
          type:
            - string
          description: |
            Language of the terms.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<azure-cognitiveservices-contentmoderator.Terms>
    package: azure-cognitiveservices-contentmoderator
  - uid: azure-cognitiveservices-contentmoderator.ListManagementTerm.getAllTerms_2
    name: 'getAllTerms(string, string, Object, ServiceCallback<Terms>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Gets all terms from the list with list Id equal to the list Id passed.
    syntax:
      content: >-
        function getAllTerms(listId: string, language: string, options: Object,
        callback: ServiceCallback<Terms>)
      parameters:
        - id: listId
          type:
            - string
          description: ''
        - id: language
          type:
            - string
          description: ''
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - ServiceCallback<azure-cognitiveservices-contentmoderator.Terms>
          description: ''
      return:
        type:
          - Promise<azure-cognitiveservices-contentmoderator.Terms>
    package: azure-cognitiveservices-contentmoderator
  - uid: azure-cognitiveservices-contentmoderator.ListManagementTerm.getAllTerms_1
    name: 'getAllTerms(string, string, ServiceCallback<Terms>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Gets all terms from the list with list Id equal to the list Id passed.
    syntax:
      content: >-
        function getAllTerms(listId: string, language: string, callback:
        ServiceCallback<Terms>)
      parameters:
        - id: listId
          type:
            - string
          description: ''
        - id: language
          type:
            - string
          description: ''
        - id: callback
          type:
            - ServiceCallback<azure-cognitiveservices-contentmoderator.Terms>
          description: ''
      return:
        type:
          - Promise<azure-cognitiveservices-contentmoderator.Terms>
    package: azure-cognitiveservices-contentmoderator
  - uid: >-
      azure-cognitiveservices-contentmoderator.ListManagementTerm.getAllTermsWithHttpOperationResponse
    name: 'getAllTermsWithHttpOperationResponse(string, string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Gets all terms from the list with list Id equal to the list Id passed.
    syntax:
      content: >-
        function getAllTermsWithHttpOperationResponse(listId: string, language:
        string, options?: Object)
      parameters:
        - id: listId
          type:
            - string
          description: |
            List Id of the image list.
        - id: language
          type:
            - string
          description: |
            Language of the terms.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<HttpOperationResponse<azure-cognitiveservices-contentmoderator.Terms>>
    package: azure-cognitiveservices-contentmoderator
references:
  - uid: Promise<azure-cognitiveservices-contentmoderator.Terms>
    name: Terms>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: Terms
        fullName: Terms
        uid: azure-cognitiveservices-contentmoderator.Terms
      - name: '>'
        fullName: '>'
  - uid: ServiceCallback<azure-cognitiveservices-contentmoderator.Terms>
    name: Terms>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: Terms
        fullName: Terms
        uid: azure-cognitiveservices-contentmoderator.Terms
      - name: '>'
        fullName: '>'
  - uid: >-
      Promise<HttpOperationResponse<azure-cognitiveservices-contentmoderator.Terms>>
    name: Terms>>
    spec.typeScript:
      - name: Promise<HttpOperationResponse<
        fullName: Promise<HttpOperationResponse<
      - name: Terms
        fullName: Terms
        uid: azure-cognitiveservices-contentmoderator.Terms
      - name: '>>'
        fullName: '>>'
