### YamlMime:UniversalReference
items:
  - uid: msal.UserAgentApplication
    name: UserAgentApplication
    fullName: UserAgentApplication
    children:
      - msal.UserAgentApplication.acquireTokenPopup
      - msal.UserAgentApplication.acquireTokenPopup_1
      - msal.UserAgentApplication.acquireTokenPopup_2
      - msal.UserAgentApplication.acquireTokenPopup_3
      - msal.UserAgentApplication.acquireTokenRedirect
      - msal.UserAgentApplication.acquireTokenRedirect_1
      - msal.UserAgentApplication.acquireTokenRedirect_2
      - msal.UserAgentApplication.acquireTokenRedirect_3
      - msal.UserAgentApplication.acquireTokenSilent
      - msal.UserAgentApplication.authority
      - msal.UserAgentApplication.cacheLocation
      - msal.UserAgentApplication.clientId
      - msal.UserAgentApplication.getAllUsers
      - msal.UserAgentApplication.getUser
      - msal.UserAgentApplication.getUserState
      - msal.UserAgentApplication.isCallback
      - msal.UserAgentApplication.loadFrameTimeout
      - msal.UserAgentApplication.loginInProgress
      - msal.UserAgentApplication.loginPopup
      - msal.UserAgentApplication.loginRedirect
      - msal.UserAgentApplication.logout
      - msal.UserAgentApplication.constructor
      - msal.UserAgentApplication.validateAuthority
    langs:
      - typeScript
    type: class
    summary: ''
    package: msal
  - uid: msal.UserAgentApplication.acquireTokenPopup
    name: acquireTokenPopup(Array<string>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function acquireTokenPopup(scopes: Array<string>)'
      parameters:
        - id: scopes
          type:
            - Array<string>
          description: ''
      return:
        type:
          - Promise<string>
    package: msal
  - uid: msal.UserAgentApplication.acquireTokenPopup_1
    name: 'acquireTokenPopup(Array<string>, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function acquireTokenPopup(scopes: Array<string>, authority: string)'
      parameters:
        - id: scopes
          type:
            - Array<string>
          description: ''
        - id: authority
          type:
            - string
          description: ''
      return:
        type:
          - Promise<string>
    package: msal
  - uid: msal.UserAgentApplication.acquireTokenPopup_2
    name: 'acquireTokenPopup(Array<string>, string, User)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function acquireTokenPopup(scopes: Array<string>, authority: string,
        user: User)
      parameters:
        - id: scopes
          type:
            - Array<string>
          description: ''
        - id: authority
          type:
            - string
          description: ''
        - id: user
          type:
            - msal.User
          description: ''
      return:
        type:
          - Promise<string>
    package: msal
  - uid: msal.UserAgentApplication.acquireTokenPopup_3
    name: 'acquireTokenPopup(Array<string>, string, User, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function acquireTokenPopup(scopes: Array<string>, authority: string,
        user: User, extraQueryParameters: string)
      parameters:
        - id: scopes
          type:
            - Array<string>
          description: ''
        - id: authority
          type:
            - string
          description: ''
        - id: user
          type:
            - msal.User
          description: ''
        - id: extraQueryParameters
          type:
            - string
          description: ''
      return:
        type:
          - Promise<string>
    package: msal
  - uid: msal.UserAgentApplication.acquireTokenRedirect
    name: acquireTokenRedirect(Array<string>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function acquireTokenRedirect(scopes: Array<string>)'
      parameters:
        - id: scopes
          type:
            - Array<string>
          description: ''
    package: msal
  - uid: msal.UserAgentApplication.acquireTokenRedirect_1
    name: 'acquireTokenRedirect(Array<string>, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function acquireTokenRedirect(scopes: Array<string>, authority: string)'
      parameters:
        - id: scopes
          type:
            - Array<string>
          description: ''
        - id: authority
          type:
            - string
          description: ''
    package: msal
  - uid: msal.UserAgentApplication.acquireTokenRedirect_2
    name: 'acquireTokenRedirect(Array<string>, string, User)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function acquireTokenRedirect(scopes: Array<string>, authority: string,
        user: User)
      parameters:
        - id: scopes
          type:
            - Array<string>
          description: ''
        - id: authority
          type:
            - string
          description: ''
        - id: user
          type:
            - msal.User
          description: ''
    package: msal
  - uid: msal.UserAgentApplication.acquireTokenRedirect_3
    name: 'acquireTokenRedirect(Array<string>, string, User, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function acquireTokenRedirect(scopes: Array<string>, authority: string,
        user: User, extraQueryParameters: string)
      parameters:
        - id: scopes
          type:
            - Array<string>
          description: ''
        - id: authority
          type:
            - string
          description: ''
        - id: user
          type:
            - msal.User
          description: ''
        - id: extraQueryParameters
          type:
            - string
          description: ''
    package: msal
  - uid: msal.UserAgentApplication.acquireTokenSilent
    name: 'acquireTokenSilent(Array<string>, string, User, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function acquireTokenSilent(scopes: Array<string>, authority?: string,
        user?: User, extraQueryParameters?: string)
      parameters:
        - id: scopes
          type:
            - Array<string>
          description: ''
        - id: authority
          type:
            - string
          description: ''
          optional: true
        - id: user
          type:
            - msal.User
          description: ''
          optional: true
        - id: extraQueryParameters
          type:
            - string
          description: ''
          optional: true
      return:
        type:
          - Promise<string>
    package: msal
  - uid: msal.UserAgentApplication.authority
    name: authority
    fullName: authority
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'authority: string'
      return:
        type:
          - string
    package: msal
  - uid: msal.UserAgentApplication.cacheLocation
    name: cacheLocation
    fullName: cacheLocation
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'cacheLocation: string'
      return:
        type:
          - string
    package: msal
  - uid: msal.UserAgentApplication.clientId
    name: clientId
    fullName: clientId
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'clientId: string'
      return:
        type:
          - string
    package: msal
  - uid: msal.UserAgentApplication.getAllUsers
    name: getAllUsers()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getAllUsers()
      parameters: []
      return:
        type:
          - Array<msal.User>
    package: msal
  - uid: msal.UserAgentApplication.getUser
    name: getUser()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getUser()
      parameters: []
      return:
        type:
          - msal.User
    package: msal
  - uid: msal.UserAgentApplication.getUserState
    name: getUserState(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getUserState(state: string)'
      parameters:
        - id: state
          type:
            - string
          description: ''
      return:
        type:
          - string
    package: msal
  - uid: msal.UserAgentApplication.isCallback
    name: isCallback(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function isCallback(hash: string)'
      parameters:
        - id: hash
          type:
            - string
          description: ''
      return:
        type:
          - boolean
    package: msal
  - uid: msal.UserAgentApplication.loadFrameTimeout
    name: loadFrameTimeout
    fullName: loadFrameTimeout
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'loadFrameTimeout: number'
      return:
        type:
          - number
    package: msal
  - uid: msal.UserAgentApplication.loginInProgress
    name: loginInProgress()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function loginInProgress()
      parameters: []
      return:
        type:
          - boolean
    package: msal
  - uid: msal.UserAgentApplication.loginPopup
    name: 'loginPopup(Array<string>, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function loginPopup(scopes: Array<string>, extraQueryParameters?:
        string)
      parameters:
        - id: scopes
          type:
            - Array<string>
          description: ''
        - id: extraQueryParameters
          type:
            - string
          description: ''
          optional: true
      return:
        type:
          - Promise<string>
    package: msal
  - uid: msal.UserAgentApplication.loginRedirect
    name: 'loginRedirect(Array<string>, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function loginRedirect(scopes?: Array<string>, extraQueryParameters?:
        string)
      parameters:
        - id: scopes
          type:
            - Array<string>
          description: ''
          optional: true
        - id: extraQueryParameters
          type:
            - string
          description: ''
          optional: true
    package: msal
  - uid: msal.UserAgentApplication.logout
    name: logout()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function logout()
      parameters: []
    package: msal
  - uid: msal.UserAgentApplication.constructor
    name: 'UserAgentApplication(string, string | null, tokenReceivedCallback, Object)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        new UserAgentApplication(clientId: string, authority: string | null,
        tokenReceivedCallback: tokenReceivedCallback, options?: Object)
      parameters:
        - id: clientId
          type:
            - string
          description: ''
        - id: authority
          type:
            - string | null
          description: ''
        - id: tokenReceivedCallback
          type:
            - tokenReceivedCallback
          description: ''
        - id: options
          type:
            - Object
          description: ''
          optional: true
    package: msal
  - uid: msal.UserAgentApplication.validateAuthority
    name: validateAuthority
    fullName: validateAuthority
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'validateAuthority: boolean'
      return:
        type:
          - boolean
    package: msal
references:
  - uid: msal.User
    name: User
    spec.typeScript:
      - name: User
        fullName: User
        uid: msal.User
  - uid: Array<msal.User>
    name: User>
    spec.typeScript:
      - name: Array<
        fullName: Array<
      - name: User
        fullName: User
        uid: msal.User
      - name: '>'
        fullName: '>'
