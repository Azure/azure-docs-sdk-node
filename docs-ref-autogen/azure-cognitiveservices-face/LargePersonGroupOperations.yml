### YamlMime:UniversalReference
items:
  - uid: azure-cognitiveservices-face.LargePersonGroupOperations
    name: LargePersonGroupOperations
    fullName: LargePersonGroupOperations
    children:
      - azure-cognitiveservices-face.LargePersonGroupOperations.create
      - azure-cognitiveservices-face.LargePersonGroupOperations.create_2
      - azure-cognitiveservices-face.LargePersonGroupOperations.create_1
      - >-
        azure-cognitiveservices-face.LargePersonGroupOperations.createWithHttpOperationResponse
      - azure-cognitiveservices-face.LargePersonGroupOperations.deleteMethod
      - azure-cognitiveservices-face.LargePersonGroupOperations.deleteMethod_2
      - azure-cognitiveservices-face.LargePersonGroupOperations.deleteMethod_1
      - >-
        azure-cognitiveservices-face.LargePersonGroupOperations.deleteMethodWithHttpOperationResponse
      - azure-cognitiveservices-face.LargePersonGroupOperations.get
      - azure-cognitiveservices-face.LargePersonGroupOperations.get_2
      - azure-cognitiveservices-face.LargePersonGroupOperations.get_1
      - >-
        azure-cognitiveservices-face.LargePersonGroupOperations.getTrainingStatus
      - >-
        azure-cognitiveservices-face.LargePersonGroupOperations.getTrainingStatus_2
      - >-
        azure-cognitiveservices-face.LargePersonGroupOperations.getTrainingStatus_1
      - >-
        azure-cognitiveservices-face.LargePersonGroupOperations.getTrainingStatusWithHttpOperationResponse
      - >-
        azure-cognitiveservices-face.LargePersonGroupOperations.getWithHttpOperationResponse
      - azure-cognitiveservices-face.LargePersonGroupOperations.list
      - azure-cognitiveservices-face.LargePersonGroupOperations.list_2
      - azure-cognitiveservices-face.LargePersonGroupOperations.list_1
      - >-
        azure-cognitiveservices-face.LargePersonGroupOperations.listWithHttpOperationResponse
      - azure-cognitiveservices-face.LargePersonGroupOperations.train
      - azure-cognitiveservices-face.LargePersonGroupOperations.train_2
      - azure-cognitiveservices-face.LargePersonGroupOperations.train_1
      - >-
        azure-cognitiveservices-face.LargePersonGroupOperations.trainWithHttpOperationResponse
      - azure-cognitiveservices-face.LargePersonGroupOperations.update
      - azure-cognitiveservices-face.LargePersonGroupOperations.update_2
      - azure-cognitiveservices-face.LargePersonGroupOperations.update_1
      - >-
        azure-cognitiveservices-face.LargePersonGroupOperations.updateWithHttpOperationResponse
    langs:
      - typeScript
    type: interface
    summary: ''
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.LargePersonGroupOperations.create
    name: 'create(string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Create a new large person group with specified largePersonGroupId, name
      and

      user-provided userData.
    syntax:
      content: 'function create(largePersonGroupId: string, options?: Object)'
      parameters:
        - id: largePersonGroupId
          type:
            - string
          description: |
            Id referencing a particular large person
            group.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<void>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.LargePersonGroupOperations.create_2
    name: 'create(string, Object, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Create a new large person group with specified largePersonGroupId, name
      and

      user-provided userData.
    syntax:
      content: >-
        function create(largePersonGroupId: string, options: Object, callback:
        ServiceCallback<void>)
      parameters:
        - id: largePersonGroupId
          type:
            - string
          description: ''
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.LargePersonGroupOperations.create_1
    name: 'create(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Create a new large person group with specified largePersonGroupId, name
      and

      user-provided userData.
    syntax:
      content: >-
        function create(largePersonGroupId: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: largePersonGroupId
          type:
            - string
          description: ''
        - id: callback
          type:
            - ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: azure-cognitiveservices-face
  - uid: >-
      azure-cognitiveservices-face.LargePersonGroupOperations.createWithHttpOperationResponse
    name: 'createWithHttpOperationResponse(string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Create a new large person group with specified largePersonGroupId, name
      and

      user-provided userData.
    syntax:
      content: >-
        function createWithHttpOperationResponse(largePersonGroupId: string,
        options?: Object)
      parameters:
        - id: largePersonGroupId
          type:
            - string
          description: |
            Id referencing a particular large person
            group.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<HttpOperationResponse<void>>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.LargePersonGroupOperations.deleteMethod
    name: 'deleteMethod(string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Delete an existing large person group. Persisted face features of all
      people

      in the large person group will also be deleted.
    syntax:
      content: 'function deleteMethod(largePersonGroupId: string, options?: Object)'
      parameters:
        - id: largePersonGroupId
          type:
            - string
          description: |
            Id referencing a particular large person
            group.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<void>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.LargePersonGroupOperations.deleteMethod_2
    name: 'deleteMethod(string, Object, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Delete an existing large person group. Persisted face features of all
      people

      in the large person group will also be deleted.
    syntax:
      content: >-
        function deleteMethod(largePersonGroupId: string, options: Object,
        callback: ServiceCallback<void>)
      parameters:
        - id: largePersonGroupId
          type:
            - string
          description: ''
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.LargePersonGroupOperations.deleteMethod_1
    name: 'deleteMethod(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Delete an existing large person group. Persisted face features of all
      people

      in the large person group will also be deleted.
    syntax:
      content: >-
        function deleteMethod(largePersonGroupId: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: largePersonGroupId
          type:
            - string
          description: ''
        - id: callback
          type:
            - ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: azure-cognitiveservices-face
  - uid: >-
      azure-cognitiveservices-face.LargePersonGroupOperations.deleteMethodWithHttpOperationResponse
    name: 'deleteMethodWithHttpOperationResponse(string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Delete an existing large person group. Persisted face features of all
      people

      in the large person group will also be deleted.
    syntax:
      content: >-
        function deleteMethodWithHttpOperationResponse(largePersonGroupId:
        string, options?: Object)
      parameters:
        - id: largePersonGroupId
          type:
            - string
          description: |
            Id referencing a particular large person
            group.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<HttpOperationResponse<void>>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.LargePersonGroupOperations.get
    name: 'get(string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Retrieve the information of a large person group, including its name and
      userData.
    syntax:
      content: 'function get(largePersonGroupId: string, options?: Object)'
      parameters:
        - id: largePersonGroupId
          type:
            - string
          description: |
            Id referencing a particular large person
            group.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<azure-cognitiveservices-face.LargePersonGroup>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.LargePersonGroupOperations.get_2
    name: 'get(string, Object, ServiceCallback<LargePersonGroup>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Retrieve the information of a large person group, including its name and
      userData.
    syntax:
      content: >-
        function get(largePersonGroupId: string, options: Object, callback:
        ServiceCallback<LargePersonGroup>)
      parameters:
        - id: largePersonGroupId
          type:
            - string
          description: ''
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - ServiceCallback<azure-cognitiveservices-face.LargePersonGroup>
          description: ''
      return:
        type:
          - Promise<azure-cognitiveservices-face.LargePersonGroup>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.LargePersonGroupOperations.get_1
    name: 'get(string, ServiceCallback<LargePersonGroup>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Retrieve the information of a large person group, including its name and
      userData.
    syntax:
      content: >-
        function get(largePersonGroupId: string, callback:
        ServiceCallback<LargePersonGroup>)
      parameters:
        - id: largePersonGroupId
          type:
            - string
          description: ''
        - id: callback
          type:
            - ServiceCallback<azure-cognitiveservices-face.LargePersonGroup>
          description: ''
      return:
        type:
          - Promise<azure-cognitiveservices-face.LargePersonGroup>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.LargePersonGroupOperations.getTrainingStatus
    name: 'getTrainingStatus(string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Retrieve the training status of a large person group (completed or
      ongoing).
    syntax:
      content: 'function getTrainingStatus(largePersonGroupId: string, options?: Object)'
      parameters:
        - id: largePersonGroupId
          type:
            - string
          description: |
            Id referencing a particular large person
            group.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<azure-cognitiveservices-face.TrainingStatus>
    package: azure-cognitiveservices-face
  - uid: >-
      azure-cognitiveservices-face.LargePersonGroupOperations.getTrainingStatus_2
    name: 'getTrainingStatus(string, Object, ServiceCallback<TrainingStatus>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Retrieve the training status of a large person group (completed or
      ongoing).
    syntax:
      content: >-
        function getTrainingStatus(largePersonGroupId: string, options: Object,
        callback: ServiceCallback<TrainingStatus>)
      parameters:
        - id: largePersonGroupId
          type:
            - string
          description: ''
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - ServiceCallback<azure-cognitiveservices-face.TrainingStatus>
          description: ''
      return:
        type:
          - Promise<azure-cognitiveservices-face.TrainingStatus>
    package: azure-cognitiveservices-face
  - uid: >-
      azure-cognitiveservices-face.LargePersonGroupOperations.getTrainingStatus_1
    name: 'getTrainingStatus(string, ServiceCallback<TrainingStatus>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Retrieve the training status of a large person group (completed or
      ongoing).
    syntax:
      content: >-
        function getTrainingStatus(largePersonGroupId: string, callback:
        ServiceCallback<TrainingStatus>)
      parameters:
        - id: largePersonGroupId
          type:
            - string
          description: ''
        - id: callback
          type:
            - ServiceCallback<azure-cognitiveservices-face.TrainingStatus>
          description: ''
      return:
        type:
          - Promise<azure-cognitiveservices-face.TrainingStatus>
    package: azure-cognitiveservices-face
  - uid: >-
      azure-cognitiveservices-face.LargePersonGroupOperations.getTrainingStatusWithHttpOperationResponse
    name: 'getTrainingStatusWithHttpOperationResponse(string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Retrieve the training status of a large person group (completed or
      ongoing).
    syntax:
      content: >-
        function getTrainingStatusWithHttpOperationResponse(largePersonGroupId:
        string, options?: Object)
      parameters:
        - id: largePersonGroupId
          type:
            - string
          description: |
            Id referencing a particular large person
            group.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<HttpOperationResponse<azure-cognitiveservices-face.TrainingStatus>>
    package: azure-cognitiveservices-face
  - uid: >-
      azure-cognitiveservices-face.LargePersonGroupOperations.getWithHttpOperationResponse
    name: 'getWithHttpOperationResponse(string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Retrieve the information of a large person group, including its name and
      userData.
    syntax:
      content: >-
        function getWithHttpOperationResponse(largePersonGroupId: string,
        options?: Object)
      parameters:
        - id: largePersonGroupId
          type:
            - string
          description: |
            Id referencing a particular large person
            group.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<HttpOperationResponse<azure-cognitiveservices-face.LargePersonGroup>>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.LargePersonGroupOperations.list
    name: list(Object)
    children: []
    type: method
    langs:
      - typeScript
    summary: List large person groups and their information.
    syntax:
      content: 'function list(options?: Object)'
      parameters:
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - 'Promise<azure-cognitiveservices-face.LargePersonGroup[]>'
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.LargePersonGroupOperations.list_2
    name: 'list(Object, ServiceCallback<LargePersonGroup[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: List large person groups and their information.
    syntax:
      content: >-
        function list(options: Object, callback:
        ServiceCallback<LargePersonGroup[]>)
      parameters:
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - 'ServiceCallback<azure-cognitiveservices-face.LargePersonGroup[]>'
          description: ''
      return:
        type:
          - 'Promise<azure-cognitiveservices-face.LargePersonGroup[]>'
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.LargePersonGroupOperations.list_1
    name: 'list(ServiceCallback<LargePersonGroup[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: List large person groups and their information.
    syntax:
      content: 'function list(callback: ServiceCallback<LargePersonGroup[]>)'
      parameters:
        - id: callback
          type:
            - 'ServiceCallback<azure-cognitiveservices-face.LargePersonGroup[]>'
          description: ''
      return:
        type:
          - 'Promise<azure-cognitiveservices-face.LargePersonGroup[]>'
    package: azure-cognitiveservices-face
  - uid: >-
      azure-cognitiveservices-face.LargePersonGroupOperations.listWithHttpOperationResponse
    name: listWithHttpOperationResponse(Object)
    children: []
    type: method
    langs:
      - typeScript
    summary: List large person groups and their information.
    syntax:
      content: 'function listWithHttpOperationResponse(options?: Object)'
      parameters:
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<HttpOperationResponse<azure-cognitiveservices-face.LargePersonGroup[]>>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.LargePersonGroupOperations.train
    name: 'train(string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Queue a large person group training task, the training task may not be
      started immediately.
    syntax:
      content: 'function train(largePersonGroupId: string, options?: Object)'
      parameters:
        - id: largePersonGroupId
          type:
            - string
          description: |
            Id referencing a particular large person
            group.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<void>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.LargePersonGroupOperations.train_2
    name: 'train(string, Object, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Queue a large person group training task, the training task may not be
      started immediately.
    syntax:
      content: >-
        function train(largePersonGroupId: string, options: Object, callback:
        ServiceCallback<void>)
      parameters:
        - id: largePersonGroupId
          type:
            - string
          description: ''
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.LargePersonGroupOperations.train_1
    name: 'train(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Queue a large person group training task, the training task may not be
      started immediately.
    syntax:
      content: >-
        function train(largePersonGroupId: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: largePersonGroupId
          type:
            - string
          description: ''
        - id: callback
          type:
            - ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: azure-cognitiveservices-face
  - uid: >-
      azure-cognitiveservices-face.LargePersonGroupOperations.trainWithHttpOperationResponse
    name: 'trainWithHttpOperationResponse(string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Queue a large person group training task, the training task may not be
      started immediately.
    syntax:
      content: >-
        function trainWithHttpOperationResponse(largePersonGroupId: string,
        options?: Object)
      parameters:
        - id: largePersonGroupId
          type:
            - string
          description: |
            Id referencing a particular large person
            group.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<HttpOperationResponse<void>>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.LargePersonGroupOperations.update
    name: 'update(string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Update an existing large person group's display name and userData. The
      properties which does not appear in request body will not be updated.
    syntax:
      content: 'function update(largePersonGroupId: string, options?: Object)'
      parameters:
        - id: largePersonGroupId
          type:
            - string
          description: |
            Id referencing a particular large person
            group.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<void>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.LargePersonGroupOperations.update_2
    name: 'update(string, Object, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Update an existing large person group's display name and userData. The
      properties which does not appear in request body will not be updated.
    syntax:
      content: >-
        function update(largePersonGroupId: string, options: Object, callback:
        ServiceCallback<void>)
      parameters:
        - id: largePersonGroupId
          type:
            - string
          description: ''
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.LargePersonGroupOperations.update_1
    name: 'update(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Update an existing large person group's display name and userData. The
      properties which does not appear in request body will not be updated.
    syntax:
      content: >-
        function update(largePersonGroupId: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: largePersonGroupId
          type:
            - string
          description: ''
        - id: callback
          type:
            - ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: azure-cognitiveservices-face
  - uid: >-
      azure-cognitiveservices-face.LargePersonGroupOperations.updateWithHttpOperationResponse
    name: 'updateWithHttpOperationResponse(string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Update an existing large person group's display name and userData. The
      properties which does not appear in request body will not be updated.
    syntax:
      content: >-
        function updateWithHttpOperationResponse(largePersonGroupId: string,
        options?: Object)
      parameters:
        - id: largePersonGroupId
          type:
            - string
          description: |
            Id referencing a particular large person
            group.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<HttpOperationResponse<void>>
    package: azure-cognitiveservices-face
references:
  - uid: Promise<azure-cognitiveservices-face.LargePersonGroup>
    name: LargePersonGroup>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: LargePersonGroup
        fullName: LargePersonGroup
        uid: azure-cognitiveservices-face.LargePersonGroup
      - name: '>'
        fullName: '>'
  - uid: ServiceCallback<azure-cognitiveservices-face.LargePersonGroup>
    name: LargePersonGroup>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: LargePersonGroup
        fullName: LargePersonGroup
        uid: azure-cognitiveservices-face.LargePersonGroup
      - name: '>'
        fullName: '>'
  - uid: Promise<azure-cognitiveservices-face.TrainingStatus>
    name: TrainingStatus>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: TrainingStatus
        fullName: TrainingStatus
        uid: azure-cognitiveservices-face.TrainingStatus
      - name: '>'
        fullName: '>'
  - uid: ServiceCallback<azure-cognitiveservices-face.TrainingStatus>
    name: TrainingStatus>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: TrainingStatus
        fullName: TrainingStatus
        uid: azure-cognitiveservices-face.TrainingStatus
      - name: '>'
        fullName: '>'
  - uid: >-
      Promise<HttpOperationResponse<azure-cognitiveservices-face.TrainingStatus>>
    name: TrainingStatus>>
    spec.typeScript:
      - name: Promise<HttpOperationResponse<
        fullName: Promise<HttpOperationResponse<
      - name: TrainingStatus
        fullName: TrainingStatus
        uid: azure-cognitiveservices-face.TrainingStatus
      - name: '>>'
        fullName: '>>'
  - uid: >-
      Promise<HttpOperationResponse<azure-cognitiveservices-face.LargePersonGroup>>
    name: LargePersonGroup>>
    spec.typeScript:
      - name: Promise<HttpOperationResponse<
        fullName: Promise<HttpOperationResponse<
      - name: LargePersonGroup
        fullName: LargePersonGroup
        uid: azure-cognitiveservices-face.LargePersonGroup
      - name: '>>'
        fullName: '>>'
  - uid: 'Promise<azure-cognitiveservices-face.LargePersonGroup[]>'
    name: 'LargePersonGroup[]>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: LargePersonGroup
        fullName: LargePersonGroup
        uid: azure-cognitiveservices-face.LargePersonGroup
      - name: '[]>'
        fullName: '[]>'
  - uid: 'ServiceCallback<azure-cognitiveservices-face.LargePersonGroup[]>'
    name: 'LargePersonGroup[]>'
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: LargePersonGroup
        fullName: LargePersonGroup
        uid: azure-cognitiveservices-face.LargePersonGroup
      - name: '[]>'
        fullName: '[]>'
  - uid: >-
      Promise<HttpOperationResponse<azure-cognitiveservices-face.LargePersonGroup[]>>
    name: 'LargePersonGroup[]>>'
    spec.typeScript:
      - name: Promise<HttpOperationResponse<
        fullName: Promise<HttpOperationResponse<
      - name: LargePersonGroup
        fullName: LargePersonGroup
        uid: azure-cognitiveservices-face.LargePersonGroup
      - name: '[]>>'
        fullName: '[]>>'
