### YamlMime:TSType
name: DurableOrchestrationContext
uid: durable-functions.DurableOrchestrationContext
package: durable-functions
summary: >-
  Provides functionality for application code implementing an orchestration
  operation.
fullName: DurableOrchestrationContext
remarks: ''
isDeprecated: false
type: class
properties:
  - name: currentUtcDateTime
    uid: durable-functions.DurableOrchestrationContext.currentUtcDateTime
    package: durable-functions
    summary: |-
      Gets the current date/time in a way that is safe for use by orchestrator
      functions.

      This date/time value is derived from the orchestration history. It
      always returns the same value at specific points in the orchestrator
      function code, making it deterministic and safe for replay.
    fullName: currentUtcDateTime
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'currentUtcDateTime: Date'
      return:
        description: ''
        type: Date
  - name: customStatus
    uid: durable-functions.DurableOrchestrationContext.customStatus
    package: durable-functions
    summary: Custom status for the orchestration
    fullName: customStatus
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'customStatus: unknown'
      return:
        description: ''
        type: unknown
  - name: instanceId
    uid: durable-functions.DurableOrchestrationContext.instanceId
    package: durable-functions
    summary: |-
      The ID of the current orchestration instance.

      The instance ID is generated and fixed when the orchestrator function is
      scheduled. It can be either auto-generated, in which case it is
      formatted as a GUID, or it can be user-specified with any format.
    fullName: instanceId
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'instanceId: string'
      return:
        description: ''
        type: string
  - name: isReplaying
    uid: durable-functions.DurableOrchestrationContext.isReplaying
    package: durable-functions
    summary: |-
      Gets a value indicating whether the orchestrator function is currently
      replaying itself.

      This property is useful when there is logic that needs to run only when
      the orchestrator function is _not_ replaying. For example, certain types
      of application logging may become too noisy when duplicated as part of
      orchestrator function replay. The orchestrator code could check to see
      whether the function is being replayed and then issue the log statements
      when this value is `false`.
    fullName: isReplaying
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'isReplaying: boolean'
      return:
        description: ''
        type: boolean
  - name: parentInstanceId
    uid: durable-functions.DurableOrchestrationContext.parentInstanceId
    package: durable-functions
    summary: |-
      The ID of the parent orchestration of the current sub-orchestration
      instance. The value will be available only in sub-orchestrations.

      The parent instance ID is generated and fixed when the parent
      orchestrator function is scheduled. It can be either auto-generated, in
      which case it is formatted as a GUID, or it can be user-specified with
      any format.
    fullName: parentInstanceId
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'parentInstanceId: undefined | string'
      return:
        description: ''
        type: undefined | string
  - name: Task
    uid: durable-functions.DurableOrchestrationContext.Task
    package: durable-functions
    summary: >-
      Entry point for methods to handle collections of

      pending actions represented by
      [Task](xref:durable-functions.DurableOrchestrationContext.Task) instances.

      For use in parallelization operations.
    fullName: Task
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'Task: { all: (tasks: Task[]) => Task, any: (tasks: Task[]) => Task }'
      return:
        description: ''
        type: '{ all: (tasks: Task[]) =&gt; Task, any: (tasks: Task[]) =&gt; Task }'
methods:
  - name: callActivity(string, unknown)
    uid: durable-functions.DurableOrchestrationContext.callActivity
    package: durable-functions
    summary: Schedules an activity function named `name` for execution.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function callActivity(name: string, input?: unknown): Task'
      parameters:
        - id: name
          type: string
          description: The name of the activity function to call.
        - id: input
          type: unknown
          description: |-
            The JSON-serializable input to pass to the activity
            function.
      return:
        description: |-
          A Durable Task that completes when the called activity
          function completes or fails.
        type: <xref uid="durable-functions.Task" />
  - name: callActivityWithRetry(string, RetryOptions, unknown)
    uid: durable-functions.DurableOrchestrationContext.callActivityWithRetry
    package: durable-functions
    summary: |-
      Schedules an activity function named `name` for execution with
      retry options.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function callActivityWithRetry(name: string, retryOptions: RetryOptions,
        input?: unknown): Task
      parameters:
        - id: name
          type: string
          description: The name of the activity function to call.
        - id: retryOptions
          type: <xref uid="durable-functions.RetryOptions" />
          description: The retry options for the activity function.
        - id: input
          type: unknown
          description: |-
            The JSON-serializable input to pass to the activity
            function.
      return:
        description: ''
        type: <xref uid="durable-functions.Task" />
  - name: callEntity(EntityId, string, unknown)
    uid: durable-functions.DurableOrchestrationContext.callEntity
    package: durable-functions
    summary: |-
      Calls an operation on an entity, passing an argument, and waits for it
      to complete.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function callEntity(entityId: EntityId, operationName: string,
        operationInput?: unknown): Task
      parameters:
        - id: entityId
          type: <xref uid="durable-functions.EntityId" />
          description: The target entity.
        - id: operationName
          type: string
          description: The name of the operation.
        - id: operationInput
          type: unknown
          description: The input for the operation.
      return:
        description: ''
        type: <xref uid="durable-functions.Task" />
  - name: callHttp(CallHttpOptions)
    uid: durable-functions.DurableOrchestrationContext.callHttp
    package: durable-functions
    summary: Schedules a durable HTTP call to the specified endpoint.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function callHttp(options: CallHttpOptions): Task'
      parameters:
        - id: options
          type: <xref uid="durable-functions.CallHttpOptions" />
          description: The HTTP options object
      return:
        description: ''
        type: <xref uid="durable-functions.Task" />
  - name: callSubOrchestrator(string, unknown, string)
    uid: durable-functions.DurableOrchestrationContext.callSubOrchestrator
    package: durable-functions
    summary: Schedules an orchestration function named `name` for execution.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function callSubOrchestrator(name: string, input?: unknown, instanceId?:
        string): Task
      parameters:
        - id: name
          type: string
          description: The name of the orchestrator function to call.
        - id: input
          type: unknown
          description: |-
            The JSON-serializable input to pass to the orchestrator
            function.
        - id: instanceId
          type: string
          description: >-
            A unique ID to use for the sub-orchestration instance.

            If `instanceId` is not specified, the extension will generate an id
            in

            the format `<calling orchestrator instance ID>:<#>`
      return:
        description: ''
        type: <xref uid="durable-functions.Task" />
  - name: callSubOrchestratorWithRetry(string, RetryOptions, unknown, string)
    uid: durable-functions.DurableOrchestrationContext.callSubOrchestratorWithRetry
    package: durable-functions
    summary: |-
      Schedules an orchestrator function named `name` for execution with retry
      options.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function callSubOrchestratorWithRetry(name: string, retryOptions:
        RetryOptions, input?: unknown, instanceId?: string): Task
      parameters:
        - id: name
          type: string
          description: The name of the orchestrator function to call.
        - id: retryOptions
          type: <xref uid="durable-functions.RetryOptions" />
          description: The retry options for the orchestrator function.
        - id: input
          type: unknown
          description: |-
            The JSON-serializable input to pass to the orchestrator
            function.
        - id: instanceId
          type: string
          description: A unique ID to use for the sub-orchestration instance.
      return:
        description: ''
        type: <xref uid="durable-functions.Task" />
  - name: continueAsNew(unknown)
    uid: durable-functions.DurableOrchestrationContext.continueAsNew
    package: durable-functions
    summary: Restarts the orchestration by clearing its history.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function continueAsNew(input: unknown)'
      parameters:
        - id: input
          type: unknown
          description: The JSON-serializable data to re-initialize the instance with.
  - name: createTimer(Date)
    uid: durable-functions.DurableOrchestrationContext.createTimer
    package: durable-functions
    summary: |-
      Creates a durable timer that expires at a specified time.

      All durable timers created using this method must either expire or be
      cancelled using `TimerTask.cancel()` before the orchestrator
      function completes. Otherwise, the underlying framework will keep the
      instance alive until the timer expires.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function createTimer(fireAt: Date): TimerTask'
      parameters:
        - id: fireAt
          type: Date
          description: The time at which the timer should expire.
      return:
        description: A TimerTask that completes when the durable timer expires.
        type: <xref uid="durable-functions.TimerTask" />
  - name: getInput<T>()
    uid: durable-functions.DurableOrchestrationContext.getInput
    package: durable-functions
    summary: |-
      Gets the input of the current orchestrator function as a deserialized
      value.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getInput<T>(): T'
      return:
        description: ''
        type: T
  - name: newGuid(string)
    uid: durable-functions.DurableOrchestrationContext.newGuid
    package: durable-functions
    summary: |-
      Creates a new GUID that is safe for replay within an orchestration or
      operation.

      The default implementation of this method creates a name-based UUID
      using the algorithm from RFC 4122 §4.3. The name input used to generate
      this value is a combination of the orchestration instance ID and an
      internally managed sequence number.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function newGuid(input: string): string'
      parameters:
        - id: input
          type: string
          description: used to generate the unique GUID
      return:
        description: ''
        type: string
  - name: setCustomStatus(unknown)
    uid: durable-functions.DurableOrchestrationContext.setCustomStatus
    package: durable-functions
    summary: |-
      Sets the JSON-serializable status of the current orchestrator function.

      The `customStatusObject` value is serialized to JSON and will be made
      available to the orchestration status query APIs. The serialized JSON
      value must not exceed 16 KB of UTF-16 encoded text.

      The serialized `customStatusObject` value will be made available to the
      aforementioned APIs after the next `yield` or `return` statement.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function setCustomStatus(customStatusObject: unknown)'
      parameters:
        - id: customStatusObject
          type: unknown
          description: |-
            The JSON-serializable value to use as the
            orchestrator function's custom status.
  - name: signalEntity(EntityId, string, unknown)
    uid: durable-functions.DurableOrchestrationContext.signalEntity
    package: durable-functions
    summary: |-
      Send a signal operation to a Durable Entity, passing an argument, without
      waiting for a response. A fire-and-forget operation.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function signalEntity(entityId: EntityId, operationName: string,
        operationInput?: unknown)
      parameters:
        - id: entityId
          type: <xref uid="durable-functions.EntityId" />
          description: ID of the target entity.
        - id: operationName
          type: string
          description: The name of the operation.
        - id: operationInput
          type: unknown
          description: (optional) input for the operation.
  - name: waitForExternalEvent(string)
    uid: durable-functions.DurableOrchestrationContext.waitForExternalEvent
    package: durable-functions
    summary: |-
      Waits asynchronously for an event to be raised with the name `name` and
      returns the event data.

      External clients can raise events to a waiting orchestration instance
      using `raiseEvent()`.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function waitForExternalEvent(name: string): Task'
      parameters:
        - id: name
          type: string
          description: The name of the external event to wait for.
      return:
        description: |-
          a Task that completes when an external event of
           the specified name is received
        type: <xref uid="durable-functions.Task" />
