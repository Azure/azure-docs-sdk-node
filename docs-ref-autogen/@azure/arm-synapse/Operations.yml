### YamlMime:UniversalReference
items:
  - uid: '@azure/arm-synapse.Operations'
    name: Operations
    fullName: Operations
    children:
      - '@azure/arm-synapse.Operations.checkNameAvailability'
      - '@azure/arm-synapse.Operations.checkNameAvailability_2'
      - '@azure/arm-synapse.Operations.checkNameAvailability_1'
      - '@azure/arm-synapse.Operations.getAzureAsyncHeaderResult'
      - '@azure/arm-synapse.Operations.getAzureAsyncHeaderResult_2'
      - '@azure/arm-synapse.Operations.getAzureAsyncHeaderResult_1'
      - '@azure/arm-synapse.Operations.getLocationHeaderResult'
      - '@azure/arm-synapse.Operations.getLocationHeaderResult_2'
      - '@azure/arm-synapse.Operations.getLocationHeaderResult_1'
      - '@azure/arm-synapse.Operations.list'
      - '@azure/arm-synapse.Operations.list_2'
      - '@azure/arm-synapse.Operations.list_1'
      - '@azure/arm-synapse.Operations.constructor'
    langs:
      - typeScript
    type: class
    summary: Class representing a Operations.
    package: '@azure/arm-synapse'
  - uid: '@azure/arm-synapse.Operations.checkNameAvailability'
    name: >-
      checkNameAvailability(CheckNameAvailabilityRequest,
      msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: Check whether a workspace name is available
    syntax:
      content: >-
        function checkNameAvailability(request: CheckNameAvailabilityRequest,
        options?: msRest.RequestOptionsBase)
      parameters:
        - id: request
          type:
            - '@azure/arm-synapse.CheckNameAvailabilityRequest'
          description: The check request
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.OperationsCheckNameAvailabilityResponse>
        description: Promise<Models.OperationsCheckNameAvailabilityResponse>
    package: '@azure/arm-synapse'
  - uid: '@azure/arm-synapse.Operations.checkNameAvailability_2'
    name: >-
      checkNameAvailability(CheckNameAvailabilityRequest, RequestOptionsBase,
      ServiceCallback<CheckNameAvailabilityResponse>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function checkNameAvailability(request: CheckNameAvailabilityRequest,
        options: RequestOptionsBase, callback:
        ServiceCallback<CheckNameAvailabilityResponse>)
      parameters:
        - id: request
          type:
            - '@azure/arm-synapse.CheckNameAvailabilityRequest'
          description: The check request
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/arm-synapse.CheckNameAvailabilityResponse>
          description: |
            The callback
    package: '@azure/arm-synapse'
  - uid: '@azure/arm-synapse.Operations.checkNameAvailability_1'
    name: >-
      checkNameAvailability(CheckNameAvailabilityRequest,
      ServiceCallback<CheckNameAvailabilityResponse>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function checkNameAvailability(request: CheckNameAvailabilityRequest,
        callback: ServiceCallback<CheckNameAvailabilityResponse>)
      parameters:
        - id: request
          type:
            - '@azure/arm-synapse.CheckNameAvailabilityRequest'
          description: The check request
        - id: callback
          type:
            - ServiceCallback<@azure/arm-synapse.CheckNameAvailabilityResponse>
          description: |
            The callback
    package: '@azure/arm-synapse'
  - uid: '@azure/arm-synapse.Operations.getAzureAsyncHeaderResult'
    name: >-
      getAzureAsyncHeaderResult(string, string, string,
      msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: Get the status of an operation
    syntax:
      content: >-
        function getAzureAsyncHeaderResult(resourceGroupName: string,
        workspaceName: string, operationId: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: workspaceName
          type:
            - string
          description: The name of the workspace
        - id: operationId
          type:
            - string
          description: Operation ID
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.OperationsGetAzureAsyncHeaderResultResponse>
        description: Promise<Models.OperationsGetAzureAsyncHeaderResultResponse>
    package: '@azure/arm-synapse'
  - uid: '@azure/arm-synapse.Operations.getAzureAsyncHeaderResult_2'
    name: >-
      getAzureAsyncHeaderResult(string, string, string, RequestOptionsBase,
      ServiceCallback<any>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getAzureAsyncHeaderResult(resourceGroupName: string,
        workspaceName: string, operationId: string, options: RequestOptionsBase,
        callback: ServiceCallback<any>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: workspaceName
          type:
            - string
          description: The name of the workspace
        - id: operationId
          type:
            - string
          description: Operation ID
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<any>
          description: |
            The callback
    package: '@azure/arm-synapse'
  - uid: '@azure/arm-synapse.Operations.getAzureAsyncHeaderResult_1'
    name: 'getAzureAsyncHeaderResult(string, string, string, ServiceCallback<any>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getAzureAsyncHeaderResult(resourceGroupName: string,
        workspaceName: string, operationId: string, callback:
        ServiceCallback<any>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: workspaceName
          type:
            - string
          description: The name of the workspace
        - id: operationId
          type:
            - string
          description: Operation ID
        - id: callback
          type:
            - ServiceCallback<any>
          description: |
            The callback
    package: '@azure/arm-synapse'
  - uid: '@azure/arm-synapse.Operations.getLocationHeaderResult'
    name: 'getLocationHeaderResult(string, string, string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Get the result of an operation
    syntax:
      content: >-
        function getLocationHeaderResult(resourceGroupName: string,
        workspaceName: string, operationId: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: workspaceName
          type:
            - string
          description: The name of the workspace
        - id: operationId
          type:
            - string
          description: Operation ID
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/arm-synapse'
  - uid: '@azure/arm-synapse.Operations.getLocationHeaderResult_2'
    name: >-
      getLocationHeaderResult(string, string, string, RequestOptionsBase,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getLocationHeaderResult(resourceGroupName: string,
        workspaceName: string, operationId: string, options: RequestOptionsBase,
        callback: ServiceCallback<void>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: workspaceName
          type:
            - string
          description: The name of the workspace
        - id: operationId
          type:
            - string
          description: Operation ID
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/arm-synapse'
  - uid: '@azure/arm-synapse.Operations.getLocationHeaderResult_1'
    name: 'getLocationHeaderResult(string, string, string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getLocationHeaderResult(resourceGroupName: string,
        workspaceName: string, operationId: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: workspaceName
          type:
            - string
          description: The name of the workspace
        - id: operationId
          type:
            - string
          description: Operation ID
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/arm-synapse'
  - uid: '@azure/arm-synapse.Operations.list'
    name: list(msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: Get all available operations
    syntax:
      content: 'function list(options?: msRest.RequestOptionsBase)'
      parameters:
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.OperationsListResponse>
        description: Promise<Models.OperationsListResponse>
    package: '@azure/arm-synapse'
  - uid: '@azure/arm-synapse.Operations.list_2'
    name: 'list(RequestOptionsBase, ServiceCallback<AvailableRpOperation[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function list(options: RequestOptionsBase, callback:
        ServiceCallback<AvailableRpOperation[]>)
      parameters:
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - 'ServiceCallback<@azure/arm-synapse.AvailableRpOperation[]>'
          description: |
            The callback
    package: '@azure/arm-synapse'
  - uid: '@azure/arm-synapse.Operations.list_1'
    name: 'list(ServiceCallback<AvailableRpOperation[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function list(callback: ServiceCallback<AvailableRpOperation[]>)'
      parameters:
        - id: callback
          type:
            - 'ServiceCallback<@azure/arm-synapse.AvailableRpOperation[]>'
          description: |
            The callback
    package: '@azure/arm-synapse'
  - uid: '@azure/arm-synapse.Operations.constructor'
    name: Operations(SynapseManagementClientContext)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Create a Operations.
    syntax:
      content: 'new Operations(client: SynapseManagementClientContext)'
      parameters:
        - id: client
          type:
            - '@azure/arm-synapse.SynapseManagementClientContext'
          description: |
            Reference to the service client.
    package: '@azure/arm-synapse'
references:
  - uid: '@azure/arm-synapse.SynapseManagementClientContext'
    name: SynapseManagementClientContext
    spec.typeScript:
      - name: SynapseManagementClientContext
        fullName: SynapseManagementClientContext
        uid: '@azure/arm-synapse.SynapseManagementClientContext'
  - uid: '@azure/arm-synapse.CheckNameAvailabilityRequest'
    name: CheckNameAvailabilityRequest
    spec.typeScript:
      - name: CheckNameAvailabilityRequest
        fullName: CheckNameAvailabilityRequest
        uid: '@azure/arm-synapse.CheckNameAvailabilityRequest'
  - uid: ServiceCallback<@azure/arm-synapse.CheckNameAvailabilityResponse>
    name: CheckNameAvailabilityResponse>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: CheckNameAvailabilityResponse
        fullName: CheckNameAvailabilityResponse
        uid: '@azure/arm-synapse.CheckNameAvailabilityResponse'
      - name: '>'
        fullName: '>'
  - uid: 'ServiceCallback<@azure/arm-synapse.AvailableRpOperation[]>'
    name: 'AvailableRpOperation[]>'
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: AvailableRpOperation
        fullName: AvailableRpOperation
        uid: '@azure/arm-synapse.AvailableRpOperation'
      - name: '[]>'
        fullName: '[]>'
