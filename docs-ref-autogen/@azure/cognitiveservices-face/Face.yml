### YamlMime:UniversalReference
items:
  - uid: '@azure/cognitiveservices-face.Face'
    name: Face
    fullName: Face
    children:
      - '@azure/cognitiveservices-face.Face.detectWithStream_2'
      - '@azure/cognitiveservices-face.Face.detectWithStream'
      - '@azure/cognitiveservices-face.Face.detectWithStream_1'
      - '@azure/cognitiveservices-face.Face.detectWithUrl_2'
      - '@azure/cognitiveservices-face.Face.detectWithUrl'
      - '@azure/cognitiveservices-face.Face.detectWithUrl_1'
      - '@azure/cognitiveservices-face.Face.constructor'
      - '@azure/cognitiveservices-face.Face.findSimilar_2'
      - '@azure/cognitiveservices-face.Face.findSimilar'
      - '@azure/cognitiveservices-face.Face.findSimilar_1'
      - '@azure/cognitiveservices-face.Face.group'
      - '@azure/cognitiveservices-face.Face.group_2'
      - '@azure/cognitiveservices-face.Face.group_1'
      - '@azure/cognitiveservices-face.Face.identify_2'
      - '@azure/cognitiveservices-face.Face.identify'
      - '@azure/cognitiveservices-face.Face.identify_1'
      - '@azure/cognitiveservices-face.Face.verifyFaceToFace'
      - '@azure/cognitiveservices-face.Face.verifyFaceToFace_2'
      - '@azure/cognitiveservices-face.Face.verifyFaceToFace_1'
      - '@azure/cognitiveservices-face.Face.verifyFaceToPerson_2'
      - '@azure/cognitiveservices-face.Face.verifyFaceToPerson'
      - '@azure/cognitiveservices-face.Face.verifyFaceToPerson_1'
    langs:
      - typeScript
    type: class
    summary: Class representing a Face.
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.detectWithStream_2'
    name: >-
      detectWithStream(msRest.HttpRequestBody,
      FaceDetectWithStreamOptionalParams, ServiceCallback<DetectedFace[]>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function detectWithStream(image: msRest.HttpRequestBody, options:
        FaceDetectWithStreamOptionalParams, callback:
        ServiceCallback<DetectedFace[]>)
      parameters:
        - id: image
          type:
            - msRest.HttpRequestBody
          description: An image stream.
        - id: options
          type:
            - '@azure/cognitiveservices-face.FaceDetectWithStreamOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - 'ServiceCallback<@azure/cognitiveservices-face.DetectedFace[]>'
          description: |
            The callback
      return:
        type:
          - Promise<Models.FaceDetectWithStreamResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.detectWithStream'
    name: >-
      detectWithStream(msRest.HttpRequestBody,
      Models.FaceDetectWithStreamOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Detect human faces in an image and returns face locations, and optionally
      with faceIds,

      landmarks, and attributes.
    syntax:
      content: >-
        function detectWithStream(image: msRest.HttpRequestBody, options?:
        Models.FaceDetectWithStreamOptionalParams)
      parameters:
        - id: image
          type:
            - msRest.HttpRequestBody
          description: An image stream.
        - id: options
          type:
            - Models.FaceDetectWithStreamOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FaceDetectWithStreamResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.detectWithStream_1'
    name: 'detectWithStream(msRest.HttpRequestBody, ServiceCallback<DetectedFace[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function detectWithStream(image: msRest.HttpRequestBody, callback:
        ServiceCallback<DetectedFace[]>)
      parameters:
        - id: image
          type:
            - msRest.HttpRequestBody
          description: An image stream.
        - id: callback
          type:
            - 'ServiceCallback<@azure/cognitiveservices-face.DetectedFace[]>'
          description: |
            The callback
      return:
        type:
          - Promise<Models.FaceDetectWithStreamResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.detectWithUrl_2'
    name: >-
      detectWithUrl(string, FaceDetectWithUrlOptionalParams,
      ServiceCallback<DetectedFace[]>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function detectWithUrl(url: string, options:
        FaceDetectWithUrlOptionalParams, callback:
        ServiceCallback<DetectedFace[]>)
      parameters:
        - id: url
          type:
            - string
          description: Publicly reachable URL of an image
        - id: options
          type:
            - '@azure/cognitiveservices-face.FaceDetectWithUrlOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - 'ServiceCallback<@azure/cognitiveservices-face.DetectedFace[]>'
          description: |
            The callback
      return:
        type:
          - Promise<Models.FaceDetectWithUrlResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.detectWithUrl'
    name: 'detectWithUrl(string, Models.FaceDetectWithUrlOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Detect human faces in an image and returns face locations, and optionally
      with faceIds,

      landmarks, and attributes.
    syntax:
      content: >-
        function detectWithUrl(url: string, options?:
        Models.FaceDetectWithUrlOptionalParams)
      parameters:
        - id: url
          type:
            - string
          description: Publicly reachable URL of an image
        - id: options
          type:
            - Models.FaceDetectWithUrlOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FaceDetectWithUrlResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.detectWithUrl_1'
    name: 'detectWithUrl(string, ServiceCallback<DetectedFace[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function detectWithUrl(url: string, callback:
        ServiceCallback<DetectedFace[]>)
      parameters:
        - id: url
          type:
            - string
          description: Publicly reachable URL of an image
        - id: callback
          type:
            - 'ServiceCallback<@azure/cognitiveservices-face.DetectedFace[]>'
          description: |
            The callback
      return:
        type:
          - Promise<Models.FaceDetectWithUrlResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.constructor'
    name: Face(FaceClientContext)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Create a Face.
    syntax:
      content: 'new Face(client: FaceClientContext)'
      parameters:
        - id: client
          type:
            - '@azure/cognitiveservices-face.FaceClientContext'
          description: |
            Reference to the service client.
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.findSimilar_2'
    name: >-
      findSimilar(string, FaceFindSimilarOptionalParams,
      ServiceCallback<SimilarFace[]>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function findSimilar(faceId: string, options:
        FaceFindSimilarOptionalParams, callback: ServiceCallback<SimilarFace[]>)
      parameters:
        - id: faceId
          type:
            - string
          description: >-
            FaceId of the query face. User needs to call Face - Detect first to
            get a valid

            faceId. Note that this faceId is not persisted and will expire 24
            hours after the detection call
        - id: options
          type:
            - '@azure/cognitiveservices-face.FaceFindSimilarOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - 'ServiceCallback<@azure/cognitiveservices-face.SimilarFace[]>'
          description: |
            The callback
      return:
        type:
          - Promise<Models.FaceFindSimilarResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.findSimilar'
    name: 'findSimilar(string, Models.FaceFindSimilarOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Given query face's faceId, find the similar-looking faces from a faceId
      array, a face list or a

      large face list.
    syntax:
      content: >-
        function findSimilar(faceId: string, options?:
        Models.FaceFindSimilarOptionalParams)
      parameters:
        - id: faceId
          type:
            - string
          description: >-
            FaceId of the query face. User needs to call Face - Detect first to
            get a valid

            faceId. Note that this faceId is not persisted and will expire 24
            hours after the detection call
        - id: options
          type:
            - Models.FaceFindSimilarOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FaceFindSimilarResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.findSimilar_1'
    name: 'findSimilar(string, ServiceCallback<SimilarFace[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function findSimilar(faceId: string, callback:
        ServiceCallback<SimilarFace[]>)
      parameters:
        - id: faceId
          type:
            - string
          description: >-
            FaceId of the query face. User needs to call Face - Detect first to
            get a valid

            faceId. Note that this faceId is not persisted and will expire 24
            hours after the detection call
        - id: callback
          type:
            - 'ServiceCallback<@azure/cognitiveservices-face.SimilarFace[]>'
          description: |
            The callback
      return:
        type:
          - Promise<Models.FaceFindSimilarResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.group'
    name: 'group(string[], msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Divide candidate faces into groups based on face similarity.
    syntax:
      content: 'function group(faceIds: string[], options?: msRest.RequestOptionsBase)'
      parameters:
        - id: faceIds
          type:
            - 'string[]'
          description: >-
            Array of candidate faceId created by Face - Detect. The maximum is
            1000 faces
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FaceGroupResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.group_2'
    name: 'group(string[], RequestOptionsBase, ServiceCallback<GroupResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function group(faceIds: string[], options: RequestOptionsBase, callback:
        ServiceCallback<GroupResult>)
      parameters:
        - id: faceIds
          type:
            - 'string[]'
          description: >-
            Array of candidate faceId created by Face - Detect. The maximum is
            1000 faces
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.GroupResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.FaceGroupResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.group_1'
    name: 'group(string[], ServiceCallback<GroupResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function group(faceIds: string[], callback:
        ServiceCallback<GroupResult>)
      parameters:
        - id: faceIds
          type:
            - 'string[]'
          description: >-
            Array of candidate faceId created by Face - Detect. The maximum is
            1000 faces
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.GroupResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.FaceGroupResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.identify_2'
    name: >-
      identify(string[], FaceIdentifyOptionalParams,
      ServiceCallback<IdentifyResult[]>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function identify(faceIds: string[], options:
        FaceIdentifyOptionalParams, callback: ServiceCallback<IdentifyResult[]>)
      parameters:
        - id: faceIds
          type:
            - 'string[]'
          description: >-
            Array of query faces faceIds, created by the Face - Detect. Each of
            the faces are

            identified independently. The valid number of faceIds is between [1,
            10].
        - id: options
          type:
            - '@azure/cognitiveservices-face.FaceIdentifyOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - 'ServiceCallback<@azure/cognitiveservices-face.IdentifyResult[]>'
          description: |
            The callback
      return:
        type:
          - Promise<Models.FaceIdentifyResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.identify'
    name: 'identify(string[], Models.FaceIdentifyOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      1-to-many identification to find the closest matches of the specific query
      person face from a

      person group or large person group.
    syntax:
      content: >-
        function identify(faceIds: string[], options?:
        Models.FaceIdentifyOptionalParams)
      parameters:
        - id: faceIds
          type:
            - 'string[]'
          description: >-
            Array of query faces faceIds, created by the Face - Detect. Each of
            the faces are

            identified independently. The valid number of faceIds is between [1,
            10].
        - id: options
          type:
            - Models.FaceIdentifyOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FaceIdentifyResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.identify_1'
    name: 'identify(string[], ServiceCallback<IdentifyResult[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function identify(faceIds: string[], callback:
        ServiceCallback<IdentifyResult[]>)
      parameters:
        - id: faceIds
          type:
            - 'string[]'
          description: >-
            Array of query faces faceIds, created by the Face - Detect. Each of
            the faces are

            identified independently. The valid number of faceIds is between [1,
            10].
        - id: callback
          type:
            - 'ServiceCallback<@azure/cognitiveservices-face.IdentifyResult[]>'
          description: |
            The callback
      return:
        type:
          - Promise<Models.FaceIdentifyResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.verifyFaceToFace'
    name: 'verifyFaceToFace(string, string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Verify whether two faces belong to a same person or whether one face
      belongs to a person.
    syntax:
      content: >-
        function verifyFaceToFace(faceId1: string, faceId2: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: faceId1
          type:
            - string
          description: 'FaceId of the first face, comes from Face - Detect'
        - id: faceId2
          type:
            - string
          description: 'FaceId of the second face, comes from Face - Detect'
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FaceVerifyFaceToFaceResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.verifyFaceToFace_2'
    name: >-
      verifyFaceToFace(string, string, RequestOptionsBase,
      ServiceCallback<VerifyResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function verifyFaceToFace(faceId1: string, faceId2: string, options:
        RequestOptionsBase, callback: ServiceCallback<VerifyResult>)
      parameters:
        - id: faceId1
          type:
            - string
          description: 'FaceId of the first face, comes from Face - Detect'
        - id: faceId2
          type:
            - string
          description: 'FaceId of the second face, comes from Face - Detect'
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.VerifyResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.FaceVerifyFaceToFaceResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.verifyFaceToFace_1'
    name: 'verifyFaceToFace(string, string, ServiceCallback<VerifyResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function verifyFaceToFace(faceId1: string, faceId2: string, callback:
        ServiceCallback<VerifyResult>)
      parameters:
        - id: faceId1
          type:
            - string
          description: 'FaceId of the first face, comes from Face - Detect'
        - id: faceId2
          type:
            - string
          description: 'FaceId of the second face, comes from Face - Detect'
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.VerifyResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.FaceVerifyFaceToFaceResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.verifyFaceToPerson_2'
    name: >-
      verifyFaceToPerson(string, string, FaceVerifyFaceToPersonOptionalParams,
      ServiceCallback<VerifyResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function verifyFaceToPerson(faceId: string, personId: string, options:
        FaceVerifyFaceToPersonOptionalParams, callback:
        ServiceCallback<VerifyResult>)
      parameters:
        - id: faceId
          type:
            - string
          description: 'FaceId of the face, comes from Face - Detect'
        - id: personId
          type:
            - string
          description: >-
            Specify a certain person in a person group or a large person group.
            personId is

            created in PersonGroup Person - Create or LargePersonGroup Person -
            Create.
        - id: options
          type:
            - '@azure/cognitiveservices-face.FaceVerifyFaceToPersonOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.VerifyResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.FaceVerifyFaceToPersonResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.verifyFaceToPerson'
    name: >-
      verifyFaceToPerson(string, string,
      Models.FaceVerifyFaceToPersonOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Verify whether two faces belong to a same person. Compares a face Id with
      a Person Id
    syntax:
      content: >-
        function verifyFaceToPerson(faceId: string, personId: string, options?:
        Models.FaceVerifyFaceToPersonOptionalParams)
      parameters:
        - id: faceId
          type:
            - string
          description: 'FaceId of the face, comes from Face - Detect'
        - id: personId
          type:
            - string
          description: >-
            Specify a certain person in a person group or a large person group.
            personId is

            created in PersonGroup Person - Create or LargePersonGroup Person -
            Create.
        - id: options
          type:
            - Models.FaceVerifyFaceToPersonOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FaceVerifyFaceToPersonResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.verifyFaceToPerson_1'
    name: 'verifyFaceToPerson(string, string, ServiceCallback<VerifyResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function verifyFaceToPerson(faceId: string, personId: string, callback:
        ServiceCallback<VerifyResult>)
      parameters:
        - id: faceId
          type:
            - string
          description: 'FaceId of the face, comes from Face - Detect'
        - id: personId
          type:
            - string
          description: >-
            Specify a certain person in a person group or a large person group.
            personId is

            created in PersonGroup Person - Create or LargePersonGroup Person -
            Create.
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.VerifyResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.FaceVerifyFaceToPersonResponse>
    package: '@azure/cognitiveservices-face'
references:
  - uid: '@azure/cognitiveservices-face.FaceClientContext'
    name: FaceClientContext
    spec.typeScript:
      - name: FaceClientContext
        fullName: FaceClientContext
        uid: '@azure/cognitiveservices-face.FaceClientContext'
  - uid: 'ServiceCallback<@azure/cognitiveservices-face.DetectedFace[]>'
    name: 'DetectedFace[]>'
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: DetectedFace
        fullName: DetectedFace
        uid: '@azure/cognitiveservices-face.DetectedFace'
      - name: '[]>'
        fullName: '[]>'
  - uid: '@azure/cognitiveservices-face.FaceDetectWithStreamOptionalParams'
    name: FaceDetectWithStreamOptionalParams
    spec.typeScript:
      - name: FaceDetectWithStreamOptionalParams
        fullName: FaceDetectWithStreamOptionalParams
        uid: '@azure/cognitiveservices-face.FaceDetectWithStreamOptionalParams'
  - uid: '@azure/cognitiveservices-face.FaceDetectWithUrlOptionalParams'
    name: FaceDetectWithUrlOptionalParams
    spec.typeScript:
      - name: FaceDetectWithUrlOptionalParams
        fullName: FaceDetectWithUrlOptionalParams
        uid: '@azure/cognitiveservices-face.FaceDetectWithUrlOptionalParams'
  - uid: 'ServiceCallback<@azure/cognitiveservices-face.SimilarFace[]>'
    name: 'SimilarFace[]>'
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: SimilarFace
        fullName: SimilarFace
        uid: '@azure/cognitiveservices-face.SimilarFace'
      - name: '[]>'
        fullName: '[]>'
  - uid: '@azure/cognitiveservices-face.FaceFindSimilarOptionalParams'
    name: FaceFindSimilarOptionalParams
    spec.typeScript:
      - name: FaceFindSimilarOptionalParams
        fullName: FaceFindSimilarOptionalParams
        uid: '@azure/cognitiveservices-face.FaceFindSimilarOptionalParams'
  - uid: ServiceCallback<@azure/cognitiveservices-face.GroupResult>
    name: GroupResult>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: GroupResult
        fullName: GroupResult
        uid: '@azure/cognitiveservices-face.GroupResult'
      - name: '>'
        fullName: '>'
  - uid: 'ServiceCallback<@azure/cognitiveservices-face.IdentifyResult[]>'
    name: 'IdentifyResult[]>'
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: IdentifyResult
        fullName: IdentifyResult
        uid: '@azure/cognitiveservices-face.IdentifyResult'
      - name: '[]>'
        fullName: '[]>'
  - uid: '@azure/cognitiveservices-face.FaceIdentifyOptionalParams'
    name: FaceIdentifyOptionalParams
    spec.typeScript:
      - name: FaceIdentifyOptionalParams
        fullName: FaceIdentifyOptionalParams
        uid: '@azure/cognitiveservices-face.FaceIdentifyOptionalParams'
  - uid: ServiceCallback<@azure/cognitiveservices-face.VerifyResult>
    name: VerifyResult>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: VerifyResult
        fullName: VerifyResult
        uid: '@azure/cognitiveservices-face.VerifyResult'
      - name: '>'
        fullName: '>'
  - uid: '@azure/cognitiveservices-face.FaceVerifyFaceToPersonOptionalParams'
    name: FaceVerifyFaceToPersonOptionalParams
    spec.typeScript:
      - name: FaceVerifyFaceToPersonOptionalParams
        fullName: FaceVerifyFaceToPersonOptionalParams
        uid: '@azure/cognitiveservices-face.FaceVerifyFaceToPersonOptionalParams'
