### YamlMime:UniversalReference
items:
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations'
    name: LargeFaceListOperations
    fullName: LargeFaceListOperations
    children:
      - >-
        @azure/cognitiveservices-face.LargeFaceListOperations.addFaceFromStream_2
      - '@azure/cognitiveservices-face.LargeFaceListOperations.addFaceFromStream'
      - >-
        @azure/cognitiveservices-face.LargeFaceListOperations.addFaceFromStream_1
      - '@azure/cognitiveservices-face.LargeFaceListOperations.addFaceFromUrl_2'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.addFaceFromUrl'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.addFaceFromUrl_1'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.create_2'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.create'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.create_1'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.deleteFace'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.deleteFace_2'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.deleteFace_1'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.deleteMethod'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.deleteMethod_2'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.deleteMethod_1'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.get_2'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.get'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.get_1'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.getFace'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.getFace_2'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.getFace_1'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.getTrainingStatus'
      - >-
        @azure/cognitiveservices-face.LargeFaceListOperations.getTrainingStatus_2
      - >-
        @azure/cognitiveservices-face.LargeFaceListOperations.getTrainingStatus_1
      - '@azure/cognitiveservices-face.LargeFaceListOperations.constructor'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.list_2'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.list'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.list_1'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.listFaces_2'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.listFaces'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.listFaces_1'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.train'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.train_2'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.train_1'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.update_2'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.update'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.update_1'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.updateFace_2'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.updateFace'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.updateFace_1'
    langs:
      - typeScript
    type: class
    summary: Class representing a LargeFaceListOperations.
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.addFaceFromStream_2'
    name: >-
      addFaceFromStream(string, msRest.HttpRequestBody,
      LargeFaceListAddFaceFromStreamOptionalParams,
      ServiceCallback<PersistedFace>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function addFaceFromStream(largeFaceListId: string, image:
        msRest.HttpRequestBody, options:
        LargeFaceListAddFaceFromStreamOptionalParams, callback:
        ServiceCallback<PersistedFace>)
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Id referencing a particular large face list.
        - id: image
          type:
            - msRest.HttpRequestBody
          description: An image stream.
        - id: options
          type:
            - >-
              @azure/cognitiveservices-face.LargeFaceListAddFaceFromStreamOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.PersistedFace>
          description: |
            The callback
      return:
        type:
          - Promise<Models.LargeFaceListAddFaceFromStreamResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.addFaceFromStream'
    name: >-
      addFaceFromStream(string, msRest.HttpRequestBody,
      Models.LargeFaceListAddFaceFromStreamOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Add a face to a large face list. The input face is specified as an image
      with a targetFace

      rectangle. It returns a persistedFaceId representing the added face, and
      persistedFaceId will

      not expire.
    syntax:
      content: >-
        function addFaceFromStream(largeFaceListId: string, image:
        msRest.HttpRequestBody, options?:
        Models.LargeFaceListAddFaceFromStreamOptionalParams)
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Id referencing a particular large face list.
        - id: image
          type:
            - msRest.HttpRequestBody
          description: An image stream.
        - id: options
          type:
            - Models.LargeFaceListAddFaceFromStreamOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.LargeFaceListAddFaceFromStreamResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.addFaceFromStream_1'
    name: >-
      addFaceFromStream(string, msRest.HttpRequestBody,
      ServiceCallback<PersistedFace>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function addFaceFromStream(largeFaceListId: string, image:
        msRest.HttpRequestBody, callback: ServiceCallback<PersistedFace>)
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Id referencing a particular large face list.
        - id: image
          type:
            - msRest.HttpRequestBody
          description: An image stream.
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.PersistedFace>
          description: |
            The callback
      return:
        type:
          - Promise<Models.LargeFaceListAddFaceFromStreamResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.addFaceFromUrl_2'
    name: >-
      addFaceFromUrl(string, string, LargeFaceListAddFaceFromUrlOptionalParams,
      ServiceCallback<PersistedFace>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function addFaceFromUrl(largeFaceListId: string, url: string, options:
        LargeFaceListAddFaceFromUrlOptionalParams, callback:
        ServiceCallback<PersistedFace>)
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Id referencing a particular large face list.
        - id: url
          type:
            - string
          description: Publicly reachable URL of an image
        - id: options
          type:
            - >-
              @azure/cognitiveservices-face.LargeFaceListAddFaceFromUrlOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.PersistedFace>
          description: |
            The callback
      return:
        type:
          - Promise<Models.LargeFaceListAddFaceFromUrlResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.addFaceFromUrl'
    name: >-
      addFaceFromUrl(string, string,
      Models.LargeFaceListAddFaceFromUrlOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Add a face to a large face list. The input face is specified as an image
      with a targetFace

      rectangle. It returns a persistedFaceId representing the added face, and
      persistedFaceId will

      not expire.
    syntax:
      content: >-
        function addFaceFromUrl(largeFaceListId: string, url: string, options?:
        Models.LargeFaceListAddFaceFromUrlOptionalParams)
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Id referencing a particular large face list.
        - id: url
          type:
            - string
          description: Publicly reachable URL of an image
        - id: options
          type:
            - Models.LargeFaceListAddFaceFromUrlOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.LargeFaceListAddFaceFromUrlResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.addFaceFromUrl_1'
    name: 'addFaceFromUrl(string, string, ServiceCallback<PersistedFace>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function addFaceFromUrl(largeFaceListId: string, url: string, callback:
        ServiceCallback<PersistedFace>)
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Id referencing a particular large face list.
        - id: url
          type:
            - string
          description: Publicly reachable URL of an image
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.PersistedFace>
          description: |
            The callback
      return:
        type:
          - Promise<Models.LargeFaceListAddFaceFromUrlResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.create_2'
    name: 'create(string, LargeFaceListCreateOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function create(largeFaceListId: string, options:
        LargeFaceListCreateOptionalParams, callback: ServiceCallback<void>)
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Id referencing a particular large face list.
        - id: options
          type:
            - '@azure/cognitiveservices-face.LargeFaceListCreateOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.create'
    name: 'create(string, Models.LargeFaceListCreateOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Create an empty large face list with user-specified largeFaceListId, name,
      an optional userData

      and recognitionModel.

      <br /> Large face list is a list of faces, up to 1,000,000 faces, and used
      by [Face - Find

      Similar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237).

      <br /> After creation, user should use [LargeFaceList Face -

      Add](/docs/services/563879b61984550e40cbbe8d/operations/5a158c10d2de3616c086f2d3)
      to import the

      faces and [LargeFaceList -

      Train](/docs/services/563879b61984550e40cbbe8d/operations/5a158422d2de3616c086f2d1)
      to make it

      ready for [Face -

      FindSimilar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237).
      Faces

      are stored on server until [LargeFaceList -

      Delete](/docs/services/563879b61984550e40cbbe8d/operations/5a1580d5d2de3616c086f2cd)
      is called.

      <br /> Find Similar is used for scenario like finding celebrity-like
      faces, similar face

      filtering, or as a light way face identification. But if the actual use is
      to identify person,

      please use

      [PersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395244)
      /

      [LargePersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/599acdee6ac60f11b48b5a9d)

      and [Face -

      Identify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239).

      <br />

      * Free-tier subscription quota: 64 large face lists.

      * S0-tier subscription quota: 1,000,000 large face lists.

      <br />

      'recognitionModel' should be specified to associate with this large face
      list. The default value

      for 'recognitionModel' is 'recognition_01', if the latest model needed,
      please explicitly

      specify the model you need in this parameter. New faces that are added to
      an existing large face

      list will use the recognition model that's already associated with the
      collection. Existing face

      features in a large face list can't be updated to features extracted by
      another version of

      recognition model.
    syntax:
      content: >-
        function create(largeFaceListId: string, options?:
        Models.LargeFaceListCreateOptionalParams)
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Id referencing a particular large face list.
        - id: options
          type:
            - Models.LargeFaceListCreateOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.create_1'
    name: 'create(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function create(largeFaceListId: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Id referencing a particular large face list.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.deleteFace'
    name: 'deleteFace(string, string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Delete an existing face from a large face list (given by a persistedFaceId
      and a

      largeFaceListId). Persisted image related to the face will also be
      deleted.
    syntax:
      content: >-
        function deleteFace(largeFaceListId: string, persistedFaceId: string,
        options?: msRest.RequestOptionsBase)
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Id referencing a particular large face list.
        - id: persistedFaceId
          type:
            - string
          description: Id referencing a particular persistedFaceId of an existing face.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.deleteFace_2'
    name: 'deleteFace(string, string, RequestOptionsBase, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function deleteFace(largeFaceListId: string, persistedFaceId: string,
        options: RequestOptionsBase, callback: ServiceCallback<void>)
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Id referencing a particular large face list.
        - id: persistedFaceId
          type:
            - string
          description: Id referencing a particular persistedFaceId of an existing face.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.deleteFace_1'
    name: 'deleteFace(string, string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function deleteFace(largeFaceListId: string, persistedFaceId: string,
        callback: ServiceCallback<void>)
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Id referencing a particular large face list.
        - id: persistedFaceId
          type:
            - string
          description: Id referencing a particular persistedFaceId of an existing face.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.deleteMethod'
    name: 'deleteMethod(string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Delete an existing large face list according to faceListId. Persisted face
      images in the large

      face list will also be deleted.
    syntax:
      content: >-
        function deleteMethod(largeFaceListId: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Id referencing a particular large face list.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.deleteMethod_2'
    name: 'deleteMethod(string, RequestOptionsBase, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function deleteMethod(largeFaceListId: string, options:
        RequestOptionsBase, callback: ServiceCallback<void>)
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Id referencing a particular large face list.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.deleteMethod_1'
    name: 'deleteMethod(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function deleteMethod(largeFaceListId: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Id referencing a particular large face list.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.get_2'
    name: >-
      get(string, LargeFaceListGetOptionalParams,
      ServiceCallback<LargeFaceList>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function get(largeFaceListId: string, options:
        LargeFaceListGetOptionalParams, callback:
        ServiceCallback<LargeFaceList>)
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Id referencing a particular large face list.
        - id: options
          type:
            - '@azure/cognitiveservices-face.LargeFaceListGetOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.LargeFaceList>
          description: |
            The callback
      return:
        type:
          - Promise<Models.LargeFaceListGetResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.get'
    name: 'get(string, Models.LargeFaceListGetOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Retrieve a large face list’s largeFaceListId, name, userData and
      recognitionModel.
    syntax:
      content: >-
        function get(largeFaceListId: string, options?:
        Models.LargeFaceListGetOptionalParams)
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Id referencing a particular large face list.
        - id: options
          type:
            - Models.LargeFaceListGetOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.LargeFaceListGetResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.get_1'
    name: 'get(string, ServiceCallback<LargeFaceList>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function get(largeFaceListId: string, callback:
        ServiceCallback<LargeFaceList>)
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Id referencing a particular large face list.
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.LargeFaceList>
          description: |
            The callback
      return:
        type:
          - Promise<Models.LargeFaceListGetResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.getFace'
    name: 'getFace(string, string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Retrieve information about a persisted face (specified by persistedFaceId
      and its belonging

      largeFaceListId).
    syntax:
      content: >-
        function getFace(largeFaceListId: string, persistedFaceId: string,
        options?: msRest.RequestOptionsBase)
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Id referencing a particular large face list.
        - id: persistedFaceId
          type:
            - string
          description: Id referencing a particular persistedFaceId of an existing face.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.LargeFaceListGetFaceResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.getFace_2'
    name: >-
      getFace(string, string, RequestOptionsBase,
      ServiceCallback<PersistedFace>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getFace(largeFaceListId: string, persistedFaceId: string,
        options: RequestOptionsBase, callback: ServiceCallback<PersistedFace>)
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Id referencing a particular large face list.
        - id: persistedFaceId
          type:
            - string
          description: Id referencing a particular persistedFaceId of an existing face.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.PersistedFace>
          description: |
            The callback
      return:
        type:
          - Promise<Models.LargeFaceListGetFaceResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.getFace_1'
    name: 'getFace(string, string, ServiceCallback<PersistedFace>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getFace(largeFaceListId: string, persistedFaceId: string,
        callback: ServiceCallback<PersistedFace>)
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Id referencing a particular large face list.
        - id: persistedFaceId
          type:
            - string
          description: Id referencing a particular persistedFaceId of an existing face.
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.PersistedFace>
          description: |
            The callback
      return:
        type:
          - Promise<Models.LargeFaceListGetFaceResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.getTrainingStatus'
    name: 'getTrainingStatus(string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Retrieve the training status of a large face list (completed or ongoing).
    syntax:
      content: >-
        function getTrainingStatus(largeFaceListId: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Id referencing a particular large face list.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.LargeFaceListGetTrainingStatusResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.getTrainingStatus_2'
    name: >-
      getTrainingStatus(string, RequestOptionsBase,
      ServiceCallback<TrainingStatus>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getTrainingStatus(largeFaceListId: string, options:
        RequestOptionsBase, callback: ServiceCallback<TrainingStatus>)
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Id referencing a particular large face list.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.TrainingStatus>
          description: |
            The callback
      return:
        type:
          - Promise<Models.LargeFaceListGetTrainingStatusResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.getTrainingStatus_1'
    name: 'getTrainingStatus(string, ServiceCallback<TrainingStatus>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getTrainingStatus(largeFaceListId: string, callback:
        ServiceCallback<TrainingStatus>)
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Id referencing a particular large face list.
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.TrainingStatus>
          description: |
            The callback
      return:
        type:
          - Promise<Models.LargeFaceListGetTrainingStatusResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.constructor'
    name: LargeFaceListOperations(FaceClientContext)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Create a LargeFaceListOperations.
    syntax:
      content: 'new LargeFaceListOperations(client: FaceClientContext)'
      parameters:
        - id: client
          type:
            - '@azure/cognitiveservices-face.FaceClientContext'
          description: |
            Reference to the service client.
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.list_2'
    name: 'list(LargeFaceListListOptionalParams, ServiceCallback<LargeFaceList[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function list(options: LargeFaceListListOptionalParams, callback:
        ServiceCallback<LargeFaceList[]>)
      parameters:
        - id: options
          type:
            - '@azure/cognitiveservices-face.LargeFaceListListOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - 'ServiceCallback<@azure/cognitiveservices-face.LargeFaceList[]>'
          description: |
            The callback
      return:
        type:
          - Promise<Models.LargeFaceListListResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.list'
    name: list(Models.LargeFaceListListOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      List large face lists’ information of largeFaceListId, name, userData and
      recognitionModel. <br

      />

      To get face information inside largeFaceList use [LargeFaceList Face -

      Get](/docs/services/563879b61984550e40cbbe8d/operations/5a158cf2d2de3616c086f2d5)<br
      />

      * Large face lists are stored in alphabetical order of largeFaceListId.

      * "start" parameter (string, optional) is a user-provided largeFaceListId
      value that returned

      entries have larger ids by string comparison. "start" set to empty to
      indicate return from the

      first item.

      * "top" parameter (int, optional) specifies the number of entries to
      return. A maximal of 1000

      entries can be returned in one call. To fetch more, you can specify
      "start" with the last

      returned entry’s Id of the current call.

      <br />

      For example, total 5 large person lists: "list1", ..., "list5".

      <br /> "start=&top=" will return all 5 lists.

      <br /> "start=&top=2" will return "list1", "list2".

      <br /> "start=list2&top=3" will return "list3", "list4", "list5".
    syntax:
      content: 'function list(options?: Models.LargeFaceListListOptionalParams)'
      parameters:
        - id: options
          type:
            - Models.LargeFaceListListOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.LargeFaceListListResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.list_1'
    name: 'list(ServiceCallback<LargeFaceList[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function list(callback: ServiceCallback<LargeFaceList[]>)'
      parameters:
        - id: callback
          type:
            - 'ServiceCallback<@azure/cognitiveservices-face.LargeFaceList[]>'
          description: |
            The callback
      return:
        type:
          - Promise<Models.LargeFaceListListResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.listFaces_2'
    name: >-
      listFaces(string, LargeFaceListListFacesOptionalParams,
      ServiceCallback<PersistedFace[]>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function listFaces(largeFaceListId: string, options:
        LargeFaceListListFacesOptionalParams, callback:
        ServiceCallback<PersistedFace[]>)
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Id referencing a particular large face list.
        - id: options
          type:
            - '@azure/cognitiveservices-face.LargeFaceListListFacesOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - 'ServiceCallback<@azure/cognitiveservices-face.PersistedFace[]>'
          description: |
            The callback
      return:
        type:
          - Promise<Models.LargeFaceListListFacesResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.listFaces'
    name: 'listFaces(string, Models.LargeFaceListListFacesOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      List all faces in a large face list, and retrieve face information
      (including userData and

      persistedFaceIds of registered faces of the face).
    syntax:
      content: >-
        function listFaces(largeFaceListId: string, options?:
        Models.LargeFaceListListFacesOptionalParams)
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Id referencing a particular large face list.
        - id: options
          type:
            - Models.LargeFaceListListFacesOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.LargeFaceListListFacesResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.listFaces_1'
    name: 'listFaces(string, ServiceCallback<PersistedFace[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function listFaces(largeFaceListId: string, callback:
        ServiceCallback<PersistedFace[]>)
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Id referencing a particular large face list.
        - id: callback
          type:
            - 'ServiceCallback<@azure/cognitiveservices-face.PersistedFace[]>'
          description: |
            The callback
      return:
        type:
          - Promise<Models.LargeFaceListListFacesResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.train'
    name: 'train(string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Queue a large face list training task, the training task may not be
      started immediately.
    syntax:
      content: >-
        function train(largeFaceListId: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Id referencing a particular large face list.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.train_2'
    name: 'train(string, RequestOptionsBase, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function train(largeFaceListId: string, options: RequestOptionsBase,
        callback: ServiceCallback<void>)
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Id referencing a particular large face list.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.train_1'
    name: 'train(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function train(largeFaceListId: string, callback: ServiceCallback<void>)'
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Id referencing a particular large face list.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.update_2'
    name: 'update(string, LargeFaceListUpdateOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function update(largeFaceListId: string, options:
        LargeFaceListUpdateOptionalParams, callback: ServiceCallback<void>)
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Id referencing a particular large face list.
        - id: options
          type:
            - '@azure/cognitiveservices-face.LargeFaceListUpdateOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.update'
    name: 'update(string, Models.LargeFaceListUpdateOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Update information of a large face list.
    syntax:
      content: >-
        function update(largeFaceListId: string, options?:
        Models.LargeFaceListUpdateOptionalParams)
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Id referencing a particular large face list.
        - id: options
          type:
            - Models.LargeFaceListUpdateOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.update_1'
    name: 'update(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function update(largeFaceListId: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Id referencing a particular large face list.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.updateFace_2'
    name: >-
      updateFace(string, string, LargeFaceListUpdateFaceOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function updateFace(largeFaceListId: string, persistedFaceId: string,
        options: LargeFaceListUpdateFaceOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Id referencing a particular large face list.
        - id: persistedFaceId
          type:
            - string
          description: Id referencing a particular persistedFaceId of an existing face.
        - id: options
          type:
            - >-
              @azure/cognitiveservices-face.LargeFaceListUpdateFaceOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.updateFace'
    name: 'updateFace(string, string, Models.LargeFaceListUpdateFaceOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Update a persisted face's userData field.
    syntax:
      content: >-
        function updateFace(largeFaceListId: string, persistedFaceId: string,
        options?: Models.LargeFaceListUpdateFaceOptionalParams)
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Id referencing a particular large face list.
        - id: persistedFaceId
          type:
            - string
          description: Id referencing a particular persistedFaceId of an existing face.
        - id: options
          type:
            - Models.LargeFaceListUpdateFaceOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.updateFace_1'
    name: 'updateFace(string, string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function updateFace(largeFaceListId: string, persistedFaceId: string,
        callback: ServiceCallback<void>)
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Id referencing a particular large face list.
        - id: persistedFaceId
          type:
            - string
          description: Id referencing a particular persistedFaceId of an existing face.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/cognitiveservices-face'
references:
  - uid: '@azure/cognitiveservices-face.FaceClientContext'
    name: FaceClientContext
    spec.typeScript:
      - name: FaceClientContext
        fullName: FaceClientContext
        uid: '@azure/cognitiveservices-face.FaceClientContext'
  - uid: ServiceCallback<@azure/cognitiveservices-face.PersistedFace>
    name: PersistedFace>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: PersistedFace
        fullName: PersistedFace
        uid: '@azure/cognitiveservices-face.PersistedFace'
      - name: '>'
        fullName: '>'
  - uid: '@azure/cognitiveservices-face.LargeFaceListAddFaceFromStreamOptionalParams'
    name: LargeFaceListAddFaceFromStreamOptionalParams
    spec.typeScript:
      - name: LargeFaceListAddFaceFromStreamOptionalParams
        fullName: LargeFaceListAddFaceFromStreamOptionalParams
        uid: >-
          @azure/cognitiveservices-face.LargeFaceListAddFaceFromStreamOptionalParams
  - uid: '@azure/cognitiveservices-face.LargeFaceListAddFaceFromUrlOptionalParams'
    name: LargeFaceListAddFaceFromUrlOptionalParams
    spec.typeScript:
      - name: LargeFaceListAddFaceFromUrlOptionalParams
        fullName: LargeFaceListAddFaceFromUrlOptionalParams
        uid: >-
          @azure/cognitiveservices-face.LargeFaceListAddFaceFromUrlOptionalParams
  - uid: '@azure/cognitiveservices-face.LargeFaceListCreateOptionalParams'
    name: LargeFaceListCreateOptionalParams
    spec.typeScript:
      - name: LargeFaceListCreateOptionalParams
        fullName: LargeFaceListCreateOptionalParams
        uid: '@azure/cognitiveservices-face.LargeFaceListCreateOptionalParams'
  - uid: ServiceCallback<@azure/cognitiveservices-face.LargeFaceList>
    name: LargeFaceList>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: LargeFaceList
        fullName: LargeFaceList
        uid: '@azure/cognitiveservices-face.LargeFaceList'
      - name: '>'
        fullName: '>'
  - uid: '@azure/cognitiveservices-face.LargeFaceListGetOptionalParams'
    name: LargeFaceListGetOptionalParams
    spec.typeScript:
      - name: LargeFaceListGetOptionalParams
        fullName: LargeFaceListGetOptionalParams
        uid: '@azure/cognitiveservices-face.LargeFaceListGetOptionalParams'
  - uid: ServiceCallback<@azure/cognitiveservices-face.TrainingStatus>
    name: TrainingStatus>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: TrainingStatus
        fullName: TrainingStatus
        uid: '@azure/cognitiveservices-face.TrainingStatus'
      - name: '>'
        fullName: '>'
  - uid: 'ServiceCallback<@azure/cognitiveservices-face.LargeFaceList[]>'
    name: 'LargeFaceList[]>'
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: LargeFaceList
        fullName: LargeFaceList
        uid: '@azure/cognitiveservices-face.LargeFaceList'
      - name: '[]>'
        fullName: '[]>'
  - uid: '@azure/cognitiveservices-face.LargeFaceListListOptionalParams'
    name: LargeFaceListListOptionalParams
    spec.typeScript:
      - name: LargeFaceListListOptionalParams
        fullName: LargeFaceListListOptionalParams
        uid: '@azure/cognitiveservices-face.LargeFaceListListOptionalParams'
  - uid: 'ServiceCallback<@azure/cognitiveservices-face.PersistedFace[]>'
    name: 'PersistedFace[]>'
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: PersistedFace
        fullName: PersistedFace
        uid: '@azure/cognitiveservices-face.PersistedFace'
      - name: '[]>'
        fullName: '[]>'
  - uid: '@azure/cognitiveservices-face.LargeFaceListListFacesOptionalParams'
    name: LargeFaceListListFacesOptionalParams
    spec.typeScript:
      - name: LargeFaceListListFacesOptionalParams
        fullName: LargeFaceListListFacesOptionalParams
        uid: '@azure/cognitiveservices-face.LargeFaceListListFacesOptionalParams'
  - uid: '@azure/cognitiveservices-face.LargeFaceListUpdateOptionalParams'
    name: LargeFaceListUpdateOptionalParams
    spec.typeScript:
      - name: LargeFaceListUpdateOptionalParams
        fullName: LargeFaceListUpdateOptionalParams
        uid: '@azure/cognitiveservices-face.LargeFaceListUpdateOptionalParams'
  - uid: '@azure/cognitiveservices-face.LargeFaceListUpdateFaceOptionalParams'
    name: LargeFaceListUpdateFaceOptionalParams
    spec.typeScript:
      - name: LargeFaceListUpdateFaceOptionalParams
        fullName: LargeFaceListUpdateFaceOptionalParams
        uid: '@azure/cognitiveservices-face.LargeFaceListUpdateFaceOptionalParams'
