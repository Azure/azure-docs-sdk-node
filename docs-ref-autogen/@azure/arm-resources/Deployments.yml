### YamlMime:UniversalReference
items:
  - uid: '@azure/arm-resources.Deployments'
    name: Deployments
    fullName: Deployments
    children:
      - '@azure/arm-resources.Deployments.beginCreateOrUpdate'
      - '@azure/arm-resources.Deployments.beginCreateOrUpdateAtSubscriptionScope'
      - '@azure/arm-resources.Deployments.beginDeleteAtSubscriptionScope'
      - '@azure/arm-resources.Deployments.beginDeleteMethod'
      - '@azure/arm-resources.Deployments.cancel'
      - '@azure/arm-resources.Deployments.cancel_2'
      - '@azure/arm-resources.Deployments.cancel_1'
      - '@azure/arm-resources.Deployments.cancelAtSubscriptionScope'
      - '@azure/arm-resources.Deployments.cancelAtSubscriptionScope_2'
      - '@azure/arm-resources.Deployments.cancelAtSubscriptionScope_1'
      - '@azure/arm-resources.Deployments.checkExistence'
      - '@azure/arm-resources.Deployments.checkExistence_2'
      - '@azure/arm-resources.Deployments.checkExistence_1'
      - '@azure/arm-resources.Deployments.checkExistenceAtSubscriptionScope'
      - '@azure/arm-resources.Deployments.checkExistenceAtSubscriptionScope_2'
      - '@azure/arm-resources.Deployments.checkExistenceAtSubscriptionScope_1'
      - '@azure/arm-resources.Deployments.createOrUpdate'
      - '@azure/arm-resources.Deployments.createOrUpdateAtSubscriptionScope'
      - '@azure/arm-resources.Deployments.deleteAtSubscriptionScope'
      - '@azure/arm-resources.Deployments.deleteMethod'
      - '@azure/arm-resources.Deployments.constructor'
      - '@azure/arm-resources.Deployments.exportTemplate'
      - '@azure/arm-resources.Deployments.exportTemplate_2'
      - '@azure/arm-resources.Deployments.exportTemplate_1'
      - '@azure/arm-resources.Deployments.exportTemplateAtSubscriptionScope'
      - '@azure/arm-resources.Deployments.exportTemplateAtSubscriptionScope_2'
      - '@azure/arm-resources.Deployments.exportTemplateAtSubscriptionScope_1'
      - '@azure/arm-resources.Deployments.get'
      - '@azure/arm-resources.Deployments.get_2'
      - '@azure/arm-resources.Deployments.get_1'
      - '@azure/arm-resources.Deployments.getAtSubscriptionScope'
      - '@azure/arm-resources.Deployments.getAtSubscriptionScope_2'
      - '@azure/arm-resources.Deployments.getAtSubscriptionScope_1'
      - '@azure/arm-resources.Deployments.listAtSubscriptionScope_2'
      - '@azure/arm-resources.Deployments.listAtSubscriptionScope'
      - '@azure/arm-resources.Deployments.listAtSubscriptionScope_1'
      - '@azure/arm-resources.Deployments.listAtSubscriptionScopeNext'
      - '@azure/arm-resources.Deployments.listAtSubscriptionScopeNext_2'
      - '@azure/arm-resources.Deployments.listAtSubscriptionScopeNext_1'
      - '@azure/arm-resources.Deployments.listByResourceGroup_2'
      - '@azure/arm-resources.Deployments.listByResourceGroup'
      - '@azure/arm-resources.Deployments.listByResourceGroup_1'
      - '@azure/arm-resources.Deployments.listByResourceGroupNext'
      - '@azure/arm-resources.Deployments.listByResourceGroupNext_2'
      - '@azure/arm-resources.Deployments.listByResourceGroupNext_1'
      - '@azure/arm-resources.Deployments.validate'
      - '@azure/arm-resources.Deployments.validate_2'
      - '@azure/arm-resources.Deployments.validate_1'
      - '@azure/arm-resources.Deployments.validateAtSubscriptionScope'
      - '@azure/arm-resources.Deployments.validateAtSubscriptionScope_2'
      - '@azure/arm-resources.Deployments.validateAtSubscriptionScope_1'
    langs:
      - typeScript
    type: class
    summary: Class representing a Deployments.
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.beginCreateOrUpdate'
    name: 'beginCreateOrUpdate(string, string, Deployment, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      You can provide the template and parameters directly in the request or
      link to JSON files.
    syntax:
      content: >-
        function beginCreateOrUpdate(resourceGroupName: string, deploymentName:
        string, parameters: Deployment, options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: >-
            The name of the resource group to deploy the resources to. The name
            is

            case insensitive. The resource group must already exist.
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: parameters
          type:
            - '@azure/arm-resources.Deployment'
          description: Additional parameters supplied to the operation.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<LROPoller>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.beginCreateOrUpdateAtSubscriptionScope'
    name: >-
      beginCreateOrUpdateAtSubscriptionScope(string, Deployment,
      msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      You can provide the template and parameters directly in the request or
      link to JSON files.
    syntax:
      content: >-
        function beginCreateOrUpdateAtSubscriptionScope(deploymentName: string,
        parameters: Deployment, options?: msRest.RequestOptionsBase)
      parameters:
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: parameters
          type:
            - '@azure/arm-resources.Deployment'
          description: Additional parameters supplied to the operation.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<LROPoller>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.beginDeleteAtSubscriptionScope'
    name: 'beginDeleteAtSubscriptionScope(string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      A template deployment that is currently running cannot be deleted.
      Deleting a template

      deployment removes the associated deployment operations. This is an
      asynchronous operation that

      returns a status of 202 until the template deployment is successfully
      deleted. The Location

      response header contains the URI that is used to obtain the status of the
      process. While the

      process is running, a call to the URI in the Location header returns a
      status of 202. When the

      process finishes, the URI in the Location header returns a status of 204
      on success. If the

      asynchronous request failed, the URI in the Location header returns an
      error-level status code.
    syntax:
      content: >-
        function beginDeleteAtSubscriptionScope(deploymentName: string,
        options?: msRest.RequestOptionsBase)
      parameters:
        - id: deploymentName
          type:
            - string
          description: The name of the deployment to delete.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<LROPoller>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.beginDeleteMethod'
    name: 'beginDeleteMethod(string, string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      A template deployment that is currently running cannot be deleted.
      Deleting a template

      deployment removes the associated deployment operations. Deleting a
      template deployment does not

      affect the state of the resource group. This is an asynchronous operation
      that returns a status

      of 202 until the template deployment is successfully deleted. The Location
      response header

      contains the URI that is used to obtain the status of the process. While
      the process is running,

      a call to the URI in the Location header returns a status of 202. When the
      process finishes, the

      URI in the Location header returns a status of 204 on success. If the
      asynchronous request

      failed, the URI in the Location header returns an error-level status code.
    syntax:
      content: >-
        function beginDeleteMethod(resourceGroupName: string, deploymentName:
        string, options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: >-
            The name of the resource group with the deployment to delete. The
            name

            is case insensitive.
        - id: deploymentName
          type:
            - string
          description: The name of the deployment to delete.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<LROPoller>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.cancel'
    name: 'cancel(string, string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      You can cancel a deployment only if the provisioningState is Accepted or
      Running. After the

      deployment is canceled, the provisioningState is set to Canceled.
      Canceling a template

      deployment stops the currently running template deployment and leaves the
      resource group

      partially deployed.
    syntax:
      content: >-
        function cancel(resourceGroupName: string, deploymentName: string,
        options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: deploymentName
          type:
            - string
          description: The name of the deployment to cancel.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.cancel_2'
    name: 'cancel(string, string, RequestOptionsBase, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function cancel(resourceGroupName: string, deploymentName: string,
        options: RequestOptionsBase, callback: ServiceCallback<void>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: deploymentName
          type:
            - string
          description: The name of the deployment to cancel.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.cancel_1'
    name: 'cancel(string, string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function cancel(resourceGroupName: string, deploymentName: string,
        callback: ServiceCallback<void>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: deploymentName
          type:
            - string
          description: The name of the deployment to cancel.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.cancelAtSubscriptionScope'
    name: 'cancelAtSubscriptionScope(string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      You can cancel a deployment only if the provisioningState is Accepted or
      Running. After the

      deployment is canceled, the provisioningState is set to Canceled.
      Canceling a template

      deployment stops the currently running template deployment and leaves the
      resources partially

      deployed.
    syntax:
      content: >-
        function cancelAtSubscriptionScope(deploymentName: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: deploymentName
          type:
            - string
          description: The name of the deployment to cancel.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.cancelAtSubscriptionScope_2'
    name: >-
      cancelAtSubscriptionScope(string, RequestOptionsBase,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function cancelAtSubscriptionScope(deploymentName: string, options:
        RequestOptionsBase, callback: ServiceCallback<void>)
      parameters:
        - id: deploymentName
          type:
            - string
          description: The name of the deployment to cancel.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.cancelAtSubscriptionScope_1'
    name: 'cancelAtSubscriptionScope(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function cancelAtSubscriptionScope(deploymentName: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: deploymentName
          type:
            - string
          description: The name of the deployment to cancel.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.checkExistence'
    name: 'checkExistence(string, string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Checks whether the deployment exists.
    syntax:
      content: >-
        function checkExistence(resourceGroupName: string, deploymentName:
        string, options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: >-
            The name of the resource group with the deployment to check. The
            name

            is case insensitive.
        - id: deploymentName
          type:
            - string
          description: The name of the deployment to check.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.DeploymentsCheckExistenceResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.checkExistence_2'
    name: >-
      checkExistence(string, string, RequestOptionsBase,
      ServiceCallback<boolean>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function checkExistence(resourceGroupName: string, deploymentName:
        string, options: RequestOptionsBase, callback: ServiceCallback<boolean>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: >-
            The name of the resource group with the deployment to check. The
            name

            is case insensitive.
        - id: deploymentName
          type:
            - string
          description: The name of the deployment to check.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<boolean>
          description: |
            The callback
      return:
        type:
          - Promise<Models.DeploymentsCheckExistenceResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.checkExistence_1'
    name: 'checkExistence(string, string, ServiceCallback<boolean>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function checkExistence(resourceGroupName: string, deploymentName:
        string, callback: ServiceCallback<boolean>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: >-
            The name of the resource group with the deployment to check. The
            name

            is case insensitive.
        - id: deploymentName
          type:
            - string
          description: The name of the deployment to check.
        - id: callback
          type:
            - ServiceCallback<boolean>
          description: |
            The callback
      return:
        type:
          - Promise<Models.DeploymentsCheckExistenceResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.checkExistenceAtSubscriptionScope'
    name: 'checkExistenceAtSubscriptionScope(string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Checks whether the deployment exists.
    syntax:
      content: >-
        function checkExistenceAtSubscriptionScope(deploymentName: string,
        options?: msRest.RequestOptionsBase)
      parameters:
        - id: deploymentName
          type:
            - string
          description: The name of the deployment to check.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.DeploymentsCheckExistenceAtSubscriptionScopeResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.checkExistenceAtSubscriptionScope_2'
    name: >-
      checkExistenceAtSubscriptionScope(string, RequestOptionsBase,
      ServiceCallback<boolean>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function checkExistenceAtSubscriptionScope(deploymentName: string,
        options: RequestOptionsBase, callback: ServiceCallback<boolean>)
      parameters:
        - id: deploymentName
          type:
            - string
          description: The name of the deployment to check.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<boolean>
          description: |
            The callback
      return:
        type:
          - Promise<Models.DeploymentsCheckExistenceAtSubscriptionScopeResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.checkExistenceAtSubscriptionScope_1'
    name: 'checkExistenceAtSubscriptionScope(string, ServiceCallback<boolean>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function checkExistenceAtSubscriptionScope(deploymentName: string,
        callback: ServiceCallback<boolean>)
      parameters:
        - id: deploymentName
          type:
            - string
          description: The name of the deployment to check.
        - id: callback
          type:
            - ServiceCallback<boolean>
          description: |
            The callback
      return:
        type:
          - Promise<Models.DeploymentsCheckExistenceAtSubscriptionScopeResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.createOrUpdate'
    name: 'createOrUpdate(string, string, Deployment, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      You can provide the template and parameters directly in the request or
      link to JSON files.
    syntax:
      content: >-
        function createOrUpdate(resourceGroupName: string, deploymentName:
        string, parameters: Deployment, options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: >-
            The name of the resource group to deploy the resources to. The name
            is

            case insensitive. The resource group must already exist.
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: parameters
          type:
            - '@azure/arm-resources.Deployment'
          description: Additional parameters supplied to the operation.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.DeploymentsCreateOrUpdateResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.createOrUpdateAtSubscriptionScope'
    name: >-
      createOrUpdateAtSubscriptionScope(string, Deployment,
      msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      You can provide the template and parameters directly in the request or
      link to JSON files.
    syntax:
      content: >-
        function createOrUpdateAtSubscriptionScope(deploymentName: string,
        parameters: Deployment, options?: msRest.RequestOptionsBase)
      parameters:
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: parameters
          type:
            - '@azure/arm-resources.Deployment'
          description: Additional parameters supplied to the operation.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.DeploymentsCreateOrUpdateAtSubscriptionScopeResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.deleteAtSubscriptionScope'
    name: 'deleteAtSubscriptionScope(string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      A template deployment that is currently running cannot be deleted.
      Deleting a template

      deployment removes the associated deployment operations. This is an
      asynchronous operation that

      returns a status of 202 until the template deployment is successfully
      deleted. The Location

      response header contains the URI that is used to obtain the status of the
      process. While the

      process is running, a call to the URI in the Location header returns a
      status of 202. When the

      process finishes, the URI in the Location header returns a status of 204
      on success. If the

      asynchronous request failed, the URI in the Location header returns an
      error-level status code.
    syntax:
      content: >-
        function deleteAtSubscriptionScope(deploymentName: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: deploymentName
          type:
            - string
          description: The name of the deployment to delete.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.deleteMethod'
    name: 'deleteMethod(string, string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      A template deployment that is currently running cannot be deleted.
      Deleting a template

      deployment removes the associated deployment operations. Deleting a
      template deployment does not

      affect the state of the resource group. This is an asynchronous operation
      that returns a status

      of 202 until the template deployment is successfully deleted. The Location
      response header

      contains the URI that is used to obtain the status of the process. While
      the process is running,

      a call to the URI in the Location header returns a status of 202. When the
      process finishes, the

      URI in the Location header returns a status of 204 on success. If the
      asynchronous request

      failed, the URI in the Location header returns an error-level status code.
    syntax:
      content: >-
        function deleteMethod(resourceGroupName: string, deploymentName: string,
        options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: >-
            The name of the resource group with the deployment to delete. The
            name

            is case insensitive.
        - id: deploymentName
          type:
            - string
          description: The name of the deployment to delete.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.constructor'
    name: Deployments(ResourceManagementClientContext)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Create a Deployments.
    syntax:
      content: 'new Deployments(client: ResourceManagementClientContext)'
      parameters:
        - id: client
          type:
            - '@azure/arm-resources.ResourceManagementClientContext'
          description: |
            Reference to the service client.
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.exportTemplate'
    name: 'exportTemplate(string, string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Exports the template used for specified deployment.
    syntax:
      content: >-
        function exportTemplate(resourceGroupName: string, deploymentName:
        string, options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: deploymentName
          type:
            - string
          description: The name of the deployment from which to get the template.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.DeploymentsExportTemplateResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.exportTemplate_2'
    name: >-
      exportTemplate(string, string, RequestOptionsBase,
      ServiceCallback<DeploymentExportResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function exportTemplate(resourceGroupName: string, deploymentName:
        string, options: RequestOptionsBase, callback:
        ServiceCallback<DeploymentExportResult>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: deploymentName
          type:
            - string
          description: The name of the deployment from which to get the template.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/arm-resources.DeploymentExportResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.DeploymentsExportTemplateResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.exportTemplate_1'
    name: 'exportTemplate(string, string, ServiceCallback<DeploymentExportResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function exportTemplate(resourceGroupName: string, deploymentName:
        string, callback: ServiceCallback<DeploymentExportResult>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: deploymentName
          type:
            - string
          description: The name of the deployment from which to get the template.
        - id: callback
          type:
            - ServiceCallback<@azure/arm-resources.DeploymentExportResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.DeploymentsExportTemplateResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.exportTemplateAtSubscriptionScope'
    name: 'exportTemplateAtSubscriptionScope(string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Exports the template used for specified deployment.
    syntax:
      content: >-
        function exportTemplateAtSubscriptionScope(deploymentName: string,
        options?: msRest.RequestOptionsBase)
      parameters:
        - id: deploymentName
          type:
            - string
          description: The name of the deployment from which to get the template.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.DeploymentsExportTemplateAtSubscriptionScopeResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.exportTemplateAtSubscriptionScope_2'
    name: >-
      exportTemplateAtSubscriptionScope(string, RequestOptionsBase,
      ServiceCallback<DeploymentExportResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function exportTemplateAtSubscriptionScope(deploymentName: string,
        options: RequestOptionsBase, callback:
        ServiceCallback<DeploymentExportResult>)
      parameters:
        - id: deploymentName
          type:
            - string
          description: The name of the deployment from which to get the template.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/arm-resources.DeploymentExportResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.DeploymentsExportTemplateAtSubscriptionScopeResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.exportTemplateAtSubscriptionScope_1'
    name: >-
      exportTemplateAtSubscriptionScope(string,
      ServiceCallback<DeploymentExportResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function exportTemplateAtSubscriptionScope(deploymentName: string,
        callback: ServiceCallback<DeploymentExportResult>)
      parameters:
        - id: deploymentName
          type:
            - string
          description: The name of the deployment from which to get the template.
        - id: callback
          type:
            - ServiceCallback<@azure/arm-resources.DeploymentExportResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.DeploymentsExportTemplateAtSubscriptionScopeResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.get'
    name: 'get(string, string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Gets a deployment.
    syntax:
      content: >-
        function get(resourceGroupName: string, deploymentName: string,
        options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: deploymentName
          type:
            - string
          description: The name of the deployment to get.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.DeploymentsGetResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.get_2'
    name: >-
      get(string, string, RequestOptionsBase,
      ServiceCallback<DeploymentExtended>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function get(resourceGroupName: string, deploymentName: string, options:
        RequestOptionsBase, callback: ServiceCallback<DeploymentExtended>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: deploymentName
          type:
            - string
          description: The name of the deployment to get.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/arm-resources.DeploymentExtended>
          description: |
            The callback
      return:
        type:
          - Promise<Models.DeploymentsGetResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.get_1'
    name: 'get(string, string, ServiceCallback<DeploymentExtended>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function get(resourceGroupName: string, deploymentName: string,
        callback: ServiceCallback<DeploymentExtended>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: deploymentName
          type:
            - string
          description: The name of the deployment to get.
        - id: callback
          type:
            - ServiceCallback<@azure/arm-resources.DeploymentExtended>
          description: |
            The callback
      return:
        type:
          - Promise<Models.DeploymentsGetResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.getAtSubscriptionScope'
    name: 'getAtSubscriptionScope(string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Gets a deployment.
    syntax:
      content: >-
        function getAtSubscriptionScope(deploymentName: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: deploymentName
          type:
            - string
          description: The name of the deployment to get.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.DeploymentsGetAtSubscriptionScopeResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.getAtSubscriptionScope_2'
    name: >-
      getAtSubscriptionScope(string, RequestOptionsBase,
      ServiceCallback<DeploymentExtended>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getAtSubscriptionScope(deploymentName: string, options:
        RequestOptionsBase, callback: ServiceCallback<DeploymentExtended>)
      parameters:
        - id: deploymentName
          type:
            - string
          description: The name of the deployment to get.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/arm-resources.DeploymentExtended>
          description: |
            The callback
      return:
        type:
          - Promise<Models.DeploymentsGetAtSubscriptionScopeResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.getAtSubscriptionScope_1'
    name: 'getAtSubscriptionScope(string, ServiceCallback<DeploymentExtended>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getAtSubscriptionScope(deploymentName: string, callback:
        ServiceCallback<DeploymentExtended>)
      parameters:
        - id: deploymentName
          type:
            - string
          description: The name of the deployment to get.
        - id: callback
          type:
            - ServiceCallback<@azure/arm-resources.DeploymentExtended>
          description: |
            The callback
      return:
        type:
          - Promise<Models.DeploymentsGetAtSubscriptionScopeResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.listAtSubscriptionScope_2'
    name: >-
      listAtSubscriptionScope(DeploymentsListAtSubscriptionScopeOptionalParams,
      ServiceCallback<DeploymentListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function listAtSubscriptionScope(options:
        DeploymentsListAtSubscriptionScopeOptionalParams, callback:
        ServiceCallback<DeploymentListResult>)
      parameters:
        - id: options
          type:
            - >-
              @azure/arm-resources.DeploymentsListAtSubscriptionScopeOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/arm-resources.DeploymentListResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.DeploymentsListAtSubscriptionScopeResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.listAtSubscriptionScope'
    name: >-
      listAtSubscriptionScope(Models.DeploymentsListAtSubscriptionScopeOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: Get all the deployments for a subscription.
    syntax:
      content: >-
        function listAtSubscriptionScope(options?:
        Models.DeploymentsListAtSubscriptionScopeOptionalParams)
      parameters:
        - id: options
          type:
            - Models.DeploymentsListAtSubscriptionScopeOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.DeploymentsListAtSubscriptionScopeResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.listAtSubscriptionScope_1'
    name: listAtSubscriptionScope(ServiceCallback<DeploymentListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function listAtSubscriptionScope(callback:
        ServiceCallback<DeploymentListResult>)
      parameters:
        - id: callback
          type:
            - ServiceCallback<@azure/arm-resources.DeploymentListResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.DeploymentsListAtSubscriptionScopeResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.listAtSubscriptionScopeNext'
    name: 'listAtSubscriptionScopeNext(string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Get all the deployments for a subscription.
    syntax:
      content: >-
        function listAtSubscriptionScopeNext(nextPageLink: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: nextPageLink
          type:
            - string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.DeploymentsListAtSubscriptionScopeNextResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.listAtSubscriptionScopeNext_2'
    name: >-
      listAtSubscriptionScopeNext(string, RequestOptionsBase,
      ServiceCallback<DeploymentListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function listAtSubscriptionScopeNext(nextPageLink: string, options:
        RequestOptionsBase, callback: ServiceCallback<DeploymentListResult>)
      parameters:
        - id: nextPageLink
          type:
            - string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/arm-resources.DeploymentListResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.DeploymentsListAtSubscriptionScopeNextResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.listAtSubscriptionScopeNext_1'
    name: 'listAtSubscriptionScopeNext(string, ServiceCallback<DeploymentListResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function listAtSubscriptionScopeNext(nextPageLink: string, callback:
        ServiceCallback<DeploymentListResult>)
      parameters:
        - id: nextPageLink
          type:
            - string
          description: The NextLink from the previous successful call to List operation.
        - id: callback
          type:
            - ServiceCallback<@azure/arm-resources.DeploymentListResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.DeploymentsListAtSubscriptionScopeNextResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.listByResourceGroup_2'
    name: >-
      listByResourceGroup(string, DeploymentsListByResourceGroupOptionalParams,
      ServiceCallback<DeploymentListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function listByResourceGroup(resourceGroupName: string, options:
        DeploymentsListByResourceGroupOptionalParams, callback:
        ServiceCallback<DeploymentListResult>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: >-
            The name of the resource group with the deployments to get. The name
            is

            case insensitive.
        - id: options
          type:
            - '@azure/arm-resources.DeploymentsListByResourceGroupOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/arm-resources.DeploymentListResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.DeploymentsListByResourceGroupResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.listByResourceGroup'
    name: >-
      listByResourceGroup(string,
      Models.DeploymentsListByResourceGroupOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: Get all the deployments for a resource group.
    syntax:
      content: >-
        function listByResourceGroup(resourceGroupName: string, options?:
        Models.DeploymentsListByResourceGroupOptionalParams)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: >-
            The name of the resource group with the deployments to get. The name
            is

            case insensitive.
        - id: options
          type:
            - Models.DeploymentsListByResourceGroupOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.DeploymentsListByResourceGroupResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.listByResourceGroup_1'
    name: 'listByResourceGroup(string, ServiceCallback<DeploymentListResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function listByResourceGroup(resourceGroupName: string, callback:
        ServiceCallback<DeploymentListResult>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: >-
            The name of the resource group with the deployments to get. The name
            is

            case insensitive.
        - id: callback
          type:
            - ServiceCallback<@azure/arm-resources.DeploymentListResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.DeploymentsListByResourceGroupResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.listByResourceGroupNext'
    name: 'listByResourceGroupNext(string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Get all the deployments for a resource group.
    syntax:
      content: >-
        function listByResourceGroupNext(nextPageLink: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: nextPageLink
          type:
            - string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.DeploymentsListByResourceGroupNextResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.listByResourceGroupNext_2'
    name: >-
      listByResourceGroupNext(string, RequestOptionsBase,
      ServiceCallback<DeploymentListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function listByResourceGroupNext(nextPageLink: string, options:
        RequestOptionsBase, callback: ServiceCallback<DeploymentListResult>)
      parameters:
        - id: nextPageLink
          type:
            - string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/arm-resources.DeploymentListResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.DeploymentsListByResourceGroupNextResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.listByResourceGroupNext_1'
    name: 'listByResourceGroupNext(string, ServiceCallback<DeploymentListResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function listByResourceGroupNext(nextPageLink: string, callback:
        ServiceCallback<DeploymentListResult>)
      parameters:
        - id: nextPageLink
          type:
            - string
          description: The NextLink from the previous successful call to List operation.
        - id: callback
          type:
            - ServiceCallback<@azure/arm-resources.DeploymentListResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.DeploymentsListByResourceGroupNextResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.validate'
    name: 'validate(string, string, Deployment, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Validates whether the specified template is syntactically correct and will
      be accepted by Azure

      Resource Manager..
    syntax:
      content: >-
        function validate(resourceGroupName: string, deploymentName: string,
        parameters: Deployment, options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: |-
            The name of the resource group the template will be deployed to. The
            name is case insensitive.
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: parameters
          type:
            - '@azure/arm-resources.Deployment'
          description: Parameters to validate.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.DeploymentsValidateResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.validate_2'
    name: >-
      validate(string, string, Deployment, RequestOptionsBase,
      ServiceCallback<DeploymentValidateResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function validate(resourceGroupName: string, deploymentName: string,
        parameters: Deployment, options: RequestOptionsBase, callback:
        ServiceCallback<DeploymentValidateResult>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: |-
            The name of the resource group the template will be deployed to. The
            name is case insensitive.
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: parameters
          type:
            - '@azure/arm-resources.Deployment'
          description: Parameters to validate.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/arm-resources.DeploymentValidateResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.DeploymentsValidateResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.validate_1'
    name: >-
      validate(string, string, Deployment,
      ServiceCallback<DeploymentValidateResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function validate(resourceGroupName: string, deploymentName: string,
        parameters: Deployment, callback:
        ServiceCallback<DeploymentValidateResult>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: |-
            The name of the resource group the template will be deployed to. The
            name is case insensitive.
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: parameters
          type:
            - '@azure/arm-resources.Deployment'
          description: Parameters to validate.
        - id: callback
          type:
            - ServiceCallback<@azure/arm-resources.DeploymentValidateResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.DeploymentsValidateResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.validateAtSubscriptionScope'
    name: 'validateAtSubscriptionScope(string, Deployment, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Validates whether the specified template is syntactically correct and will
      be accepted by Azure

      Resource Manager..
    syntax:
      content: >-
        function validateAtSubscriptionScope(deploymentName: string, parameters:
        Deployment, options?: msRest.RequestOptionsBase)
      parameters:
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: parameters
          type:
            - '@azure/arm-resources.Deployment'
          description: Parameters to validate.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.DeploymentsValidateAtSubscriptionScopeResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.validateAtSubscriptionScope_2'
    name: >-
      validateAtSubscriptionScope(string, Deployment, RequestOptionsBase,
      ServiceCallback<DeploymentValidateResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function validateAtSubscriptionScope(deploymentName: string, parameters:
        Deployment, options: RequestOptionsBase, callback:
        ServiceCallback<DeploymentValidateResult>)
      parameters:
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: parameters
          type:
            - '@azure/arm-resources.Deployment'
          description: Parameters to validate.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/arm-resources.DeploymentValidateResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.DeploymentsValidateAtSubscriptionScopeResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.validateAtSubscriptionScope_1'
    name: >-
      validateAtSubscriptionScope(string, Deployment,
      ServiceCallback<DeploymentValidateResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function validateAtSubscriptionScope(deploymentName: string, parameters:
        Deployment, callback: ServiceCallback<DeploymentValidateResult>)
      parameters:
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: parameters
          type:
            - '@azure/arm-resources.Deployment'
          description: Parameters to validate.
        - id: callback
          type:
            - ServiceCallback<@azure/arm-resources.DeploymentValidateResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.DeploymentsValidateAtSubscriptionScopeResponse>
    package: '@azure/arm-resources'
references:
  - uid: '@azure/arm-resources.ResourceManagementClientContext'
    name: ResourceManagementClientContext
    spec.typeScript:
      - name: ResourceManagementClientContext
        fullName: ResourceManagementClientContext
        uid: '@azure/arm-resources.ResourceManagementClientContext'
  - uid: '@azure/arm-resources.Deployment'
    name: Deployment
    spec.typeScript:
      - name: Deployment
        fullName: Deployment
        uid: '@azure/arm-resources.Deployment'
  - uid: ServiceCallback<@azure/arm-resources.DeploymentExportResult>
    name: DeploymentExportResult>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: DeploymentExportResult
        fullName: DeploymentExportResult
        uid: '@azure/arm-resources.DeploymentExportResult'
      - name: '>'
        fullName: '>'
  - uid: ServiceCallback<@azure/arm-resources.DeploymentExtended>
    name: DeploymentExtended>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: DeploymentExtended
        fullName: DeploymentExtended
        uid: '@azure/arm-resources.DeploymentExtended'
      - name: '>'
        fullName: '>'
  - uid: ServiceCallback<@azure/arm-resources.DeploymentListResult>
    name: DeploymentListResult>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: DeploymentListResult
        fullName: DeploymentListResult
        uid: '@azure/arm-resources.DeploymentListResult'
      - name: '>'
        fullName: '>'
  - uid: '@azure/arm-resources.DeploymentsListAtSubscriptionScopeOptionalParams'
    name: DeploymentsListAtSubscriptionScopeOptionalParams
    spec.typeScript:
      - name: DeploymentsListAtSubscriptionScopeOptionalParams
        fullName: DeploymentsListAtSubscriptionScopeOptionalParams
        uid: '@azure/arm-resources.DeploymentsListAtSubscriptionScopeOptionalParams'
  - uid: '@azure/arm-resources.DeploymentsListByResourceGroupOptionalParams'
    name: DeploymentsListByResourceGroupOptionalParams
    spec.typeScript:
      - name: DeploymentsListByResourceGroupOptionalParams
        fullName: DeploymentsListByResourceGroupOptionalParams
        uid: '@azure/arm-resources.DeploymentsListByResourceGroupOptionalParams'
  - uid: ServiceCallback<@azure/arm-resources.DeploymentValidateResult>
    name: DeploymentValidateResult>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: DeploymentValidateResult
        fullName: DeploymentValidateResult
        uid: '@azure/arm-resources.DeploymentValidateResult'
      - name: '>'
        fullName: '>'
