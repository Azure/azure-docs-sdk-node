### YamlMime:TSType
name: VolumeClaimSpec
uid: '@azure/arm-iotoperations.VolumeClaimSpec'
package: '@azure/arm-iotoperations'
summary: VolumeClaimSpec properties
fullName: VolumeClaimSpec
remarks: ''
isDeprecated: false
type: interface
properties:
  - name: accessModes
    uid: '@azure/arm-iotoperations.VolumeClaimSpec.accessModes'
    package: '@azure/arm-iotoperations'
    summary: >-
      AccessModes contains the desired access modes the volume should have. More
      info:
      https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
    fullName: accessModes
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'accessModes?: string[]'
      return:
        description: ''
        type: string[]
  - name: dataSource
    uid: '@azure/arm-iotoperations.VolumeClaimSpec.dataSource'
    package: '@azure/arm-iotoperations'
    summary: >-
      This field can be used to specify either: * An existing VolumeSnapshot
      object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC
      (PersistentVolumeClaim) If the provisioner or an external controller can
      support the specified data source, it will create a new volume based on
      the contents of the specified data source. If the AnyVolumeDataSource
      feature gate is enabled, this field will always have the same contents as
      the DataSourceRef field.
    fullName: dataSource
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'dataSource?: LocalKubernetesReference'
      return:
        description: ''
        type: <xref uid="@azure/arm-iotoperations.LocalKubernetesReference" />
  - name: dataSourceRef
    uid: '@azure/arm-iotoperations.VolumeClaimSpec.dataSourceRef'
    package: '@azure/arm-iotoperations'
    summary: >-
      Specifies the object from which to populate the volume with data, if a
      non-empty volume is desired. This may be any local object from a non-empty
      API group (non core object) or a PersistentVolumeClaim object. When this
      field is specified, volume binding will only succeed if the type of the
      specified object matches some installed volume populator or dynamic
      provisioner. This field will replace the functionality of the DataSource
      field and as such if both fields are non-empty, they must have the same
      value. For backwards compatibility, both fields (DataSource and
      DataSourceRef) will be set to the same value automatically if one of them
      is empty and the other is non-empty. There are two important differences
      between DataSource and DataSourceRef: * While DataSource only allows two
      specific types of objects, DataSourceRef allows any non-core object, as
      well as PersistentVolumeClaim objects. * While DataSource ignores
      disallowed values (dropping them), DataSourceRef preserves all values, and
      generates an error if a disallowed value is specified. (Beta) Using this
      field requires the AnyVolumeDataSource feature gate to be enabled.
    fullName: dataSourceRef
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'dataSourceRef?: KubernetesReference'
      return:
        description: ''
        type: <xref uid="@azure/arm-iotoperations.KubernetesReference" />
  - name: resources
    uid: '@azure/arm-iotoperations.VolumeClaimSpec.resources'
    package: '@azure/arm-iotoperations'
    summary: >-
      Resources represents the minimum resources the volume should have. If
      RecoverVolumeExpansionFailure feature is enabled users are allowed to
      specify resource requirements that are lower than previous value but must
      still be higher than capacity recorded in the status field of the claim.
      More info:
      https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
    fullName: resources
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'resources?: VolumeClaimResourceRequirements'
      return:
        description: ''
        type: >-
          <xref uid="@azure/arm-iotoperations.VolumeClaimResourceRequirements"
          />
  - name: selector
    uid: '@azure/arm-iotoperations.VolumeClaimSpec.selector'
    package: '@azure/arm-iotoperations'
    summary: A label query over volumes to consider for binding.
    fullName: selector
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'selector?: VolumeClaimSpecSelector'
      return:
        description: ''
        type: <xref uid="@azure/arm-iotoperations.VolumeClaimSpecSelector" />
  - name: storageClassName
    uid: '@azure/arm-iotoperations.VolumeClaimSpec.storageClassName'
    package: '@azure/arm-iotoperations'
    summary: >-
      Name of the StorageClass required by the claim. More info:
      https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
    fullName: storageClassName
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'storageClassName?: string'
      return:
        description: ''
        type: string
  - name: volumeMode
    uid: '@azure/arm-iotoperations.VolumeClaimSpec.volumeMode'
    package: '@azure/arm-iotoperations'
    summary: >-
      volumeMode defines what type of volume is required by the claim. Value of
      Filesystem is implied when not included in claim spec. This is a beta
      feature.
    fullName: volumeMode
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'volumeMode?: string'
      return:
        description: ''
        type: string
  - name: volumeName
    uid: '@azure/arm-iotoperations.VolumeClaimSpec.volumeName'
    package: '@azure/arm-iotoperations'
    summary: >-
      VolumeName is the binding reference to the PersistentVolume backing this
      claim.
    fullName: volumeName
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'volumeName?: string'
      return:
        description: ''
        type: string
