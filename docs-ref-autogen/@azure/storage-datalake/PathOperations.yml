### YamlMime:UniversalReference
items:
  - uid: '@azure/storage-datalake.PathOperations'
    name: PathOperations
    fullName: PathOperations
    children:
      - '@azure/storage-datalake.PathOperations.create'
      - '@azure/storage-datalake.PathOperations.create_2'
      - '@azure/storage-datalake.PathOperations.create_1'
      - '@azure/storage-datalake.PathOperations.deleteMethod'
      - '@azure/storage-datalake.PathOperations.deleteMethod_2'
      - '@azure/storage-datalake.PathOperations.deleteMethod_1'
      - '@azure/storage-datalake.PathOperations.getProperties'
      - '@azure/storage-datalake.PathOperations.getProperties_2'
      - '@azure/storage-datalake.PathOperations.getProperties_1'
      - '@azure/storage-datalake.PathOperations.lease'
      - '@azure/storage-datalake.PathOperations.lease_2'
      - '@azure/storage-datalake.PathOperations.lease_1'
      - '@azure/storage-datalake.PathOperations.list'
      - '@azure/storage-datalake.PathOperations.list_2'
      - '@azure/storage-datalake.PathOperations.list_1'
      - '@azure/storage-datalake.PathOperations.constructor'
      - '@azure/storage-datalake.PathOperations.read'
      - '@azure/storage-datalake.PathOperations.read_2'
      - '@azure/storage-datalake.PathOperations.read_1'
      - '@azure/storage-datalake.PathOperations.update'
      - '@azure/storage-datalake.PathOperations.update_2'
      - '@azure/storage-datalake.PathOperations.update_1'
    langs:
      - typeScript
    type: class
    summary: Class representing a PathOperations.
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathOperations.create'
    name: 'create(string, string, Models.PathCreateOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Create or rename a file or directory.    By default, the destination is
      overwritten and if the

      destination already exists and has a lease the lease is broken.  This
      operation supports

      conditional HTTP requests.  For more information, see [Specifying
      Conditional Headers for Blob

      Service

      Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).

      To fail if the destination already exists, use a conditional request with
      If-None-Match: "*".
    syntax:
      content: >-
        function create(filesystem: string, path: string, options?:
        Models.PathCreateOptionalParams)
      parameters:
        - id: filesystem
          type:
            - string
          description: The filesystem identifier.
        - id: path
          type:
            - string
          description: The file or directory path.
        - id: options
          type:
            - Models.PathCreateOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.PathCreateResponse>
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathOperations.create_2'
    name: 'create(string, string, PathCreateOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function create(filesystem: string, path: string, options:
        PathCreateOptionalParams, callback: ServiceCallback<void>)
      parameters:
        - id: filesystem
          type:
            - string
          description: The filesystem identifier.
        - id: path
          type:
            - string
          description: The file or directory path.
        - id: options
          type:
            - '@azure/storage-datalake.PathCreateOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
      return:
        type:
          - Promise<Models.PathCreateResponse>
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathOperations.create_1'
    name: 'create(string, string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function create(filesystem: string, path: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: filesystem
          type:
            - string
          description: The filesystem identifier.
        - id: path
          type:
            - string
          description: The file or directory path.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
      return:
        type:
          - Promise<Models.PathCreateResponse>
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathOperations.deleteMethod'
    name: 'deleteMethod(string, string, Models.PathDeleteMethodOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Delete the file or directory. This operation supports conditional HTTP
      requests.  For more

      information, see [Specifying Conditional Headers for Blob Service

      Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
    syntax:
      content: >-
        function deleteMethod(filesystem: string, path: string, options?:
        Models.PathDeleteMethodOptionalParams)
      parameters:
        - id: filesystem
          type:
            - string
          description: The filesystem identifier.
        - id: path
          type:
            - string
          description: The file or directory path.
        - id: options
          type:
            - Models.PathDeleteMethodOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.PathDeleteResponse>
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathOperations.deleteMethod_2'
    name: >-
      deleteMethod(string, string, PathDeleteMethodOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function deleteMethod(filesystem: string, path: string, options:
        PathDeleteMethodOptionalParams, callback: ServiceCallback<void>)
      parameters:
        - id: filesystem
          type:
            - string
          description: The filesystem identifier.
        - id: path
          type:
            - string
          description: The file or directory path.
        - id: options
          type:
            - '@azure/storage-datalake.PathDeleteMethodOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
      return:
        type:
          - Promise<Models.PathDeleteResponse>
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathOperations.deleteMethod_1'
    name: 'deleteMethod(string, string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function deleteMethod(filesystem: string, path: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: filesystem
          type:
            - string
          description: The filesystem identifier.
        - id: path
          type:
            - string
          description: The file or directory path.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
      return:
        type:
          - Promise<Models.PathDeleteResponse>
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathOperations.getProperties'
    name: 'getProperties(string, string, Models.PathGetPropertiesOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Get the properties for a file or directory, and optionally include the
      access control list.

      This operation supports conditional HTTP requests.  For more information,
      see [Specifying

      Conditional Headers for Blob Service

      Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
    syntax:
      content: >-
        function getProperties(filesystem: string, path: string, options?:
        Models.PathGetPropertiesOptionalParams)
      parameters:
        - id: filesystem
          type:
            - string
          description: The filesystem identifier.
        - id: path
          type:
            - string
          description: The file or directory path.
        - id: options
          type:
            - Models.PathGetPropertiesOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.PathGetPropertiesResponse>
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathOperations.getProperties_2'
    name: >-
      getProperties(string, string, PathGetPropertiesOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getProperties(filesystem: string, path: string, options:
        PathGetPropertiesOptionalParams, callback: ServiceCallback<void>)
      parameters:
        - id: filesystem
          type:
            - string
          description: The filesystem identifier.
        - id: path
          type:
            - string
          description: The file or directory path.
        - id: options
          type:
            - '@azure/storage-datalake.PathGetPropertiesOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
      return:
        type:
          - Promise<Models.PathGetPropertiesResponse>
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathOperations.getProperties_1'
    name: 'getProperties(string, string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getProperties(filesystem: string, path: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: filesystem
          type:
            - string
          description: The filesystem identifier.
        - id: path
          type:
            - string
          description: The file or directory path.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
      return:
        type:
          - Promise<Models.PathGetPropertiesResponse>
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathOperations.lease'
    name: >-
      lease(Models.PathLeaseAction, string, string,
      Models.PathLeaseOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Create and manage a lease to restrict write and delete access to the path.
      This operation

      supports conditional HTTP requests.  For more information, see [Specifying
      Conditional Headers

      for Blob Service

      Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
    syntax:
      content: >-
        function lease(xMsLeaseAction: Models.PathLeaseAction, filesystem:
        string, path: string, options?: Models.PathLeaseOptionalParams)
      parameters:
        - id: xMsLeaseAction
          type:
            - Models.PathLeaseAction
          description: >-
            There are five lease actions: "acquire", "break", "change", "renew",
            and

            "release". Use "acquire" and specify the "x-ms-proposed-lease-id"
            and "x-ms-lease-duration" to

            acquire a new lease. Use "break" to break an existing lease. When a
            lease is broken, the lease

            break period is allowed to elapse, during which time no lease
            operation except break and release

            can be performed on the file. When a lease is successfully broken,
            the response indicates the

            interval in seconds until a new lease can be acquired. Use "change"
            and specify the current

            lease ID in "x-ms-lease-id" and the new lease ID in
            "x-ms-proposed-lease-id" to change the lease

            ID of an active lease. Use "renew" and specify the "x-ms-lease-id"
            to renew an existing lease.

            Use "release" and specify the "x-ms-lease-id" to release a lease.
            Possible values include:

            'acquire', 'break', 'change', 'renew', 'release'
        - id: filesystem
          type:
            - string
          description: The filesystem identifier.
        - id: path
          type:
            - string
          description: The file or directory path.
        - id: options
          type:
            - Models.PathLeaseOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.PathLeaseResponse>
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathOperations.lease_2'
    name: >-
      lease(Models.PathLeaseAction, string, string, PathLeaseOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function lease(xMsLeaseAction: Models.PathLeaseAction, filesystem:
        string, path: string, options: PathLeaseOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: xMsLeaseAction
          type:
            - Models.PathLeaseAction
          description: >-
            There are five lease actions: "acquire", "break", "change", "renew",
            and

            "release". Use "acquire" and specify the "x-ms-proposed-lease-id"
            and "x-ms-lease-duration" to

            acquire a new lease. Use "break" to break an existing lease. When a
            lease is broken, the lease

            break period is allowed to elapse, during which time no lease
            operation except break and release

            can be performed on the file. When a lease is successfully broken,
            the response indicates the

            interval in seconds until a new lease can be acquired. Use "change"
            and specify the current

            lease ID in "x-ms-lease-id" and the new lease ID in
            "x-ms-proposed-lease-id" to change the lease

            ID of an active lease. Use "renew" and specify the "x-ms-lease-id"
            to renew an existing lease.

            Use "release" and specify the "x-ms-lease-id" to release a lease.
            Possible values include:

            'acquire', 'break', 'change', 'renew', 'release'
        - id: filesystem
          type:
            - string
          description: The filesystem identifier.
        - id: path
          type:
            - string
          description: The file or directory path.
        - id: options
          type:
            - '@azure/storage-datalake.PathLeaseOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
      return:
        type:
          - Promise<Models.PathLeaseResponse>
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathOperations.lease_1'
    name: 'lease(Models.PathLeaseAction, string, string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function lease(xMsLeaseAction: Models.PathLeaseAction, filesystem:
        string, path: string, callback: ServiceCallback<void>)
      parameters:
        - id: xMsLeaseAction
          type:
            - Models.PathLeaseAction
          description: >-
            There are five lease actions: "acquire", "break", "change", "renew",
            and

            "release". Use "acquire" and specify the "x-ms-proposed-lease-id"
            and "x-ms-lease-duration" to

            acquire a new lease. Use "break" to break an existing lease. When a
            lease is broken, the lease

            break period is allowed to elapse, during which time no lease
            operation except break and release

            can be performed on the file. When a lease is successfully broken,
            the response indicates the

            interval in seconds until a new lease can be acquired. Use "change"
            and specify the current

            lease ID in "x-ms-lease-id" and the new lease ID in
            "x-ms-proposed-lease-id" to change the lease

            ID of an active lease. Use "renew" and specify the "x-ms-lease-id"
            to renew an existing lease.

            Use "release" and specify the "x-ms-lease-id" to release a lease.
            Possible values include:

            'acquire', 'break', 'change', 'renew', 'release'
        - id: filesystem
          type:
            - string
          description: The filesystem identifier.
        - id: path
          type:
            - string
          description: The file or directory path.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
      return:
        type:
          - Promise<Models.PathLeaseResponse>
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathOperations.list'
    name: 'list(boolean, string, Models.PathListOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: List filesystem paths and their properties.
    syntax:
      content: >-
        function list(recursive: boolean, filesystem: string, options?:
        Models.PathListOptionalParams)
      parameters:
        - id: recursive
          type:
            - boolean
          description: >-
            If "true", all paths are listed; otherwise, only paths at the root
            of the

            filesystem are listed.  If "directory" is specified, the list will
            only include paths that share

            the same root.
        - id: filesystem
          type:
            - string
          description: >-
            The filesystem identifier.  The value must start and end with a
            letter or

            number and must contain only letters, numbers, and the dash (-)
            character.  Consecutive dashes

            are not permitted.  All letters must be lowercase.  The value must
            have between 3 and 63

            characters.
        - id: options
          type:
            - Models.PathListOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.PathListResponse>
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathOperations.list_2'
    name: 'list(boolean, string, PathListOptionalParams, ServiceCallback<PathList>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function list(recursive: boolean, filesystem: string, options:
        PathListOptionalParams, callback: ServiceCallback<PathList>)
      parameters:
        - id: recursive
          type:
            - boolean
          description: >-
            If "true", all paths are listed; otherwise, only paths at the root
            of the

            filesystem are listed.  If "directory" is specified, the list will
            only include paths that share

            the same root.
        - id: filesystem
          type:
            - string
          description: >-
            The filesystem identifier.  The value must start and end with a
            letter or

            number and must contain only letters, numbers, and the dash (-)
            character.  Consecutive dashes

            are not permitted.  All letters must be lowercase.  The value must
            have between 3 and 63

            characters.
        - id: options
          type:
            - '@azure/storage-datalake.PathListOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/storage-datalake.PathList>
          description: |
            The callback
      return:
        type:
          - Promise<Models.PathListResponse>
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathOperations.list_1'
    name: 'list(boolean, string, ServiceCallback<PathList>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function list(recursive: boolean, filesystem: string, callback:
        ServiceCallback<PathList>)
      parameters:
        - id: recursive
          type:
            - boolean
          description: >-
            If "true", all paths are listed; otherwise, only paths at the root
            of the

            filesystem are listed.  If "directory" is specified, the list will
            only include paths that share

            the same root.
        - id: filesystem
          type:
            - string
          description: >-
            The filesystem identifier.  The value must start and end with a
            letter or

            number and must contain only letters, numbers, and the dash (-)
            character.  Consecutive dashes

            are not permitted.  All letters must be lowercase.  The value must
            have between 3 and 63

            characters.
        - id: callback
          type:
            - ServiceCallback<@azure/storage-datalake.PathList>
          description: |
            The callback
      return:
        type:
          - Promise<Models.PathListResponse>
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathOperations.constructor'
    name: PathOperations(DataLakeStorageClientContext)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Create a PathOperations.
    syntax:
      content: 'new PathOperations(client: DataLakeStorageClientContext)'
      parameters:
        - id: client
          type:
            - '@azure/storage-datalake.DataLakeStorageClientContext'
          description: |
            Reference to the service client.
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathOperations.read'
    name: 'read(string, string, Models.PathReadOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Read the contents of a file.  For read operations, range requests are
      supported. This operation

      supports conditional HTTP requests.  For more information, see [Specifying
      Conditional Headers

      for Blob Service

      Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
    syntax:
      content: >-
        function read(filesystem: string, path: string, options?:
        Models.PathReadOptionalParams)
      parameters:
        - id: filesystem
          type:
            - string
          description: The filesystem identifier.
        - id: path
          type:
            - string
          description: The file or directory path.
        - id: options
          type:
            - Models.PathReadOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.PathReadResponse>
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathOperations.read_2'
    name: 'read(string, string, PathReadOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function read(filesystem: string, path: string, options:
        PathReadOptionalParams, callback: ServiceCallback<void>)
      parameters:
        - id: filesystem
          type:
            - string
          description: The filesystem identifier.
        - id: path
          type:
            - string
          description: The file or directory path.
        - id: options
          type:
            - '@azure/storage-datalake.PathReadOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
      return:
        type:
          - Promise<Models.PathReadResponse>
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathOperations.read_1'
    name: 'read(string, string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function read(filesystem: string, path: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: filesystem
          type:
            - string
          description: The filesystem identifier.
        - id: path
          type:
            - string
          description: The file or directory path.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
      return:
        type:
          - Promise<Models.PathReadResponse>
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathOperations.update'
    name: >-
      update(Models.PathUpdateAction, string, string,
      Models.PathUpdateOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Uploads data to be appended to a file, flushes (writes) previously
      uploaded data to a file, sets

      properties for a file or directory, or sets access control for a file or
      directory. Data can

      only be appended to a file. This operation supports conditional HTTP
      requests. For more

      information, see [Specifying Conditional Headers for Blob Service

      Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
    syntax:
      content: >-
        function update(action: Models.PathUpdateAction, filesystem: string,
        path: string, options?: Models.PathUpdateOptionalParams)
      parameters:
        - id: action
          type:
            - Models.PathUpdateAction
          description: >-
            The action must be "append" to upload data to be appended to a file,
            "flush" to

            flush previously uploaded data to a file, "setProperties" to set the
            properties of a file or

            directory, or "setAccessControl" to set the owner, group,
            permissions, or access control list

            for a file or directory.  Note that Hierarchical Namespace must be
            enabled for the account in

            order to use access control.  Also note that the Access Control List
            (ACL) includes permissions

            for the owner, owning group, and others, so the x-ms-permissions and
            x-ms-acl request headers

            are mutually exclusive. Possible values include: 'append', 'flush',
            'setProperties',

            'setAccessControl'
        - id: filesystem
          type:
            - string
          description: The filesystem identifier.
        - id: path
          type:
            - string
          description: The file or directory path.
        - id: options
          type:
            - Models.PathUpdateOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.PathUpdateResponse>
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathOperations.update_2'
    name: >-
      update(Models.PathUpdateAction, string, string, PathUpdateOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function update(action: Models.PathUpdateAction, filesystem: string,
        path: string, options: PathUpdateOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: action
          type:
            - Models.PathUpdateAction
          description: >-
            The action must be "append" to upload data to be appended to a file,
            "flush" to

            flush previously uploaded data to a file, "setProperties" to set the
            properties of a file or

            directory, or "setAccessControl" to set the owner, group,
            permissions, or access control list

            for a file or directory.  Note that Hierarchical Namespace must be
            enabled for the account in

            order to use access control.  Also note that the Access Control List
            (ACL) includes permissions

            for the owner, owning group, and others, so the x-ms-permissions and
            x-ms-acl request headers

            are mutually exclusive. Possible values include: 'append', 'flush',
            'setProperties',

            'setAccessControl'
        - id: filesystem
          type:
            - string
          description: The filesystem identifier.
        - id: path
          type:
            - string
          description: The file or directory path.
        - id: options
          type:
            - '@azure/storage-datalake.PathUpdateOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
      return:
        type:
          - Promise<Models.PathUpdateResponse>
    package: '@azure/storage-datalake'
  - uid: '@azure/storage-datalake.PathOperations.update_1'
    name: 'update(Models.PathUpdateAction, string, string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function update(action: Models.PathUpdateAction, filesystem: string,
        path: string, callback: ServiceCallback<void>)
      parameters:
        - id: action
          type:
            - Models.PathUpdateAction
          description: >-
            The action must be "append" to upload data to be appended to a file,
            "flush" to

            flush previously uploaded data to a file, "setProperties" to set the
            properties of a file or

            directory, or "setAccessControl" to set the owner, group,
            permissions, or access control list

            for a file or directory.  Note that Hierarchical Namespace must be
            enabled for the account in

            order to use access control.  Also note that the Access Control List
            (ACL) includes permissions

            for the owner, owning group, and others, so the x-ms-permissions and
            x-ms-acl request headers

            are mutually exclusive. Possible values include: 'append', 'flush',
            'setProperties',

            'setAccessControl'
        - id: filesystem
          type:
            - string
          description: The filesystem identifier.
        - id: path
          type:
            - string
          description: The file or directory path.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
      return:
        type:
          - Promise<Models.PathUpdateResponse>
    package: '@azure/storage-datalake'
references:
  - uid: '@azure/storage-datalake.DataLakeStorageClientContext'
    name: DataLakeStorageClientContext
    spec.typeScript:
      - name: DataLakeStorageClientContext
        fullName: DataLakeStorageClientContext
        uid: '@azure/storage-datalake.DataLakeStorageClientContext'
  - uid: '@azure/storage-datalake.PathCreateOptionalParams'
    name: PathCreateOptionalParams
    spec.typeScript:
      - name: PathCreateOptionalParams
        fullName: PathCreateOptionalParams
        uid: '@azure/storage-datalake.PathCreateOptionalParams'
  - uid: '@azure/storage-datalake.PathDeleteMethodOptionalParams'
    name: PathDeleteMethodOptionalParams
    spec.typeScript:
      - name: PathDeleteMethodOptionalParams
        fullName: PathDeleteMethodOptionalParams
        uid: '@azure/storage-datalake.PathDeleteMethodOptionalParams'
  - uid: '@azure/storage-datalake.PathGetPropertiesOptionalParams'
    name: PathGetPropertiesOptionalParams
    spec.typeScript:
      - name: PathGetPropertiesOptionalParams
        fullName: PathGetPropertiesOptionalParams
        uid: '@azure/storage-datalake.PathGetPropertiesOptionalParams'
  - uid: '@azure/storage-datalake.PathLeaseOptionalParams'
    name: PathLeaseOptionalParams
    spec.typeScript:
      - name: PathLeaseOptionalParams
        fullName: PathLeaseOptionalParams
        uid: '@azure/storage-datalake.PathLeaseOptionalParams'
  - uid: ServiceCallback<@azure/storage-datalake.PathList>
    name: PathList>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: PathList
        fullName: PathList
        uid: '@azure/storage-datalake.PathList'
      - name: '>'
        fullName: '>'
  - uid: '@azure/storage-datalake.PathListOptionalParams'
    name: PathListOptionalParams
    spec.typeScript:
      - name: PathListOptionalParams
        fullName: PathListOptionalParams
        uid: '@azure/storage-datalake.PathListOptionalParams'
  - uid: '@azure/storage-datalake.PathReadOptionalParams'
    name: PathReadOptionalParams
    spec.typeScript:
      - name: PathReadOptionalParams
        fullName: PathReadOptionalParams
        uid: '@azure/storage-datalake.PathReadOptionalParams'
  - uid: '@azure/storage-datalake.PathUpdateOptionalParams'
    name: PathUpdateOptionalParams
    spec.typeScript:
      - name: PathUpdateOptionalParams
        fullName: PathUpdateOptionalParams
        uid: '@azure/storage-datalake.PathUpdateOptionalParams'
