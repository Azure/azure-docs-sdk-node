### YamlMime:UniversalReference
items:
  - uid: '@azure/digital-twins.DigitalTwinsClient'
    name: DigitalTwinsClient
    fullName: DigitalTwinsClient
    children:
      - '@azure/digital-twins.DigitalTwinsClient.createModels'
      - '@azure/digital-twins.DigitalTwinsClient.decomissionModel'
      - '@azure/digital-twins.DigitalTwinsClient.deleteDigitalTwin'
      - '@azure/digital-twins.DigitalTwinsClient.deleteEventRoute'
      - '@azure/digital-twins.DigitalTwinsClient.deleteModel'
      - '@azure/digital-twins.DigitalTwinsClient.deleteRelationship'
      - '@azure/digital-twins.DigitalTwinsClient.constructor'
      - '@azure/digital-twins.DigitalTwinsClient.getComponent'
      - '@azure/digital-twins.DigitalTwinsClient.getDigitalTwin'
      - '@azure/digital-twins.DigitalTwinsClient.getEventRoute'
      - '@azure/digital-twins.DigitalTwinsClient.getModel'
      - '@azure/digital-twins.DigitalTwinsClient.getRelationship'
      - '@azure/digital-twins.DigitalTwinsClient.listEventRoutes'
      - '@azure/digital-twins.DigitalTwinsClient.listIncomingRelationships'
      - '@azure/digital-twins.DigitalTwinsClient.listModels'
      - '@azure/digital-twins.DigitalTwinsClient.listRelationships'
      - '@azure/digital-twins.DigitalTwinsClient.publishComponentTelemetry'
      - '@azure/digital-twins.DigitalTwinsClient.publishTelemetry'
      - '@azure/digital-twins.DigitalTwinsClient.queryTwins'
      - '@azure/digital-twins.DigitalTwinsClient.updateComponent'
      - '@azure/digital-twins.DigitalTwinsClient.updateDigitalTwin'
      - '@azure/digital-twins.DigitalTwinsClient.updateRelationship'
      - '@azure/digital-twins.DigitalTwinsClient.upsertDigitalTwin'
      - '@azure/digital-twins.DigitalTwinsClient.upsertEventRoute'
      - '@azure/digital-twins.DigitalTwinsClient.upsertRelationship'
    langs:
      - typeScript
    type: class
    summary: Client for Azure IoT DigitalTwins API.
    package: '@azure/digital-twins'
  - uid: '@azure/digital-twins.DigitalTwinsClient.createModels'
    name: 'createModels(any[], OperationOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Create one or many
    syntax:
      content: 'function createModels(models: any[], options?: OperationOptions)'
      parameters:
        - id: models
          type:
            - 'any[]'
          description: >-
            The set of models to create. Each string corresponds to exactly one
            model.
        - id: options
          type:
            - OperationOptions
          description: The operation options
          optional: true
      return:
        type:
          - Promise<@azure/digital-twins.DigitalTwinModelsAddResponse>
        description: The created application/json models and the http response.
    package: '@azure/digital-twins'
  - uid: '@azure/digital-twins.DigitalTwinsClient.decomissionModel'
    name: 'decomissionModel(string, any[], OperationOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Decommission a model using a json patch.
    syntax:
      content: >-
        function decomissionModel(modelId: string, updateModel: any[], options?:
        OperationOptions)
      parameters:
        - id: modelId
          type:
            - string
          description: The Id of the model to decommission.
        - id: updateModel
          type:
            - 'any[]'
          description: >-
            An update specification described by JSON Patch. Only the
            decommissioned

            property can be replaced.
        - id: options
          type:
            - OperationOptions
          description: The operation options
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: The http response.
    package: '@azure/digital-twins'
  - uid: '@azure/digital-twins.DigitalTwinsClient.deleteDigitalTwin'
    name: 'deleteDigitalTwin(string, string, OperationOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Delete a digital twin
    syntax:
      content: >-
        function deleteDigitalTwin(digitalTwinId: string, etag?: string,
        options?: OperationOptions)
      parameters:
        - id: digitalTwinId
          type:
            - string
          description: The Id of the digital twin to delete.
        - id: etag
          type:
            - string
          description: >-
            Only perform the operation if the entity's etag matches one of the
            etags provided or * is

            provided
          optional: true
        - id: options
          type:
            - OperationOptions
          description: The operation options
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: The http response.
    package: '@azure/digital-twins'
  - uid: '@azure/digital-twins.DigitalTwinsClient.deleteEventRoute'
    name: 'deleteEventRoute(string, OperationOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Delete an event route.
    syntax:
      content: >-
        function deleteEventRoute(eventRouteId: string, options?:
        OperationOptions)
      parameters:
        - id: eventRouteId
          type:
            - string
          description: The Id of the model to delete.
        - id: options
          type:
            - OperationOptions
          description: The operation options
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: The http response.
    package: '@azure/digital-twins'
  - uid: '@azure/digital-twins.DigitalTwinsClient.deleteModel'
    name: 'deleteModel(string, OperationOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Delete a model.
    syntax:
      content: 'function deleteModel(modelId: string, options?: OperationOptions)'
      parameters:
        - id: modelId
          type:
            - string
          description: The Id of the model to delete.
        - id: options
          type:
            - OperationOptions
          description: The operation options
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: The http response.
    package: '@azure/digital-twins'
  - uid: '@azure/digital-twins.DigitalTwinsClient.deleteRelationship'
    name: 'deleteRelationship(string, string, string, OperationOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Delete a relationship on a digital twin.
    syntax:
      content: >-
        function deleteRelationship(digitalTwinId: string, relationshipId:
        string, etag?: string, options?: OperationOptions)
      parameters:
        - id: digitalTwinId
          type:
            - string
          description: The Id of the source digital twin.
        - id: relationshipId
          type:
            - string
          description: The Id of the relationship to delete.
        - id: etag
          type:
            - string
          description: >-
            Only perform the operation if the entity's etag matches one of the
            etags provided or * is
          optional: true
        - id: options
          type:
            - OperationOptions
          description: The operation options
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: The http response.
    package: '@azure/digital-twins'
  - uid: '@azure/digital-twins.DigitalTwinsClient.constructor'
    name: 'DigitalTwinsClient(string, TokenCredential, DigitalTwinsClientOptions)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: >-
      Creates an instance of AzureDigitalTwinsAPI.

      Example usage:

      ```ts

      const { DigitalTwinsClient, ServiceClientCredentials } =
      require("@azure/digital-twins");


      const client = new DigitalTwinsClient(
        "<endpoint>",
        new DefaultAzureCredential();
      );

      ```
    syntax:
      content: >-
        new DigitalTwinsClient(endpointUrl: string, credential: TokenCredential,
        options?: DigitalTwinsClientOptions)
      parameters:
        - id: endpointUrl
          type:
            - string
          description: The endpoint URL of the service.
        - id: credential
          type:
            - TokenCredential
          description: Used to authenticate requests to the service.
        - id: options
          type:
            - '@azure/digital-twins.DigitalTwinsClientOptions'
          description: |
            Used to configure the service client.
          optional: true
    package: '@azure/digital-twins'
  - uid: '@azure/digital-twins.DigitalTwinsClient.getComponent'
    name: 'getComponent(string, string, OperationOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Get a component on a digital twin.
    syntax:
      content: >-
        function getComponent(digitalTwinId: string, componentPath: string,
        options?: OperationOptions)
      parameters:
        - id: digitalTwinId
          type:
            - string
          description: The Id of the digital twin.
        - id: componentPath
          type:
            - string
          description: The component being retrieved.
        - id: options
          type:
            - OperationOptions
          description: The operation options
          optional: true
      return:
        type:
          - Promise<@azure/digital-twins.DigitalTwinsGetComponentResponse>
        description: >-
          Json string representation of the component corresponding to the
          provided componentPath and the HTTP response.
    package: '@azure/digital-twins'
  - uid: '@azure/digital-twins.DigitalTwinsClient.getDigitalTwin'
    name: 'getDigitalTwin(string, OperationOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Get a digital twin
    syntax:
      content: >-
        function getDigitalTwin(digitalTwinId: string, options?:
        OperationOptions)
      parameters:
        - id: digitalTwinId
          type:
            - string
          description: The Id of the digital twin.
        - id: options
          type:
            - OperationOptions
          description: The operation options
          optional: true
      return:
        type:
          - Promise<@azure/digital-twins.DigitalTwinsGetByIdResponse>
        description: The application/json digital twin and the http response.
    package: '@azure/digital-twins'
  - uid: '@azure/digital-twins.DigitalTwinsClient.getEventRoute'
    name: 'getEventRoute(string, OperationOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Get an event route.
    syntax:
      content: 'function getEventRoute(eventRouteId: string, options?: OperationOptions)'
      parameters:
        - id: eventRouteId
          type:
            - string
          description: ''
        - id: options
          type:
            - OperationOptions
          description: The operation options
          optional: true
      return:
        type:
          - Promise<@azure/digital-twins.EventRoutesGetByIdResponse>
        description: The application/json event route and the http response.
    package: '@azure/digital-twins'
  - uid: '@azure/digital-twins.DigitalTwinsClient.getModel'
    name: 'getModel(string, boolean, OperationOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Get a model, including the model metadata and the model definition.'
    syntax:
      content: >-
        function getModel(modelId: string, includeModelDefinition?: boolean,
        options?: OperationOptions)
      parameters:
        - id: modelId
          type:
            - string
          description: The Id of the model.
        - id: includeModelDefinition
          type:
            - boolean
          description: >-
            When true the model definition will be returned as part of the
            result. Default value: false.
          optional: true
        - id: options
          type:
            - OperationOptions
          description: The operation options
          optional: true
      return:
        type:
          - Promise<@azure/digital-twins.DigitalTwinModelsGetByIdResponse>
        description: The application/json model and the http response.
    package: '@azure/digital-twins'
  - uid: '@azure/digital-twins.DigitalTwinsClient.getRelationship'
    name: 'getRelationship(string, string, OperationOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Get a relationship on a digital twin.
    syntax:
      content: >-
        function getRelationship(digitalTwinId: string, relationshipId: string,
        options?: OperationOptions)
      parameters:
        - id: digitalTwinId
          type:
            - string
          description: The Id of the source digital twin.
        - id: relationshipId
          type:
            - string
          description: The Id of the relationship to retrieve.
        - id: options
          type:
            - OperationOptions
          description: The operation options
          optional: true
      return:
        type:
          - Promise<@azure/digital-twins.DigitalTwinsGetByIdResponse>
        description: >-
          The pageable list of application/json relationships belonging to the
          specified digital twin and the http response.
    package: '@azure/digital-twins'
  - uid: '@azure/digital-twins.DigitalTwinsClient.listEventRoutes'
    name: listEventRoutes(number)
    children: []
    type: method
    langs:
      - typeScript
    summary: List the event routes in a digital twins instance.
    syntax:
      content: 'function listEventRoutes(maxItemCount?: number)'
      parameters:
        - id: maxItemCount
          type:
            - number
          description: >-
            The maximum number of items to retrieve per request. The server may
            choose to return less than

            the requested max. Default value: -1.
          optional: true
      return:
        type:
          - >-
            PagedAsyncIterableIterator<@azure/digital-twins.EventRoute,
            @azure/digital-twins.EventRoutesListNextResponse>
        description: The application/json event route and the http response.
    package: '@azure/digital-twins'
  - uid: '@azure/digital-twins.DigitalTwinsClient.listIncomingRelationships'
    name: 'listIncomingRelationships(string, RequestOptionsBase & PageSettings)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Retrieve all incoming relationships for a digital twin.
    syntax:
      content: >-
        function listIncomingRelationships(digitalTwinId: string, options?:
        RequestOptionsBase & PageSettings)
      parameters:
        - id: digitalTwinId
          type:
            - string
          description: |
            The Id of the digital twin.
        - id: options
          type:
            - RequestOptionsBase & PageSettings
          description: ''
          optional: true
      return:
        type:
          - >-
            PagedAsyncIterableIterator<@azure/digital-twins.IncomingRelationship,
            @azure/digital-twins.DigitalTwinsListIncomingRelationshipsResponse>
        description: ''
    package: '@azure/digital-twins'
  - uid: '@azure/digital-twins.DigitalTwinsClient.listModels'
    name: 'listModels(string[], boolean, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Get the list of models
    syntax:
      content: >-
        function listModels(dependeciesFor?: string[], includeModelDefinition?:
        boolean, maxItemCount?: number)
      parameters:
        - id: dependeciesFor
          type:
            - 'string[]'
          description: >-
            The model Ids to have dependencies retrieved. If omitted, all models
            are retrieved.
          optional: true
        - id: includeModelDefinition
          type:
            - boolean
          description: >-
            Whether to include the model definition in the result. If false,
            only the model metadata will be returned.
          optional: true
        - id: maxItemCount
          type:
            - number
          description: >-
            The maximum number of items to retrieve per request. The server may
            choose to return less than the requested max. Default value: -1.
          optional: true
      return:
        type:
          - >-
            PagedAsyncIterableIterator<@azure/digital-twins.ModelData,
            @azure/digital-twins.DigitalTwinModelsListResponse>
        description: A pageable set of application/json models and the http response.
    package: '@azure/digital-twins'
  - uid: '@azure/digital-twins.DigitalTwinsClient.listRelationships'
    name: 'listRelationships(string, RequestOptionsBase & PageSettings)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Retrieve relationships for a digital twin.
    syntax:
      content: >-
        function listRelationships(digitalTwinId: string, options?:
        RequestOptionsBase & PageSettings)
      parameters:
        - id: digitalTwinId
          type:
            - string
          description: |
            The Id of the digital twin.
        - id: options
          type:
            - RequestOptionsBase & PageSettings
          description: ''
          optional: true
      return:
        type:
          - >-
            PagedAsyncIterableIterator<any,
            @azure/digital-twins.DigitalTwinsListRelationshipsResponse>
        description: ''
    package: '@azure/digital-twins'
  - uid: '@azure/digital-twins.DigitalTwinsClient.publishComponentTelemetry'
    name: >-
      publishComponentTelemetry(string, string, string, string,
      OperationOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Publish telemetry from a digital twin's component, which is then consumed
      by one or many destination endpoints (subscribers) defined under.
    syntax:
      content: >-
        function publishComponentTelemetry(digitalTwinId: string, componentPath:
        string, payload: string, messageId?: string, options?: OperationOptions)
      parameters:
        - id: digitalTwinId
          type:
            - string
          description: The Id of the digital twin to delete.
        - id: componentPath
          type:
            - string
          description: The name of the DTDL component.
        - id: payload
          type:
            - string
          description: The application/json telemetry payload to be sent.
        - id: messageId
          type:
            - string
          description: The message Id.
          optional: true
        - id: options
          type:
            - OperationOptions
          description: The operation options
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: The http response.
    package: '@azure/digital-twins'
  - uid: '@azure/digital-twins.DigitalTwinsClient.publishTelemetry'
    name: 'publishTelemetry(string, any, string, OperationOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Publish telemetry from a digital twin, which is then consumed by one or
      many destination endpoints (subscribers) defined under.
    syntax:
      content: >-
        function publishTelemetry(digitalTwinId: string, payload: any,
        messageId?: string, options?: OperationOptions)
      parameters:
        - id: digitalTwinId
          type:
            - string
          description: The Id of the digital twin to delete.
        - id: payload
          type:
            - any
          description: The application/json telemetry payload to be sent.
        - id: messageId
          type:
            - string
          description: The message Id.
          optional: true
        - id: options
          type:
            - OperationOptions
          description: The operation options
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: The http response.
    package: '@azure/digital-twins'
  - uid: '@azure/digital-twins.DigitalTwinsClient.queryTwins'
    name: queryTwins(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: Query for digital twins.
    syntax:
      content: 'function queryTwins(query?: string)'
      parameters:
        - id: query
          type:
            - string
          description: 'The query string, in SQL-like syntax.'
          optional: true
      return:
        type:
          - >-
            PagedAsyncIterableIterator<any,
            @azure/digital-twins.QueryQueryTwinsResponse>
        description: The pageable list of query results.
    package: '@azure/digital-twins'
  - uid: '@azure/digital-twins.DigitalTwinsClient.updateComponent'
    name: 'updateComponent(string, string, any[], string, OperationOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Update properties of a component on a digital twin using a JSON patch.
    syntax:
      content: >-
        function updateComponent(digitalTwinId: string, componentPath: string,
        componentPatch?: any[], etag?: string, options?: OperationOptions)
      parameters:
        - id: digitalTwinId
          type:
            - string
          description: The Id of the digital twin.
        - id: componentPath
          type:
            - string
          description: The component being updated.
        - id: componentPatch
          type:
            - 'any[]'
          description: >-
            The application/json-patch+json operations to be performed on the
            specified digital twin's component.
          optional: true
        - id: etag
          type:
            - string
          description: >-
            The etag of the component to update. Only perform the operation if
            the entity's etag matches one of the etags provided or * is
            provided.
          optional: true
        - id: options
          type:
            - OperationOptions
          description: The operation options
          optional: true
      return:
        type:
          - Promise<@azure/digital-twins.DigitalTwinsUpdateComponentResponse>
        description: The http response.
    package: '@azure/digital-twins'
  - uid: '@azure/digital-twins.DigitalTwinsClient.updateDigitalTwin'
    name: 'updateDigitalTwin(string, any, string, OperationOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Update a digital twin using a json patch.
    syntax:
      content: >-
        function updateDigitalTwin(digitalTwinId: string, twinPatch: any, etag?:
        string, options?: OperationOptions)
      parameters:
        - id: digitalTwinId
          type:
            - string
          description: The Id of the digital twin.
        - id: twinPatch
          type:
            - any
          description: >-
            An update specification described by JSON Patch. Updates to property
            values

            and $model elements may happen in the same request. Operations are
            limited to add, replace and

            remove.
        - id: etag
          type:
            - string
          description: >-
            Only perform the operation if the entity's etag matches one of the
            etags provided or * is

            provided
          optional: true
        - id: options
          type:
            - OperationOptions
          description: The operation options
          optional: true
      return:
        type:
          - Promise<@azure/digital-twins.DigitalTwinsUpdateResponse>
        description: The http response.
    package: '@azure/digital-twins'
  - uid: '@azure/digital-twins.DigitalTwinsClient.updateRelationship'
    name: 'updateRelationship(string, string, any[], string, OperationOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Updates the properties of a relationship on a digital twin using a JSON
      patch.
    syntax:
      content: >-
        function updateRelationship(digitalTwinId: string, relationshipId:
        string, relationshipPatch: any[], etag?: string, options?:
        OperationOptions)
      parameters:
        - id: digitalTwinId
          type:
            - string
          description: The Id of the digital twin to delete.
        - id: relationshipId
          type:
            - string
          description: The Id of the relationship to be updated.
        - id: relationshipPatch
          type:
            - 'any[]'
          description: >-
            The application/json-patch+json operations to be performed on the
            specified digital twin's relationship.
        - id: etag
          type:
            - string
          description: >-
            Only perform the operation if the entity's etag matches one of the
            etags provided or * is
          optional: true
        - id: options
          type:
            - OperationOptions
          description: |
            The operation options
            provided
          optional: true
      return:
        type:
          - Promise<@azure/digital-twins.DigitalTwinsUpdateRelationshipResponse>
        description: ''
    package: '@azure/digital-twins'
  - uid: '@azure/digital-twins.DigitalTwinsClient.upsertDigitalTwin'
    name: 'upsertDigitalTwin(string, string, OperationOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Create or update a digital twin
    syntax:
      content: >-
        function upsertDigitalTwin(digitalTwinId: string, digitalTwinJson:
        string, options?: OperationOptions)
      parameters:
        - id: digitalTwinId
          type:
            - string
          description: The Id of the digital twin to create or update.
        - id: digitalTwinJson
          type:
            - string
          description: The application/json digital twin to create.
        - id: options
          type:
            - OperationOptions
          description: The operation options
          optional: true
      return:
        type:
          - Promise<@azure/digital-twins.DigitalTwinsAddResponse>
        description: The created application/json digital twin and the http response.
    package: '@azure/digital-twins'
  - uid: '@azure/digital-twins.DigitalTwinsClient.upsertEventRoute'
    name: 'upsertEventRoute(string, string, string, OperationOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Create or update an event route.
    syntax:
      content: >-
        function upsertEventRoute(eventRouteId: string, endpointId: string,
        filter?: string, options?: OperationOptions)
      parameters:
        - id: eventRouteId
          type:
            - string
          description: The Id of the event route to create or update.
        - id: endpointId
          type:
            - string
          description: The id of the endpoint this event route is bound to.
        - id: filter
          type:
            - string
          description: >-
            An expression which describes the events which are routed to the
            endpoint.
          optional: true
        - id: options
          type:
            - OperationOptions
          description: The operation options
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: The http response.
    package: '@azure/digital-twins'
  - uid: '@azure/digital-twins.DigitalTwinsClient.upsertRelationship'
    name: 'upsertRelationship(string, string, any, OperationOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Create or update a relationship on a digital twin.
    syntax:
      content: >-
        function upsertRelationship(digitalTwinId: string, relationshipId:
        string, relationship: any, options?: OperationOptions)
      parameters:
        - id: digitalTwinId
          type:
            - string
          description: The Id of the source digital twin.
        - id: relationshipId
          type:
            - string
          description: The Id of the relationship to create.
        - id: relationship
          type:
            - any
          description: ''
        - id: options
          type:
            - OperationOptions
          description: |
            The operation options
          optional: true
      return:
        type:
          - Promise<@azure/digital-twins.DigitalTwinsAddRelationshipResponse>
        description: ''
    package: '@azure/digital-twins'
references:
  - uid: '@azure/digital-twins.DigitalTwinsClientOptions'
    name: DigitalTwinsClientOptions
    spec.typeScript:
      - name: DigitalTwinsClientOptions
        fullName: DigitalTwinsClientOptions
        uid: '@azure/digital-twins.DigitalTwinsClientOptions'
  - uid: Promise<@azure/digital-twins.DigitalTwinModelsAddResponse>
    name: DigitalTwinModelsAddResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: DigitalTwinModelsAddResponse
        fullName: DigitalTwinModelsAddResponse
        uid: '@azure/digital-twins.DigitalTwinModelsAddResponse'
      - name: '>'
        fullName: '>'
  - uid: Promise<@azure/digital-twins.DigitalTwinsGetComponentResponse>
    name: DigitalTwinsGetComponentResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: DigitalTwinsGetComponentResponse
        fullName: DigitalTwinsGetComponentResponse
        uid: '@azure/digital-twins.DigitalTwinsGetComponentResponse'
      - name: '>'
        fullName: '>'
  - uid: Promise<@azure/digital-twins.DigitalTwinsGetByIdResponse>
    name: DigitalTwinsGetByIdResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: DigitalTwinsGetByIdResponse
        fullName: DigitalTwinsGetByIdResponse
        uid: '@azure/digital-twins.DigitalTwinsGetByIdResponse'
      - name: '>'
        fullName: '>'
  - uid: Promise<@azure/digital-twins.EventRoutesGetByIdResponse>
    name: EventRoutesGetByIdResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: EventRoutesGetByIdResponse
        fullName: EventRoutesGetByIdResponse
        uid: '@azure/digital-twins.EventRoutesGetByIdResponse'
      - name: '>'
        fullName: '>'
  - uid: Promise<@azure/digital-twins.DigitalTwinModelsGetByIdResponse>
    name: DigitalTwinModelsGetByIdResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: DigitalTwinModelsGetByIdResponse
        fullName: DigitalTwinModelsGetByIdResponse
        uid: '@azure/digital-twins.DigitalTwinModelsGetByIdResponse'
      - name: '>'
        fullName: '>'
  - uid: >-
      PagedAsyncIterableIterator<@azure/digital-twins.EventRoute,
      @azure/digital-twins.EventRoutesListNextResponse>
    name: EventRoutesListNextResponse>
    spec.typeScript:
      - name: PagedAsyncIterableIterator<
        fullName: PagedAsyncIterableIterator<
      - name: EventRoute
        fullName: EventRoute
        uid: '@azure/digital-twins.EventRoute'
      - name: ', '
        fullName: ', '
      - name: EventRoutesListNextResponse
        fullName: EventRoutesListNextResponse
        uid: '@azure/digital-twins.EventRoutesListNextResponse'
      - name: '>'
        fullName: '>'
  - uid: >-
      PagedAsyncIterableIterator<@azure/digital-twins.IncomingRelationship,
      @azure/digital-twins.DigitalTwinsListIncomingRelationshipsResponse>
    name: DigitalTwinsListIncomingRelationshipsResponse>
    spec.typeScript:
      - name: PagedAsyncIterableIterator<
        fullName: PagedAsyncIterableIterator<
      - name: IncomingRelationship
        fullName: IncomingRelationship
        uid: '@azure/digital-twins.IncomingRelationship'
      - name: ', '
        fullName: ', '
      - name: DigitalTwinsListIncomingRelationshipsResponse
        fullName: DigitalTwinsListIncomingRelationshipsResponse
        uid: '@azure/digital-twins.DigitalTwinsListIncomingRelationshipsResponse'
      - name: '>'
        fullName: '>'
  - uid: >-
      PagedAsyncIterableIterator<@azure/digital-twins.ModelData,
      @azure/digital-twins.DigitalTwinModelsListResponse>
    name: DigitalTwinModelsListResponse>
    spec.typeScript:
      - name: PagedAsyncIterableIterator<
        fullName: PagedAsyncIterableIterator<
      - name: ModelData
        fullName: ModelData
        uid: '@azure/digital-twins.ModelData'
      - name: ', '
        fullName: ', '
      - name: DigitalTwinModelsListResponse
        fullName: DigitalTwinModelsListResponse
        uid: '@azure/digital-twins.DigitalTwinModelsListResponse'
      - name: '>'
        fullName: '>'
  - uid: >-
      PagedAsyncIterableIterator<any,
      @azure/digital-twins.DigitalTwinsListRelationshipsResponse>
    name: DigitalTwinsListRelationshipsResponse>
    spec.typeScript:
      - name: 'PagedAsyncIterableIterator<any, '
        fullName: 'PagedAsyncIterableIterator<any, '
      - name: DigitalTwinsListRelationshipsResponse
        fullName: DigitalTwinsListRelationshipsResponse
        uid: '@azure/digital-twins.DigitalTwinsListRelationshipsResponse'
      - name: '>'
        fullName: '>'
  - uid: >-
      PagedAsyncIterableIterator<any,
      @azure/digital-twins.QueryQueryTwinsResponse>
    name: QueryQueryTwinsResponse>
    spec.typeScript:
      - name: 'PagedAsyncIterableIterator<any, '
        fullName: 'PagedAsyncIterableIterator<any, '
      - name: QueryQueryTwinsResponse
        fullName: QueryQueryTwinsResponse
        uid: '@azure/digital-twins.QueryQueryTwinsResponse'
      - name: '>'
        fullName: '>'
  - uid: Promise<@azure/digital-twins.DigitalTwinsUpdateComponentResponse>
    name: DigitalTwinsUpdateComponentResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: DigitalTwinsUpdateComponentResponse
        fullName: DigitalTwinsUpdateComponentResponse
        uid: '@azure/digital-twins.DigitalTwinsUpdateComponentResponse'
      - name: '>'
        fullName: '>'
  - uid: Promise<@azure/digital-twins.DigitalTwinsUpdateResponse>
    name: DigitalTwinsUpdateResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: DigitalTwinsUpdateResponse
        fullName: DigitalTwinsUpdateResponse
        uid: '@azure/digital-twins.DigitalTwinsUpdateResponse'
      - name: '>'
        fullName: '>'
  - uid: Promise<@azure/digital-twins.DigitalTwinsUpdateRelationshipResponse>
    name: DigitalTwinsUpdateRelationshipResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: DigitalTwinsUpdateRelationshipResponse
        fullName: DigitalTwinsUpdateRelationshipResponse
        uid: '@azure/digital-twins.DigitalTwinsUpdateRelationshipResponse'
      - name: '>'
        fullName: '>'
  - uid: Promise<@azure/digital-twins.DigitalTwinsAddResponse>
    name: DigitalTwinsAddResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: DigitalTwinsAddResponse
        fullName: DigitalTwinsAddResponse
        uid: '@azure/digital-twins.DigitalTwinsAddResponse'
      - name: '>'
        fullName: '>'
  - uid: Promise<@azure/digital-twins.DigitalTwinsAddRelationshipResponse>
    name: DigitalTwinsAddRelationshipResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: DigitalTwinsAddRelationshipResponse
        fullName: DigitalTwinsAddRelationshipResponse
        uid: '@azure/digital-twins.DigitalTwinsAddRelationshipResponse'
      - name: '>'
        fullName: '>'
