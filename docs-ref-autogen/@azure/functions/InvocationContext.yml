### YamlMime:TSType
name: InvocationContext
uid: '@azure/functions.InvocationContext'
package: '@azure/functions'
summary: Contains metadata and helper methods specific to this invocation
fullName: InvocationContext
remarks: ''
isDeprecated: false
type: class
constructors:
  - name: InvocationContext(InvocationContextInit)
    uid: '@azure/functions.InvocationContext.constructor'
    package: '@azure/functions'
    summary: >-
      For testing purposes only. This will always be constructed for you when
      run in the context of the Azure Functions runtime
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'new InvocationContext(init?: InvocationContextInit)'
      parameters:
        - id: init
          type: <xref uid="@azure/functions.InvocationContextInit" />
          description: ''
properties:
  - name: extraInputs
    uid: '@azure/functions.InvocationContext.extraInputs'
    package: '@azure/functions'
    summary: An object used to get secondary inputs
    fullName: extraInputs
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'extraInputs: InvocationContextExtraInputs'
      return:
        description: ''
        type: <xref uid="@azure/functions.InvocationContextExtraInputs" />
  - name: extraOutputs
    uid: '@azure/functions.InvocationContext.extraOutputs'
    package: '@azure/functions'
    summary: An object used to set secondary outputs
    fullName: extraOutputs
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'extraOutputs: InvocationContextExtraOutputs'
      return:
        description: ''
        type: <xref uid="@azure/functions.InvocationContextExtraOutputs" />
  - name: functionName
    uid: '@azure/functions.InvocationContext.functionName'
    package: '@azure/functions'
    summary: The name of the function that is being invoked
    fullName: functionName
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'functionName: string'
      return:
        description: ''
        type: string
  - name: invocationId
    uid: '@azure/functions.InvocationContext.invocationId'
    package: '@azure/functions'
    summary: A unique guid specific to this invocation
    fullName: invocationId
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'invocationId: string'
      return:
        description: ''
        type: string
  - name: options
    uid: '@azure/functions.InvocationContext.options'
    package: '@azure/functions'
    summary: >-
      The options used when registering the function

      NOTE: This value may differ slightly from the original because it has been
      validated and defaults may have been explicitly added
    fullName: options
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'options: EffectiveFunctionOptions'
      return:
        description: ''
        type: <xref uid="@azure/functions.EffectiveFunctionOptions" />
  - name: retryContext
    uid: '@azure/functions.InvocationContext.retryContext'
    package: '@azure/functions'
    summary: >-
      The retry context of the current function execution if the retry policy is
      defined
    fullName: retryContext
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'retryContext?: RetryContext'
      return:
        description: ''
        type: <xref uid="@azure/functions.RetryContext" />
  - name: traceContext
    uid: '@azure/functions.InvocationContext.traceContext'
    package: '@azure/functions'
    summary: TraceContext information to enable distributed tracing scenarios
    fullName: traceContext
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'traceContext?: TraceContext'
      return:
        description: ''
        type: <xref uid="@azure/functions.TraceContext" />
  - name: triggerMetadata
    uid: '@azure/functions.InvocationContext.triggerMetadata'
    package: '@azure/functions'
    summary: >-
      Metadata about the trigger or undefined if the metadata is already
      represented elsewhere

      For example, this will be undefined for http and timer triggers because
      you can find that information on the request & timer object instead
    fullName: triggerMetadata
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'triggerMetadata?: TriggerMetadata'
      return:
        description: ''
        type: <xref uid="@azure/functions.TriggerMetadata" />
methods:
  - name: debug(any[])
    uid: '@azure/functions.InvocationContext.debug'
    package: '@azure/functions'
    summary: >-
      The recommended way to log debug data (level 1) during invocation.

      Similar to Node.js's `console.debug`, but has integration with Azure
      features like application insights
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function debug(args: any[])'
      parameters:
        - id: args
          type: any[]
          description: ''
  - name: error(any[])
    uid: '@azure/functions.InvocationContext.error'
    package: '@azure/functions'
    summary: >-
      The recommended way to log error data (level 4) during invocation.

      Similar to Node.js's `console.error`, but has integration with Azure
      features like application insights
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function error(args: any[])'
      parameters:
        - id: args
          type: any[]
          description: ''
  - name: info(any[])
    uid: '@azure/functions.InvocationContext.info'
    package: '@azure/functions'
    summary: >-
      The recommended way to log information data (level 2) during invocation.

      Similar to Node.js's `console.info`, but has integration with Azure
      features like application insights
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function info(args: any[])'
      parameters:
        - id: args
          type: any[]
          description: ''
  - name: log(any[])
    uid: '@azure/functions.InvocationContext.log'
    package: '@azure/functions'
    summary: >-
      The recommended way to log data during invocation.

      Similar to Node.js's `console.log`, but has integration with Azure
      features like application insights

      Uses the 'information' log level
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function log(args: any[])'
      parameters:
        - id: args
          type: any[]
          description: ''
  - name: trace(any[])
    uid: '@azure/functions.InvocationContext.trace'
    package: '@azure/functions'
    summary: >-
      The recommended way to log trace data (level 0) during invocation.

      Similar to Node.js's `console.trace`, but has integration with Azure
      features like application insights
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function trace(args: any[])'
      parameters:
        - id: args
          type: any[]
          description: ''
  - name: warn(any[])
    uid: '@azure/functions.InvocationContext.warn'
    package: '@azure/functions'
    summary: >-
      The recommended way to log warning data (level 3) during invocation.

      Similar to Node.js's `console.warn`, but has integration with Azure
      features like application insights
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function warn(args: any[])'
      parameters:
        - id: args
          type: any[]
          description: ''
