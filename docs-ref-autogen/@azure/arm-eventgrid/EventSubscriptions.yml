### YamlMime:UniversalReference
items:
  - uid: '@azure/arm-eventgrid.EventSubscriptions'
    name: EventSubscriptions
    fullName: EventSubscriptions
    children:
      - '@azure/arm-eventgrid.EventSubscriptions.beginCreateOrUpdate'
      - '@azure/arm-eventgrid.EventSubscriptions.beginDeleteMethod'
      - '@azure/arm-eventgrid.EventSubscriptions.beginUpdate'
      - '@azure/arm-eventgrid.EventSubscriptions.createOrUpdate'
      - '@azure/arm-eventgrid.EventSubscriptions.deleteMethod'
      - '@azure/arm-eventgrid.EventSubscriptions.constructor'
      - '@azure/arm-eventgrid.EventSubscriptions.get'
      - '@azure/arm-eventgrid.EventSubscriptions.get_2'
      - '@azure/arm-eventgrid.EventSubscriptions.get_1'
      - '@azure/arm-eventgrid.EventSubscriptions.getFullUrl'
      - '@azure/arm-eventgrid.EventSubscriptions.getFullUrl_2'
      - '@azure/arm-eventgrid.EventSubscriptions.getFullUrl_1'
      - '@azure/arm-eventgrid.EventSubscriptions.listByResource'
      - '@azure/arm-eventgrid.EventSubscriptions.listByResource_2'
      - '@azure/arm-eventgrid.EventSubscriptions.listByResource_1'
      - '@azure/arm-eventgrid.EventSubscriptions.listGlobalByResourceGroup'
      - '@azure/arm-eventgrid.EventSubscriptions.listGlobalByResourceGroup_2'
      - '@azure/arm-eventgrid.EventSubscriptions.listGlobalByResourceGroup_1'
      - >-
        @azure/arm-eventgrid.EventSubscriptions.listGlobalByResourceGroupForTopicType
      - >-
        @azure/arm-eventgrid.EventSubscriptions.listGlobalByResourceGroupForTopicType_2
      - >-
        @azure/arm-eventgrid.EventSubscriptions.listGlobalByResourceGroupForTopicType_1
      - '@azure/arm-eventgrid.EventSubscriptions.listGlobalBySubscription'
      - '@azure/arm-eventgrid.EventSubscriptions.listGlobalBySubscription_2'
      - '@azure/arm-eventgrid.EventSubscriptions.listGlobalBySubscription_1'
      - >-
        @azure/arm-eventgrid.EventSubscriptions.listGlobalBySubscriptionForTopicType
      - >-
        @azure/arm-eventgrid.EventSubscriptions.listGlobalBySubscriptionForTopicType_2
      - >-
        @azure/arm-eventgrid.EventSubscriptions.listGlobalBySubscriptionForTopicType_1
      - '@azure/arm-eventgrid.EventSubscriptions.listRegionalByResourceGroup'
      - '@azure/arm-eventgrid.EventSubscriptions.listRegionalByResourceGroup_2'
      - '@azure/arm-eventgrid.EventSubscriptions.listRegionalByResourceGroup_1'
      - >-
        @azure/arm-eventgrid.EventSubscriptions.listRegionalByResourceGroupForTopicType
      - >-
        @azure/arm-eventgrid.EventSubscriptions.listRegionalByResourceGroupForTopicType_2
      - >-
        @azure/arm-eventgrid.EventSubscriptions.listRegionalByResourceGroupForTopicType_1
      - '@azure/arm-eventgrid.EventSubscriptions.listRegionalBySubscription'
      - '@azure/arm-eventgrid.EventSubscriptions.listRegionalBySubscription_2'
      - '@azure/arm-eventgrid.EventSubscriptions.listRegionalBySubscription_1'
      - >-
        @azure/arm-eventgrid.EventSubscriptions.listRegionalBySubscriptionForTopicType
      - >-
        @azure/arm-eventgrid.EventSubscriptions.listRegionalBySubscriptionForTopicType_2
      - >-
        @azure/arm-eventgrid.EventSubscriptions.listRegionalBySubscriptionForTopicType_1
      - '@azure/arm-eventgrid.EventSubscriptions.update'
    langs:
      - typeScript
    type: class
    summary: Class representing a EventSubscriptions.
    package: '@azure/arm-eventgrid'
  - uid: '@azure/arm-eventgrid.EventSubscriptions.beginCreateOrUpdate'
    name: >-
      beginCreateOrUpdate(string, string, EventSubscription,
      msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Asynchronously creates a new event subscription or updates an existing
      event subscription based

      on the specified scope.
    syntax:
      content: >-
        function beginCreateOrUpdate(scope: string, eventSubscriptionName:
        string, eventSubscriptionInfo: EventSubscription, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: scope
          type:
            - string
          description: >-
            The identifier of the resource to which the event subscription needs
            to be created

            or updated. The scope can be a subscription, or a resource group, or
            a top level resource

            belonging to a resource provider namespace, or an EventGrid topic.
            For example, use

            '/subscriptions/{subscriptionId}/' for a subscription,

            '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}'
            for a resource group, and

            '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'

            for a resource, and

            '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'

            for an EventGrid topic.
        - id: eventSubscriptionName
          type:
            - string
          description: >-
            Name of the event subscription. Event subscription names must be

            between 3 and 64 characters in length and should use alphanumeric
            letters only.
        - id: eventSubscriptionInfo
          type:
            - '@azure/arm-eventgrid.EventSubscription'
          description: |-
            Event subscription properties containing the destination and filter
            information
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<LROPoller>
    package: '@azure/arm-eventgrid'
  - uid: '@azure/arm-eventgrid.EventSubscriptions.beginDeleteMethod'
    name: 'beginDeleteMethod(string, string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Delete an existing event subscription
    syntax:
      content: >-
        function beginDeleteMethod(scope: string, eventSubscriptionName: string,
        options?: msRest.RequestOptionsBase)
      parameters:
        - id: scope
          type:
            - string
          description: >-
            The scope of the event subscription. The scope can be a
            subscription, or a resource

            group, or a top level resource belonging to a resource provider
            namespace, or an EventGrid

            topic. For example, use '/subscriptions/{subscriptionId}/' for a
            subscription,

            '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}'
            for a resource group, and

            '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'

            for a resource, and

            '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'

            for an EventGrid topic.
        - id: eventSubscriptionName
          type:
            - string
          description: Name of the event subscription
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<LROPoller>
    package: '@azure/arm-eventgrid'
  - uid: '@azure/arm-eventgrid.EventSubscriptions.beginUpdate'
    name: >-
      beginUpdate(string, string, EventSubscriptionUpdateParameters,
      msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: Asynchronously updates an existing event subscription.
    syntax:
      content: >-
        function beginUpdate(scope: string, eventSubscriptionName: string,
        eventSubscriptionUpdateParameters: EventSubscriptionUpdateParameters,
        options?: msRest.RequestOptionsBase)
      parameters:
        - id: scope
          type:
            - string
          description: >-
            The scope of existing event subscription. The scope can be a
            subscription, or a

            resource group, or a top level resource belonging to a resource
            provider namespace, or an

            EventGrid topic. For example, use '/subscriptions/{subscriptionId}/'
            for a subscription,

            '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}'
            for a resource group, and

            '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'

            for a resource, and

            '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'

            for an EventGrid topic.
        - id: eventSubscriptionName
          type:
            - string
          description: Name of the event subscription to be updated
        - id: eventSubscriptionUpdateParameters
          type:
            - '@azure/arm-eventgrid.EventSubscriptionUpdateParameters'
          description: Updated event subscription information
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<LROPoller>
    package: '@azure/arm-eventgrid'
  - uid: '@azure/arm-eventgrid.EventSubscriptions.createOrUpdate'
    name: >-
      createOrUpdate(string, string, EventSubscription,
      msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Asynchronously creates a new event subscription or updates an existing
      event subscription based

      on the specified scope.
    syntax:
      content: >-
        function createOrUpdate(scope: string, eventSubscriptionName: string,
        eventSubscriptionInfo: EventSubscription, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: scope
          type:
            - string
          description: >-
            The identifier of the resource to which the event subscription needs
            to be created

            or updated. The scope can be a subscription, or a resource group, or
            a top level resource

            belonging to a resource provider namespace, or an EventGrid topic.
            For example, use

            '/subscriptions/{subscriptionId}/' for a subscription,

            '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}'
            for a resource group, and

            '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'

            for a resource, and

            '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'

            for an EventGrid topic.
        - id: eventSubscriptionName
          type:
            - string
          description: >-
            Name of the event subscription. Event subscription names must be

            between 3 and 64 characters in length and should use alphanumeric
            letters only.
        - id: eventSubscriptionInfo
          type:
            - '@azure/arm-eventgrid.EventSubscription'
          description: |-
            Event subscription properties containing the destination and filter
            information
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.EventSubscriptionsCreateOrUpdateResponse>
    package: '@azure/arm-eventgrid'
  - uid: '@azure/arm-eventgrid.EventSubscriptions.deleteMethod'
    name: 'deleteMethod(string, string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Delete an existing event subscription
    syntax:
      content: >-
        function deleteMethod(scope: string, eventSubscriptionName: string,
        options?: msRest.RequestOptionsBase)
      parameters:
        - id: scope
          type:
            - string
          description: >-
            The scope of the event subscription. The scope can be a
            subscription, or a resource

            group, or a top level resource belonging to a resource provider
            namespace, or an EventGrid

            topic. For example, use '/subscriptions/{subscriptionId}/' for a
            subscription,

            '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}'
            for a resource group, and

            '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'

            for a resource, and

            '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'

            for an EventGrid topic.
        - id: eventSubscriptionName
          type:
            - string
          description: Name of the event subscription
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/arm-eventgrid'
  - uid: '@azure/arm-eventgrid.EventSubscriptions.constructor'
    name: EventSubscriptions(EventGridManagementClientContext)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Create a EventSubscriptions.
    syntax:
      content: 'new EventSubscriptions(client: EventGridManagementClientContext)'
      parameters:
        - id: client
          type:
            - '@azure/arm-eventgrid.EventGridManagementClientContext'
          description: |
            Reference to the service client.
    package: '@azure/arm-eventgrid'
  - uid: '@azure/arm-eventgrid.EventSubscriptions.get'
    name: 'get(string, string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Get properties of an event subscription
    syntax:
      content: >-
        function get(scope: string, eventSubscriptionName: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: scope
          type:
            - string
          description: >-
            The scope of the event subscription. The scope can be a
            subscription, or a resource

            group, or a top level resource belonging to a resource provider
            namespace, or an EventGrid

            topic. For example, use '/subscriptions/{subscriptionId}/' for a
            subscription,

            '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}'
            for a resource group, and

            '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'

            for a resource, and

            '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'

            for an EventGrid topic.
        - id: eventSubscriptionName
          type:
            - string
          description: Name of the event subscription
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.EventSubscriptionsGetResponse>
    package: '@azure/arm-eventgrid'
  - uid: '@azure/arm-eventgrid.EventSubscriptions.get_2'
    name: >-
      get(string, string, RequestOptionsBase,
      ServiceCallback<EventSubscription>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function get(scope: string, eventSubscriptionName: string, options:
        RequestOptionsBase, callback: ServiceCallback<EventSubscription>)
      parameters:
        - id: scope
          type:
            - string
          description: >-
            The scope of the event subscription. The scope can be a
            subscription, or a resource

            group, or a top level resource belonging to a resource provider
            namespace, or an EventGrid

            topic. For example, use '/subscriptions/{subscriptionId}/' for a
            subscription,

            '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}'
            for a resource group, and

            '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'

            for a resource, and

            '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'

            for an EventGrid topic.
        - id: eventSubscriptionName
          type:
            - string
          description: Name of the event subscription
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/arm-eventgrid.EventSubscription>
          description: |
            The callback
      return:
        type:
          - Promise<Models.EventSubscriptionsGetResponse>
    package: '@azure/arm-eventgrid'
  - uid: '@azure/arm-eventgrid.EventSubscriptions.get_1'
    name: 'get(string, string, ServiceCallback<EventSubscription>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function get(scope: string, eventSubscriptionName: string, callback:
        ServiceCallback<EventSubscription>)
      parameters:
        - id: scope
          type:
            - string
          description: >-
            The scope of the event subscription. The scope can be a
            subscription, or a resource

            group, or a top level resource belonging to a resource provider
            namespace, or an EventGrid

            topic. For example, use '/subscriptions/{subscriptionId}/' for a
            subscription,

            '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}'
            for a resource group, and

            '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'

            for a resource, and

            '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'

            for an EventGrid topic.
        - id: eventSubscriptionName
          type:
            - string
          description: Name of the event subscription
        - id: callback
          type:
            - ServiceCallback<@azure/arm-eventgrid.EventSubscription>
          description: |
            The callback
      return:
        type:
          - Promise<Models.EventSubscriptionsGetResponse>
    package: '@azure/arm-eventgrid'
  - uid: '@azure/arm-eventgrid.EventSubscriptions.getFullUrl'
    name: 'getFullUrl(string, string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Get the full endpoint URL for an event subscription
    syntax:
      content: >-
        function getFullUrl(scope: string, eventSubscriptionName: string,
        options?: msRest.RequestOptionsBase)
      parameters:
        - id: scope
          type:
            - string
          description: >-
            The scope of the event subscription. The scope can be a
            subscription, or a resource

            group, or a top level resource belonging to a resource provider
            namespace, or an EventGrid

            topic. For example, use '/subscriptions/{subscriptionId}/' for a
            subscription,

            '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}'
            for a resource group, and

            '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'

            for a resource, and

            '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'

            for an EventGrid topic.
        - id: eventSubscriptionName
          type:
            - string
          description: Name of the event subscription
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.EventSubscriptionsGetFullUrlResponse>
    package: '@azure/arm-eventgrid'
  - uid: '@azure/arm-eventgrid.EventSubscriptions.getFullUrl_2'
    name: >-
      getFullUrl(string, string, RequestOptionsBase,
      ServiceCallback<EventSubscriptionFullUrl>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getFullUrl(scope: string, eventSubscriptionName: string,
        options: RequestOptionsBase, callback:
        ServiceCallback<EventSubscriptionFullUrl>)
      parameters:
        - id: scope
          type:
            - string
          description: >-
            The scope of the event subscription. The scope can be a
            subscription, or a resource

            group, or a top level resource belonging to a resource provider
            namespace, or an EventGrid

            topic. For example, use '/subscriptions/{subscriptionId}/' for a
            subscription,

            '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}'
            for a resource group, and

            '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'

            for a resource, and

            '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'

            for an EventGrid topic.
        - id: eventSubscriptionName
          type:
            - string
          description: Name of the event subscription
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/arm-eventgrid.EventSubscriptionFullUrl>
          description: |
            The callback
      return:
        type:
          - Promise<Models.EventSubscriptionsGetFullUrlResponse>
    package: '@azure/arm-eventgrid'
  - uid: '@azure/arm-eventgrid.EventSubscriptions.getFullUrl_1'
    name: 'getFullUrl(string, string, ServiceCallback<EventSubscriptionFullUrl>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getFullUrl(scope: string, eventSubscriptionName: string,
        callback: ServiceCallback<EventSubscriptionFullUrl>)
      parameters:
        - id: scope
          type:
            - string
          description: >-
            The scope of the event subscription. The scope can be a
            subscription, or a resource

            group, or a top level resource belonging to a resource provider
            namespace, or an EventGrid

            topic. For example, use '/subscriptions/{subscriptionId}/' for a
            subscription,

            '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}'
            for a resource group, and

            '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'

            for a resource, and

            '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'

            for an EventGrid topic.
        - id: eventSubscriptionName
          type:
            - string
          description: Name of the event subscription
        - id: callback
          type:
            - ServiceCallback<@azure/arm-eventgrid.EventSubscriptionFullUrl>
          description: |
            The callback
      return:
        type:
          - Promise<Models.EventSubscriptionsGetFullUrlResponse>
    package: '@azure/arm-eventgrid'
  - uid: '@azure/arm-eventgrid.EventSubscriptions.listByResource'
    name: 'listByResource(string, string, string, string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: List all event subscriptions that have been created for a specific topic
    syntax:
      content: >-
        function listByResource(resourceGroupName: string, providerNamespace:
        string, resourceTypeName: string, resourceName: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group within the user's subscription.
        - id: providerNamespace
          type:
            - string
          description: Namespace of the provider of the topic
        - id: resourceTypeName
          type:
            - string
          description: Name of the resource type
        - id: resourceName
          type:
            - string
          description: Name of the resource
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.EventSubscriptionsListByResourceResponse>
    package: '@azure/arm-eventgrid'
  - uid: '@azure/arm-eventgrid.EventSubscriptions.listByResource_2'
    name: >-
      listByResource(string, string, string, string, RequestOptionsBase,
      ServiceCallback<EventSubscriptionsListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function listByResource(resourceGroupName: string, providerNamespace:
        string, resourceTypeName: string, resourceName: string, options:
        RequestOptionsBase, callback:
        ServiceCallback<EventSubscriptionsListResult>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group within the user's subscription.
        - id: providerNamespace
          type:
            - string
          description: Namespace of the provider of the topic
        - id: resourceTypeName
          type:
            - string
          description: Name of the resource type
        - id: resourceName
          type:
            - string
          description: Name of the resource
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/arm-eventgrid.EventSubscriptionsListResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.EventSubscriptionsListByResourceResponse>
    package: '@azure/arm-eventgrid'
  - uid: '@azure/arm-eventgrid.EventSubscriptions.listByResource_1'
    name: >-
      listByResource(string, string, string, string,
      ServiceCallback<EventSubscriptionsListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function listByResource(resourceGroupName: string, providerNamespace:
        string, resourceTypeName: string, resourceName: string, callback:
        ServiceCallback<EventSubscriptionsListResult>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group within the user's subscription.
        - id: providerNamespace
          type:
            - string
          description: Namespace of the provider of the topic
        - id: resourceTypeName
          type:
            - string
          description: Name of the resource type
        - id: resourceName
          type:
            - string
          description: Name of the resource
        - id: callback
          type:
            - ServiceCallback<@azure/arm-eventgrid.EventSubscriptionsListResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.EventSubscriptionsListByResourceResponse>
    package: '@azure/arm-eventgrid'
  - uid: '@azure/arm-eventgrid.EventSubscriptions.listGlobalByResourceGroup'
    name: 'listGlobalByResourceGroup(string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      List all global event subscriptions under a specific Azure subscription
      and resource group
    syntax:
      content: >-
        function listGlobalByResourceGroup(resourceGroupName: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group within the user's subscription.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.EventSubscriptionsListGlobalByResourceGroupResponse>
    package: '@azure/arm-eventgrid'
  - uid: '@azure/arm-eventgrid.EventSubscriptions.listGlobalByResourceGroup_2'
    name: >-
      listGlobalByResourceGroup(string, RequestOptionsBase,
      ServiceCallback<EventSubscriptionsListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function listGlobalByResourceGroup(resourceGroupName: string, options:
        RequestOptionsBase, callback:
        ServiceCallback<EventSubscriptionsListResult>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group within the user's subscription.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/arm-eventgrid.EventSubscriptionsListResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.EventSubscriptionsListGlobalByResourceGroupResponse>
    package: '@azure/arm-eventgrid'
  - uid: '@azure/arm-eventgrid.EventSubscriptions.listGlobalByResourceGroup_1'
    name: >-
      listGlobalByResourceGroup(string,
      ServiceCallback<EventSubscriptionsListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function listGlobalByResourceGroup(resourceGroupName: string, callback:
        ServiceCallback<EventSubscriptionsListResult>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group within the user's subscription.
        - id: callback
          type:
            - ServiceCallback<@azure/arm-eventgrid.EventSubscriptionsListResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.EventSubscriptionsListGlobalByResourceGroupResponse>
    package: '@azure/arm-eventgrid'
  - uid: >-
      @azure/arm-eventgrid.EventSubscriptions.listGlobalByResourceGroupForTopicType
    name: >-
      listGlobalByResourceGroupForTopicType(string, string,
      msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      List all global event subscriptions under a resource group for a specific
      topic type.
    syntax:
      content: >-
        function listGlobalByResourceGroupForTopicType(resourceGroupName:
        string, topicTypeName: string, options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group within the user's subscription.
        - id: topicTypeName
          type:
            - string
          description: Name of the topic type
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<Models.EventSubscriptionsListGlobalByResourceGroupForTopicTypeResponse>
    package: '@azure/arm-eventgrid'
  - uid: >-
      @azure/arm-eventgrid.EventSubscriptions.listGlobalByResourceGroupForTopicType_2
    name: >-
      listGlobalByResourceGroupForTopicType(string, string, RequestOptionsBase,
      ServiceCallback<EventSubscriptionsListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function listGlobalByResourceGroupForTopicType(resourceGroupName:
        string, topicTypeName: string, options: RequestOptionsBase, callback:
        ServiceCallback<EventSubscriptionsListResult>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group within the user's subscription.
        - id: topicTypeName
          type:
            - string
          description: Name of the topic type
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/arm-eventgrid.EventSubscriptionsListResult>
          description: |
            The callback
      return:
        type:
          - >-
            Promise<Models.EventSubscriptionsListGlobalByResourceGroupForTopicTypeResponse>
    package: '@azure/arm-eventgrid'
  - uid: >-
      @azure/arm-eventgrid.EventSubscriptions.listGlobalByResourceGroupForTopicType_1
    name: >-
      listGlobalByResourceGroupForTopicType(string, string,
      ServiceCallback<EventSubscriptionsListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function listGlobalByResourceGroupForTopicType(resourceGroupName:
        string, topicTypeName: string, callback:
        ServiceCallback<EventSubscriptionsListResult>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group within the user's subscription.
        - id: topicTypeName
          type:
            - string
          description: Name of the topic type
        - id: callback
          type:
            - ServiceCallback<@azure/arm-eventgrid.EventSubscriptionsListResult>
          description: |
            The callback
      return:
        type:
          - >-
            Promise<Models.EventSubscriptionsListGlobalByResourceGroupForTopicTypeResponse>
    package: '@azure/arm-eventgrid'
  - uid: '@azure/arm-eventgrid.EventSubscriptions.listGlobalBySubscription'
    name: listGlobalBySubscription(msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      List all aggregated global event subscriptions under a specific Azure
      subscription
    syntax:
      content: 'function listGlobalBySubscription(options?: msRest.RequestOptionsBase)'
      parameters:
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.EventSubscriptionsListGlobalBySubscriptionResponse>
    package: '@azure/arm-eventgrid'
  - uid: '@azure/arm-eventgrid.EventSubscriptions.listGlobalBySubscription_2'
    name: >-
      listGlobalBySubscription(RequestOptionsBase,
      ServiceCallback<EventSubscriptionsListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function listGlobalBySubscription(options: RequestOptionsBase, callback:
        ServiceCallback<EventSubscriptionsListResult>)
      parameters:
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/arm-eventgrid.EventSubscriptionsListResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.EventSubscriptionsListGlobalBySubscriptionResponse>
    package: '@azure/arm-eventgrid'
  - uid: '@azure/arm-eventgrid.EventSubscriptions.listGlobalBySubscription_1'
    name: listGlobalBySubscription(ServiceCallback<EventSubscriptionsListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function listGlobalBySubscription(callback:
        ServiceCallback<EventSubscriptionsListResult>)
      parameters:
        - id: callback
          type:
            - ServiceCallback<@azure/arm-eventgrid.EventSubscriptionsListResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.EventSubscriptionsListGlobalBySubscriptionResponse>
    package: '@azure/arm-eventgrid'
  - uid: >-
      @azure/arm-eventgrid.EventSubscriptions.listGlobalBySubscriptionForTopicType
    name: 'listGlobalBySubscriptionForTopicType(string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      List all global event subscriptions under an Azure subscription for a
      topic type.
    syntax:
      content: >-
        function listGlobalBySubscriptionForTopicType(topicTypeName: string,
        options?: msRest.RequestOptionsBase)
      parameters:
        - id: topicTypeName
          type:
            - string
          description: Name of the topic type
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<Models.EventSubscriptionsListGlobalBySubscriptionForTopicTypeResponse>
    package: '@azure/arm-eventgrid'
  - uid: >-
      @azure/arm-eventgrid.EventSubscriptions.listGlobalBySubscriptionForTopicType_2
    name: >-
      listGlobalBySubscriptionForTopicType(string, RequestOptionsBase,
      ServiceCallback<EventSubscriptionsListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function listGlobalBySubscriptionForTopicType(topicTypeName: string,
        options: RequestOptionsBase, callback:
        ServiceCallback<EventSubscriptionsListResult>)
      parameters:
        - id: topicTypeName
          type:
            - string
          description: Name of the topic type
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/arm-eventgrid.EventSubscriptionsListResult>
          description: |
            The callback
      return:
        type:
          - >-
            Promise<Models.EventSubscriptionsListGlobalBySubscriptionForTopicTypeResponse>
    package: '@azure/arm-eventgrid'
  - uid: >-
      @azure/arm-eventgrid.EventSubscriptions.listGlobalBySubscriptionForTopicType_1
    name: >-
      listGlobalBySubscriptionForTopicType(string,
      ServiceCallback<EventSubscriptionsListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function listGlobalBySubscriptionForTopicType(topicTypeName: string,
        callback: ServiceCallback<EventSubscriptionsListResult>)
      parameters:
        - id: topicTypeName
          type:
            - string
          description: Name of the topic type
        - id: callback
          type:
            - ServiceCallback<@azure/arm-eventgrid.EventSubscriptionsListResult>
          description: |
            The callback
      return:
        type:
          - >-
            Promise<Models.EventSubscriptionsListGlobalBySubscriptionForTopicTypeResponse>
    package: '@azure/arm-eventgrid'
  - uid: '@azure/arm-eventgrid.EventSubscriptions.listRegionalByResourceGroup'
    name: 'listRegionalByResourceGroup(string, string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      List all event subscriptions from the given location under a specific
      Azure subscription and

      resource group
    syntax:
      content: >-
        function listRegionalByResourceGroup(resourceGroupName: string,
        location: string, options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group within the user's subscription.
        - id: location
          type:
            - string
          description: Name of the location
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<Models.EventSubscriptionsListRegionalByResourceGroupResponse>
    package: '@azure/arm-eventgrid'
  - uid: '@azure/arm-eventgrid.EventSubscriptions.listRegionalByResourceGroup_2'
    name: >-
      listRegionalByResourceGroup(string, string, RequestOptionsBase,
      ServiceCallback<EventSubscriptionsListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function listRegionalByResourceGroup(resourceGroupName: string,
        location: string, options: RequestOptionsBase, callback:
        ServiceCallback<EventSubscriptionsListResult>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group within the user's subscription.
        - id: location
          type:
            - string
          description: Name of the location
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/arm-eventgrid.EventSubscriptionsListResult>
          description: |
            The callback
      return:
        type:
          - >-
            Promise<Models.EventSubscriptionsListRegionalByResourceGroupResponse>
    package: '@azure/arm-eventgrid'
  - uid: '@azure/arm-eventgrid.EventSubscriptions.listRegionalByResourceGroup_1'
    name: >-
      listRegionalByResourceGroup(string, string,
      ServiceCallback<EventSubscriptionsListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function listRegionalByResourceGroup(resourceGroupName: string,
        location: string, callback:
        ServiceCallback<EventSubscriptionsListResult>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group within the user's subscription.
        - id: location
          type:
            - string
          description: Name of the location
        - id: callback
          type:
            - ServiceCallback<@azure/arm-eventgrid.EventSubscriptionsListResult>
          description: |
            The callback
      return:
        type:
          - >-
            Promise<Models.EventSubscriptionsListRegionalByResourceGroupResponse>
    package: '@azure/arm-eventgrid'
  - uid: >-
      @azure/arm-eventgrid.EventSubscriptions.listRegionalByResourceGroupForTopicType
    name: >-
      listRegionalByResourceGroupForTopicType(string, string, string,
      msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      List all event subscriptions from the given location under a specific
      Azure subscription and

      resource group and topic type
    syntax:
      content: >-
        function listRegionalByResourceGroupForTopicType(resourceGroupName:
        string, location: string, topicTypeName: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group within the user's subscription.
        - id: location
          type:
            - string
          description: Name of the location
        - id: topicTypeName
          type:
            - string
          description: Name of the topic type
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<Models.EventSubscriptionsListRegionalByResourceGroupForTopicTypeResponse>
    package: '@azure/arm-eventgrid'
  - uid: >-
      @azure/arm-eventgrid.EventSubscriptions.listRegionalByResourceGroupForTopicType_2
    name: >-
      listRegionalByResourceGroupForTopicType(string, string, string,
      RequestOptionsBase, ServiceCallback<EventSubscriptionsListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function listRegionalByResourceGroupForTopicType(resourceGroupName:
        string, location: string, topicTypeName: string, options:
        RequestOptionsBase, callback:
        ServiceCallback<EventSubscriptionsListResult>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group within the user's subscription.
        - id: location
          type:
            - string
          description: Name of the location
        - id: topicTypeName
          type:
            - string
          description: Name of the topic type
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/arm-eventgrid.EventSubscriptionsListResult>
          description: |
            The callback
      return:
        type:
          - >-
            Promise<Models.EventSubscriptionsListRegionalByResourceGroupForTopicTypeResponse>
    package: '@azure/arm-eventgrid'
  - uid: >-
      @azure/arm-eventgrid.EventSubscriptions.listRegionalByResourceGroupForTopicType_1
    name: >-
      listRegionalByResourceGroupForTopicType(string, string, string,
      ServiceCallback<EventSubscriptionsListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function listRegionalByResourceGroupForTopicType(resourceGroupName:
        string, location: string, topicTypeName: string, callback:
        ServiceCallback<EventSubscriptionsListResult>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group within the user's subscription.
        - id: location
          type:
            - string
          description: Name of the location
        - id: topicTypeName
          type:
            - string
          description: Name of the topic type
        - id: callback
          type:
            - ServiceCallback<@azure/arm-eventgrid.EventSubscriptionsListResult>
          description: |
            The callback
      return:
        type:
          - >-
            Promise<Models.EventSubscriptionsListRegionalByResourceGroupForTopicTypeResponse>
    package: '@azure/arm-eventgrid'
  - uid: '@azure/arm-eventgrid.EventSubscriptions.listRegionalBySubscription'
    name: 'listRegionalBySubscription(string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      List all event subscriptions from the given location under a specific
      Azure subscription
    syntax:
      content: >-
        function listRegionalBySubscription(location: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: location
          type:
            - string
          description: Name of the location
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.EventSubscriptionsListRegionalBySubscriptionResponse>
    package: '@azure/arm-eventgrid'
  - uid: '@azure/arm-eventgrid.EventSubscriptions.listRegionalBySubscription_2'
    name: >-
      listRegionalBySubscription(string, RequestOptionsBase,
      ServiceCallback<EventSubscriptionsListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function listRegionalBySubscription(location: string, options:
        RequestOptionsBase, callback:
        ServiceCallback<EventSubscriptionsListResult>)
      parameters:
        - id: location
          type:
            - string
          description: Name of the location
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/arm-eventgrid.EventSubscriptionsListResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.EventSubscriptionsListRegionalBySubscriptionResponse>
    package: '@azure/arm-eventgrid'
  - uid: '@azure/arm-eventgrid.EventSubscriptions.listRegionalBySubscription_1'
    name: >-
      listRegionalBySubscription(string,
      ServiceCallback<EventSubscriptionsListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function listRegionalBySubscription(location: string, callback:
        ServiceCallback<EventSubscriptionsListResult>)
      parameters:
        - id: location
          type:
            - string
          description: Name of the location
        - id: callback
          type:
            - ServiceCallback<@azure/arm-eventgrid.EventSubscriptionsListResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.EventSubscriptionsListRegionalBySubscriptionResponse>
    package: '@azure/arm-eventgrid'
  - uid: >-
      @azure/arm-eventgrid.EventSubscriptions.listRegionalBySubscriptionForTopicType
    name: >-
      listRegionalBySubscriptionForTopicType(string, string,
      msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      List all event subscriptions from the given location under a specific
      Azure subscription and

      topic type.
    syntax:
      content: >-
        function listRegionalBySubscriptionForTopicType(location: string,
        topicTypeName: string, options?: msRest.RequestOptionsBase)
      parameters:
        - id: location
          type:
            - string
          description: Name of the location
        - id: topicTypeName
          type:
            - string
          description: Name of the topic type
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<Models.EventSubscriptionsListRegionalBySubscriptionForTopicTypeResponse>
    package: '@azure/arm-eventgrid'
  - uid: >-
      @azure/arm-eventgrid.EventSubscriptions.listRegionalBySubscriptionForTopicType_2
    name: >-
      listRegionalBySubscriptionForTopicType(string, string, RequestOptionsBase,
      ServiceCallback<EventSubscriptionsListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function listRegionalBySubscriptionForTopicType(location: string,
        topicTypeName: string, options: RequestOptionsBase, callback:
        ServiceCallback<EventSubscriptionsListResult>)
      parameters:
        - id: location
          type:
            - string
          description: Name of the location
        - id: topicTypeName
          type:
            - string
          description: Name of the topic type
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/arm-eventgrid.EventSubscriptionsListResult>
          description: |
            The callback
      return:
        type:
          - >-
            Promise<Models.EventSubscriptionsListRegionalBySubscriptionForTopicTypeResponse>
    package: '@azure/arm-eventgrid'
  - uid: >-
      @azure/arm-eventgrid.EventSubscriptions.listRegionalBySubscriptionForTopicType_1
    name: >-
      listRegionalBySubscriptionForTopicType(string, string,
      ServiceCallback<EventSubscriptionsListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function listRegionalBySubscriptionForTopicType(location: string,
        topicTypeName: string, callback:
        ServiceCallback<EventSubscriptionsListResult>)
      parameters:
        - id: location
          type:
            - string
          description: Name of the location
        - id: topicTypeName
          type:
            - string
          description: Name of the topic type
        - id: callback
          type:
            - ServiceCallback<@azure/arm-eventgrid.EventSubscriptionsListResult>
          description: |
            The callback
      return:
        type:
          - >-
            Promise<Models.EventSubscriptionsListRegionalBySubscriptionForTopicTypeResponse>
    package: '@azure/arm-eventgrid'
  - uid: '@azure/arm-eventgrid.EventSubscriptions.update'
    name: >-
      update(string, string, EventSubscriptionUpdateParameters,
      msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: Asynchronously updates an existing event subscription.
    syntax:
      content: >-
        function update(scope: string, eventSubscriptionName: string,
        eventSubscriptionUpdateParameters: EventSubscriptionUpdateParameters,
        options?: msRest.RequestOptionsBase)
      parameters:
        - id: scope
          type:
            - string
          description: >-
            The scope of existing event subscription. The scope can be a
            subscription, or a

            resource group, or a top level resource belonging to a resource
            provider namespace, or an

            EventGrid topic. For example, use '/subscriptions/{subscriptionId}/'
            for a subscription,

            '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}'
            for a resource group, and

            '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'

            for a resource, and

            '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'

            for an EventGrid topic.
        - id: eventSubscriptionName
          type:
            - string
          description: Name of the event subscription to be updated
        - id: eventSubscriptionUpdateParameters
          type:
            - '@azure/arm-eventgrid.EventSubscriptionUpdateParameters'
          description: Updated event subscription information
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.EventSubscriptionsUpdateResponse>
    package: '@azure/arm-eventgrid'
references:
  - uid: '@azure/arm-eventgrid.EventGridManagementClientContext'
    name: EventGridManagementClientContext
    spec.typeScript:
      - name: EventGridManagementClientContext
        fullName: EventGridManagementClientContext
        uid: '@azure/arm-eventgrid.EventGridManagementClientContext'
  - uid: '@azure/arm-eventgrid.EventSubscription'
    name: EventSubscription
    spec.typeScript:
      - name: EventSubscription
        fullName: EventSubscription
        uid: '@azure/arm-eventgrid.EventSubscription'
  - uid: '@azure/arm-eventgrid.EventSubscriptionUpdateParameters'
    name: EventSubscriptionUpdateParameters
    spec.typeScript:
      - name: EventSubscriptionUpdateParameters
        fullName: EventSubscriptionUpdateParameters
        uid: '@azure/arm-eventgrid.EventSubscriptionUpdateParameters'
  - uid: ServiceCallback<@azure/arm-eventgrid.EventSubscription>
    name: EventSubscription>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: EventSubscription
        fullName: EventSubscription
        uid: '@azure/arm-eventgrid.EventSubscription'
      - name: '>'
        fullName: '>'
  - uid: ServiceCallback<@azure/arm-eventgrid.EventSubscriptionFullUrl>
    name: EventSubscriptionFullUrl>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: EventSubscriptionFullUrl
        fullName: EventSubscriptionFullUrl
        uid: '@azure/arm-eventgrid.EventSubscriptionFullUrl'
      - name: '>'
        fullName: '>'
  - uid: ServiceCallback<@azure/arm-eventgrid.EventSubscriptionsListResult>
    name: EventSubscriptionsListResult>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: EventSubscriptionsListResult
        fullName: EventSubscriptionsListResult
        uid: '@azure/arm-eventgrid.EventSubscriptionsListResult'
      - name: '>'
        fullName: '>'
