### YamlMime:UniversalReference
items:
  - uid: '@azure/storage-file.Directory'
    name: Directory
    fullName: Directory
    children:
      - '@azure/storage-file.Directory.create'
      - '@azure/storage-file.Directory.create_1'
      - '@azure/storage-file.Directory.create_3'
      - '@azure/storage-file.Directory.create_2'
      - '@azure/storage-file.Directory.deleteMethod'
      - '@azure/storage-file.Directory.deleteMethod_1'
      - '@azure/storage-file.Directory.deleteMethod_3'
      - '@azure/storage-file.Directory.deleteMethod_2'
      - '@azure/storage-file.Directory.constructor'
      - '@azure/storage-file.Directory.getProperties'
      - '@azure/storage-file.Directory.getProperties_1'
      - '@azure/storage-file.Directory.getProperties_3'
      - '@azure/storage-file.Directory.getProperties_2'
      - '@azure/storage-file.Directory.listFilesAndDirectoriesSegment'
      - '@azure/storage-file.Directory.listFilesAndDirectoriesSegment_1'
      - '@azure/storage-file.Directory.listFilesAndDirectoriesSegment_3'
      - '@azure/storage-file.Directory.listFilesAndDirectoriesSegment_2'
      - '@azure/storage-file.Directory.setMetadata'
      - '@azure/storage-file.Directory.setMetadata_1'
      - '@azure/storage-file.Directory.setMetadata_3'
      - '@azure/storage-file.Directory.setMetadata_2'
    langs:
      - typeScript
    type: class
    summary: Class representing a Directory.
    package: '@azure/storage-file'
  - uid: '@azure/storage-file.Directory.create'
    name: create()
    children: []
    type: method
    langs:
      - typeScript
    summary: Creates a new directory under the specified share or parent directory.
    syntax:
      content: function create()
      parameters: []
      return:
        type:
          - Promise<Models.DirectoryCreateResponse>
    package: '@azure/storage-file'
  - uid: '@azure/storage-file.Directory.create_1'
    name: create(DirectoryCreateOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: Creates a new directory under the specified share or parent directory.
    syntax:
      content: 'function create(options: DirectoryCreateOptionalParams)'
      parameters:
        - id: options
          type:
            - '@azure/storage-file.DirectoryCreateOptionalParams'
          description: ''
      return:
        type:
          - Promise<Models.DirectoryCreateResponse>
    package: '@azure/storage-file'
  - uid: '@azure/storage-file.Directory.create_3'
    name: 'create(DirectoryCreateOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Creates a new directory under the specified share or parent directory.
    syntax:
      content: >-
        function create(options: DirectoryCreateOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: options
          type:
            - '@azure/storage-file.DirectoryCreateOptionalParams'
          description: ''
        - id: callback
          type:
            - ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<Models.DirectoryCreateResponse>
    package: '@azure/storage-file'
  - uid: '@azure/storage-file.Directory.create_2'
    name: create(ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: Creates a new directory under the specified share or parent directory.
    syntax:
      content: 'function create(callback: ServiceCallback<void>)'
      parameters:
        - id: callback
          type:
            - ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<Models.DirectoryCreateResponse>
    package: '@azure/storage-file'
  - uid: '@azure/storage-file.Directory.deleteMethod'
    name: deleteMethod()
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Removes the specified empty directory. Note that the directory must be
      empty before it can be

      deleted.
    syntax:
      content: function deleteMethod()
      parameters: []
      return:
        type:
          - Promise<Models.DirectoryDeleteResponse>
    package: '@azure/storage-file'
  - uid: '@azure/storage-file.Directory.deleteMethod_1'
    name: deleteMethod(DirectoryDeleteMethodOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Removes the specified empty directory. Note that the directory must be
      empty before it can be

      deleted.
    syntax:
      content: 'function deleteMethod(options: DirectoryDeleteMethodOptionalParams)'
      parameters:
        - id: options
          type:
            - '@azure/storage-file.DirectoryDeleteMethodOptionalParams'
          description: ''
      return:
        type:
          - Promise<Models.DirectoryDeleteResponse>
    package: '@azure/storage-file'
  - uid: '@azure/storage-file.Directory.deleteMethod_3'
    name: 'deleteMethod(DirectoryDeleteMethodOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Removes the specified empty directory. Note that the directory must be
      empty before it can be

      deleted.
    syntax:
      content: >-
        function deleteMethod(options: DirectoryDeleteMethodOptionalParams,
        callback: ServiceCallback<void>)
      parameters:
        - id: options
          type:
            - '@azure/storage-file.DirectoryDeleteMethodOptionalParams'
          description: ''
        - id: callback
          type:
            - ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<Models.DirectoryDeleteResponse>
    package: '@azure/storage-file'
  - uid: '@azure/storage-file.Directory.deleteMethod_2'
    name: deleteMethod(ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Removes the specified empty directory. Note that the directory must be
      empty before it can be

      deleted.
    syntax:
      content: 'function deleteMethod(callback: ServiceCallback<void>)'
      parameters:
        - id: callback
          type:
            - ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<Models.DirectoryDeleteResponse>
    package: '@azure/storage-file'
  - uid: '@azure/storage-file.Directory.constructor'
    name: Directory(StorageClientContext)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Create a Directory.
    syntax:
      content: 'new Directory(client: StorageClientContext)'
      parameters:
        - id: client
          type:
            - '@azure/storage-file.StorageClientContext'
          description: |
            Reference to the service client.
    package: '@azure/storage-file'
  - uid: '@azure/storage-file.Directory.getProperties'
    name: getProperties()
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns all system properties for the specified directory, and can also be
      used to check the

      existence of a directory. The data returned does not include the files in
      the directory or any

      subdirectories.
    syntax:
      content: function getProperties()
      parameters: []
      return:
        type:
          - Promise<Models.DirectoryGetPropertiesResponse>
    package: '@azure/storage-file'
  - uid: '@azure/storage-file.Directory.getProperties_1'
    name: getProperties(DirectoryGetPropertiesOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns all system properties for the specified directory, and can also be
      used to check the

      existence of a directory. The data returned does not include the files in
      the directory or any

      subdirectories.
    syntax:
      content: 'function getProperties(options: DirectoryGetPropertiesOptionalParams)'
      parameters:
        - id: options
          type:
            - '@azure/storage-file.DirectoryGetPropertiesOptionalParams'
          description: ''
      return:
        type:
          - Promise<Models.DirectoryGetPropertiesResponse>
    package: '@azure/storage-file'
  - uid: '@azure/storage-file.Directory.getProperties_3'
    name: 'getProperties(DirectoryGetPropertiesOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns all system properties for the specified directory, and can also be
      used to check the

      existence of a directory. The data returned does not include the files in
      the directory or any

      subdirectories.
    syntax:
      content: >-
        function getProperties(options: DirectoryGetPropertiesOptionalParams,
        callback: ServiceCallback<void>)
      parameters:
        - id: options
          type:
            - '@azure/storage-file.DirectoryGetPropertiesOptionalParams'
          description: ''
        - id: callback
          type:
            - ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<Models.DirectoryGetPropertiesResponse>
    package: '@azure/storage-file'
  - uid: '@azure/storage-file.Directory.getProperties_2'
    name: getProperties(ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns all system properties for the specified directory, and can also be
      used to check the

      existence of a directory. The data returned does not include the files in
      the directory or any

      subdirectories.
    syntax:
      content: 'function getProperties(callback: ServiceCallback<void>)'
      parameters:
        - id: callback
          type:
            - ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<Models.DirectoryGetPropertiesResponse>
    package: '@azure/storage-file'
  - uid: '@azure/storage-file.Directory.listFilesAndDirectoriesSegment'
    name: listFilesAndDirectoriesSegment()
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns a list of files or directories under the specified share or
      directory. It lists the

      contents only for a single level of the directory hierarchy.
    syntax:
      content: function listFilesAndDirectoriesSegment()
      parameters: []
      return:
        type:
          - Promise<Models.DirectoryListFilesAndDirectoriesSegmentResponse>
    package: '@azure/storage-file'
  - uid: '@azure/storage-file.Directory.listFilesAndDirectoriesSegment_1'
    name: >-
      listFilesAndDirectoriesSegment(DirectoryListFilesAndDirectoriesSegmentOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns a list of files or directories under the specified share or
      directory. It lists the

      contents only for a single level of the directory hierarchy.
    syntax:
      content: >-
        function listFilesAndDirectoriesSegment(options:
        DirectoryListFilesAndDirectoriesSegmentOptionalParams)
      parameters:
        - id: options
          type:
            - >-
              @azure/storage-file.DirectoryListFilesAndDirectoriesSegmentOptionalParams
          description: ''
      return:
        type:
          - Promise<Models.DirectoryListFilesAndDirectoriesSegmentResponse>
    package: '@azure/storage-file'
  - uid: '@azure/storage-file.Directory.listFilesAndDirectoriesSegment_3'
    name: >-
      listFilesAndDirectoriesSegment(DirectoryListFilesAndDirectoriesSegmentOptionalParams,
      ServiceCallback<ListFilesAndDirectoriesSegmentResponse>)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns a list of files or directories under the specified share or
      directory. It lists the

      contents only for a single level of the directory hierarchy.
    syntax:
      content: >-
        function listFilesAndDirectoriesSegment(options:
        DirectoryListFilesAndDirectoriesSegmentOptionalParams, callback:
        ServiceCallback<ListFilesAndDirectoriesSegmentResponse>)
      parameters:
        - id: options
          type:
            - >-
              @azure/storage-file.DirectoryListFilesAndDirectoriesSegmentOptionalParams
          description: ''
        - id: callback
          type:
            - >-
              ServiceCallback<@azure/storage-file.ListFilesAndDirectoriesSegmentResponse>
          description: ''
      return:
        type:
          - Promise<Models.DirectoryListFilesAndDirectoriesSegmentResponse>
    package: '@azure/storage-file'
  - uid: '@azure/storage-file.Directory.listFilesAndDirectoriesSegment_2'
    name: >-
      listFilesAndDirectoriesSegment(ServiceCallback<ListFilesAndDirectoriesSegmentResponse>)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns a list of files or directories under the specified share or
      directory. It lists the

      contents only for a single level of the directory hierarchy.
    syntax:
      content: >-
        function listFilesAndDirectoriesSegment(callback:
        ServiceCallback<ListFilesAndDirectoriesSegmentResponse>)
      parameters:
        - id: callback
          type:
            - >-
              ServiceCallback<@azure/storage-file.ListFilesAndDirectoriesSegmentResponse>
          description: ''
      return:
        type:
          - Promise<Models.DirectoryListFilesAndDirectoriesSegmentResponse>
    package: '@azure/storage-file'
  - uid: '@azure/storage-file.Directory.setMetadata'
    name: setMetadata()
    children: []
    type: method
    langs:
      - typeScript
    summary: Updates user defined metadata for the specified directory.
    syntax:
      content: function setMetadata()
      parameters: []
      return:
        type:
          - Promise<Models.DirectorySetMetadataResponse>
    package: '@azure/storage-file'
  - uid: '@azure/storage-file.Directory.setMetadata_1'
    name: setMetadata(DirectorySetMetadataOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: Updates user defined metadata for the specified directory.
    syntax:
      content: 'function setMetadata(options: DirectorySetMetadataOptionalParams)'
      parameters:
        - id: options
          type:
            - '@azure/storage-file.DirectorySetMetadataOptionalParams'
          description: ''
      return:
        type:
          - Promise<Models.DirectorySetMetadataResponse>
    package: '@azure/storage-file'
  - uid: '@azure/storage-file.Directory.setMetadata_3'
    name: 'setMetadata(DirectorySetMetadataOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Updates user defined metadata for the specified directory.
    syntax:
      content: >-
        function setMetadata(options: DirectorySetMetadataOptionalParams,
        callback: ServiceCallback<void>)
      parameters:
        - id: options
          type:
            - '@azure/storage-file.DirectorySetMetadataOptionalParams'
          description: ''
        - id: callback
          type:
            - ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<Models.DirectorySetMetadataResponse>
    package: '@azure/storage-file'
  - uid: '@azure/storage-file.Directory.setMetadata_2'
    name: setMetadata(ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: Updates user defined metadata for the specified directory.
    syntax:
      content: 'function setMetadata(callback: ServiceCallback<void>)'
      parameters:
        - id: callback
          type:
            - ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<Models.DirectorySetMetadataResponse>
    package: '@azure/storage-file'
references:
  - uid: '@azure/storage-file.StorageClientContext'
    name: StorageClientContext
    spec.typeScript:
      - name: StorageClientContext
        fullName: StorageClientContext
        uid: '@azure/storage-file.StorageClientContext'
  - uid: '@azure/storage-file.DirectoryCreateOptionalParams'
    name: DirectoryCreateOptionalParams
    spec.typeScript:
      - name: DirectoryCreateOptionalParams
        fullName: DirectoryCreateOptionalParams
        uid: '@azure/storage-file.DirectoryCreateOptionalParams'
  - uid: '@azure/storage-file.DirectoryDeleteMethodOptionalParams'
    name: DirectoryDeleteMethodOptionalParams
    spec.typeScript:
      - name: DirectoryDeleteMethodOptionalParams
        fullName: DirectoryDeleteMethodOptionalParams
        uid: '@azure/storage-file.DirectoryDeleteMethodOptionalParams'
  - uid: '@azure/storage-file.DirectoryGetPropertiesOptionalParams'
    name: DirectoryGetPropertiesOptionalParams
    spec.typeScript:
      - name: DirectoryGetPropertiesOptionalParams
        fullName: DirectoryGetPropertiesOptionalParams
        uid: '@azure/storage-file.DirectoryGetPropertiesOptionalParams'
  - uid: '@azure/storage-file.DirectoryListFilesAndDirectoriesSegmentOptionalParams'
    name: DirectoryListFilesAndDirectoriesSegmentOptionalParams
    spec.typeScript:
      - name: DirectoryListFilesAndDirectoriesSegmentOptionalParams
        fullName: DirectoryListFilesAndDirectoriesSegmentOptionalParams
        uid: >-
          @azure/storage-file.DirectoryListFilesAndDirectoriesSegmentOptionalParams
  - uid: >-
      ServiceCallback<@azure/storage-file.ListFilesAndDirectoriesSegmentResponse>
    name: ListFilesAndDirectoriesSegmentResponse>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: ListFilesAndDirectoriesSegmentResponse
        fullName: ListFilesAndDirectoriesSegmentResponse
        uid: '@azure/storage-file.ListFilesAndDirectoriesSegmentResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/storage-file.DirectorySetMetadataOptionalParams'
    name: DirectorySetMetadataOptionalParams
    spec.typeScript:
      - name: DirectorySetMetadataOptionalParams
        fullName: DirectorySetMetadataOptionalParams
        uid: '@azure/storage-file.DirectorySetMetadataOptionalParams'
