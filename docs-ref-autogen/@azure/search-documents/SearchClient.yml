### YamlMime:UniversalReference
items:
  - uid: '@azure/search-documents.SearchClient'
    name: SearchClient
    fullName: SearchClient<T>
    children:
      - '@azure/search-documents.SearchClient.apiVersion'
      - '@azure/search-documents.SearchClient.autocomplete'
      - '@azure/search-documents.SearchClient.deleteDocuments_1'
      - '@azure/search-documents.SearchClient.deleteDocuments'
      - '@azure/search-documents.SearchClient.endpoint'
      - '@azure/search-documents.SearchClient.getDocument'
      - '@azure/search-documents.SearchClient.getDocumentsCount'
      - '@azure/search-documents.SearchClient.indexDocuments'
      - '@azure/search-documents.SearchClient.indexName'
      - '@azure/search-documents.SearchClient.mergeDocuments'
      - '@azure/search-documents.SearchClient.mergeOrUploadDocuments'
      - '@azure/search-documents.SearchClient.search'
      - '@azure/search-documents.SearchClient.constructor'
      - '@azure/search-documents.SearchClient.suggest'
      - '@azure/search-documents.SearchClient.uploadDocuments'
    langs:
      - typeScript
    type: class
    summary: |-
      Class used to perform operations against a search index,
      including querying documents in the index as well as
      adding, updating, and removing them.
    package: '@azure/search-documents'
  - uid: '@azure/search-documents.SearchClient.apiVersion'
    name: apiVersion
    fullName: apiVersion
    children: []
    langs:
      - typeScript
    type: property
    summary: The API version to use when communicating with the service.
    syntax:
      content: 'apiVersion: string'
      return:
        type:
          - string
        description: ''
    package: '@azure/search-documents'
  - uid: '@azure/search-documents.SearchClient.autocomplete'
    name: 'autocomplete(string, string, AutocompleteOptions<Fields>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Based on a partial searchText from the user, return a list
      of potential completion strings based on a specified suggester.
    syntax:
      content: >-
        function autocomplete<Fields>(searchText: string, suggesterName: string,
        options?: AutocompleteOptions<Fields>)
      parameters:
        - id: searchText
          type:
            - string
          description: The search text on which to base autocomplete results.
        - id: suggesterName
          type:
            - string
          description: >-
            The name of the suggester as specified in the suggesters collection
            that's part of the index definition.
        - id: options
          type:
            - '@azure/search-documents.AutocompleteOptions<Fields>'
          description: |
            Options to the autocomplete operation.
          optional: true
      return:
        type:
          - Promise<@azure/search-documents.AutocompleteResult>
        description: ''
    package: '@azure/search-documents'
  - uid: '@azure/search-documents.SearchClient.deleteDocuments_1'
    name: 'deleteDocuments(Object, string[], DeleteDocumentsOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Delete a set of documents.
    syntax:
      content: >-
        function deleteDocuments(keyName: Object, keyValues: string[], options?:
        DeleteDocumentsOptions)
      parameters:
        - id: keyName
          type:
            - Object
          description: The name of their primary key in the index.
        - id: keyValues
          type:
            - 'string[]'
          description: The primary key values of documents to delete.
        - id: options
          type:
            - '@azure/search-documents.DeleteDocumentsOptions'
          description: |
            Additional options.
          optional: true
      return:
        type:
          - Promise<@azure/search-documents.IndexDocumentsResult>
        description: ''
    package: '@azure/search-documents'
  - uid: '@azure/search-documents.SearchClient.deleteDocuments'
    name: 'deleteDocuments(T[], DeleteDocumentsOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Delete a set of documents.
    syntax:
      content: >-
        function deleteDocuments(documents: T[], options?:
        DeleteDocumentsOptions)
      parameters:
        - id: documents
          type:
            - 'T[]'
          description: Documents to be deleted.
        - id: options
          type:
            - '@azure/search-documents.DeleteDocumentsOptions'
          description: |
            Additional options.
          optional: true
      return:
        type:
          - Promise<@azure/search-documents.IndexDocumentsResult>
        description: ''
    package: '@azure/search-documents'
  - uid: '@azure/search-documents.SearchClient.endpoint'
    name: endpoint
    fullName: endpoint
    children: []
    langs:
      - typeScript
    type: property
    summary: The endpoint of the search service
    syntax:
      content: 'endpoint: string'
      return:
        type:
          - string
        description: ''
    package: '@azure/search-documents'
  - uid: '@azure/search-documents.SearchClient.getDocument'
    name: 'getDocument(string, GetDocumentOptions<Fields>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Retrieve a particular document from the index by key.
    syntax:
      content: >-
        function getDocument<Fields>(key: string, options?:
        GetDocumentOptions<Fields>)
      parameters:
        - id: key
          type:
            - string
          description: The primary key value of the document
        - id: options
          type:
            - '@azure/search-documents.GetDocumentOptions<Fields>'
          description: |
            Additional options
          optional: true
      return:
        type:
          - Promise<T>
        description: ''
    package: '@azure/search-documents'
  - uid: '@azure/search-documents.SearchClient.getDocumentsCount'
    name: getDocumentsCount(CountDocumentsOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: Retrieves the number of documents in the index.
    syntax:
      content: 'function getDocumentsCount(options?: CountDocumentsOptions)'
      parameters:
        - id: options
          type:
            - '@azure/search-documents.CountDocumentsOptions'
          description: |
            Options to the count operation.
          optional: true
      return:
        type:
          - Promise<number>
        description: ''
    package: '@azure/search-documents'
  - uid: '@azure/search-documents.SearchClient.indexDocuments'
    name: 'indexDocuments(IndexDocumentsBatch<T>, IndexDocumentsOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Perform a set of index modifications (upload, merge, mergeOrUpload,
      delete)

      for the given set of documents.

      This operation may partially succeed and not all document operations will

      be reflected in the index. If you would like to treat this as an
      exception,

      set the `throwOnAnyFailure` option to true.

      For more details about how merging works, see:
      https://docs.microsoft.com/en-us/rest/api/searchservice/AddUpdate-or-Delete-Documents
    syntax:
      content: >-
        function indexDocuments(batch: IndexDocumentsBatch<T>, options?:
        IndexDocumentsOptions)
      parameters:
        - id: batch
          type:
            - '@azure/search-documents.IndexDocumentsBatch<T>'
          description: An array of actions to perform on the index.
        - id: options
          type:
            - '@azure/search-documents.IndexDocumentsOptions'
          description: |
            Additional options.
          optional: true
      return:
        type:
          - Promise<@azure/search-documents.IndexDocumentsResult>
        description: ''
    package: '@azure/search-documents'
  - uid: '@azure/search-documents.SearchClient.indexName'
    name: indexName
    fullName: indexName
    children: []
    langs:
      - typeScript
    type: property
    summary: The name of the index
    syntax:
      content: 'indexName: string'
      return:
        type:
          - string
        description: ''
    package: '@azure/search-documents'
  - uid: '@azure/search-documents.SearchClient.mergeDocuments'
    name: 'mergeDocuments(T[], MergeDocumentsOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Update a set of documents in the index.

      For more details about how merging works, see
      https://docs.microsoft.com/en-us/rest/api/searchservice/AddUpdate-or-Delete-Documents
    syntax:
      content: 'function mergeDocuments(documents: T[], options?: MergeDocumentsOptions)'
      parameters:
        - id: documents
          type:
            - 'T[]'
          description: The updated documents.
        - id: options
          type:
            - '@azure/search-documents.MergeDocumentsOptions'
          description: |
            Additional options.
          optional: true
      return:
        type:
          - Promise<@azure/search-documents.IndexDocumentsResult>
        description: ''
    package: '@azure/search-documents'
  - uid: '@azure/search-documents.SearchClient.mergeOrUploadDocuments'
    name: 'mergeOrUploadDocuments(T[], MergeOrUploadDocumentsOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Update a set of documents in the index or upload them if they don't exist.

      For more details about how merging works, see
      https://docs.microsoft.com/en-us/rest/api/searchservice/AddUpdate-or-Delete-Documents
    syntax:
      content: >-
        function mergeOrUploadDocuments(documents: T[], options?:
        MergeOrUploadDocumentsOptions)
      parameters:
        - id: documents
          type:
            - 'T[]'
          description: The updated documents.
        - id: options
          type:
            - '@azure/search-documents.MergeOrUploadDocumentsOptions'
          description: |
            Additional options.
          optional: true
      return:
        type:
          - Promise<@azure/search-documents.IndexDocumentsResult>
        description: ''
    package: '@azure/search-documents'
  - uid: '@azure/search-documents.SearchClient.search'
    name: 'search(string, SearchOptions<Fields>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Performs a search on the current index given
      the specified arguments.
    syntax:
      content: >-
        function search<Fields>(searchText?: string, options?:
        SearchOptions<Fields>)
      parameters:
        - id: searchText
          type:
            - string
          description: Text to search
          optional: true
        - id: options
          type:
            - '@azure/search-documents.SearchOptions<Fields>'
          description: |
            Options for the search operation.
          optional: true
      return:
        type:
          - >-
            Promise<@azure/search-documents.SearchDocumentsResult<Pick<T,
            Fields>>>
        description: ''
    package: '@azure/search-documents'
  - uid: '@azure/search-documents.SearchClient.constructor'
    name: 'SearchClient(string, string, KeyCredential, SearchClientOptions)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: >-
      Creates an instance of SearchClient.

      Example usage:

      ```ts

      const { SearchClient, AzureKeyCredential } =
      require("@azure/search-documents");


      const client = new SearchClient(
        "<endpoint>",
        "<indexName>",
        new AzureKeyCredential("<Admin Key>");
      );

      ```
    syntax:
      content: >-
        new SearchClient(endpoint: string, indexName: string, credential:
        KeyCredential, options?: SearchClientOptions)
      parameters:
        - id: endpoint
          type:
            - string
          description: The endpoint of the search service
        - id: indexName
          type:
            - string
          description: The name of the index
        - id: credential
          type:
            - KeyCredential
          description: Used to authenticate requests to the service.
        - id: options
          type:
            - '@azure/search-documents.SearchClientOptions'
          description: ''
          optional: true
    package: '@azure/search-documents'
  - uid: '@azure/search-documents.SearchClient.suggest'
    name: 'suggest(string, string, SuggestOptions<Fields>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Returns a short list of suggestions based on the searchText
      and specified suggester.
    syntax:
      content: >-
        function suggest<Fields>(searchText: string, suggesterName: string,
        options?: SuggestOptions<Fields>)
      parameters:
        - id: searchText
          type:
            - string
          description: >-
            The search text to use to suggest documents. Must be at least 1
            character, and no more than 100 characters.
        - id: suggesterName
          type:
            - string
          description: >-
            The name of the suggester as specified in the suggesters collection
            that's part of the index definition.
        - id: options
          type:
            - '@azure/search-documents.SuggestOptions<Fields>'
          description: |
            Options for the suggest operation
          optional: true
      return:
        type:
          - >-
            Promise<@azure/search-documents.SuggestDocumentsResult<Pick<T,
            Fields>>>
        description: ''
    package: '@azure/search-documents'
  - uid: '@azure/search-documents.SearchClient.uploadDocuments'
    name: 'uploadDocuments(T[], UploadDocumentsOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Upload an array of documents to the index.
    syntax:
      content: >-
        function uploadDocuments(documents: T[], options?:
        UploadDocumentsOptions)
      parameters:
        - id: documents
          type:
            - 'T[]'
          description: The documents to upload.
        - id: options
          type:
            - '@azure/search-documents.UploadDocumentsOptions'
          description: |
            Additional options.
          optional: true
      return:
        type:
          - Promise<@azure/search-documents.IndexDocumentsResult>
        description: ''
    package: '@azure/search-documents'
references:
  - uid: '@azure/search-documents.SearchClientOptions'
    name: SearchClientOptions
    spec.typeScript:
      - name: SearchClientOptions
        fullName: SearchClientOptions
        uid: '@azure/search-documents.SearchClientOptions'
  - uid: '@azure/search-documents.AutocompleteOptions<Fields>'
    name: AutocompleteOptions<Fields>
    spec.typeScript:
      - name: AutocompleteOptions
        fullName: AutocompleteOptions
        uid: '@azure/search-documents.AutocompleteOptions'
      - name: <Fields>
        fullName: <Fields>
  - uid: Promise<@azure/search-documents.AutocompleteResult>
    name: AutocompleteResult>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: AutocompleteResult
        fullName: AutocompleteResult
        uid: '@azure/search-documents.AutocompleteResult'
      - name: '>'
        fullName: '>'
  - uid: '@azure/search-documents.DeleteDocumentsOptions'
    name: DeleteDocumentsOptions
    spec.typeScript:
      - name: DeleteDocumentsOptions
        fullName: DeleteDocumentsOptions
        uid: '@azure/search-documents.DeleteDocumentsOptions'
  - uid: Promise<@azure/search-documents.IndexDocumentsResult>
    name: IndexDocumentsResult>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: IndexDocumentsResult
        fullName: IndexDocumentsResult
        uid: '@azure/search-documents.IndexDocumentsResult'
      - name: '>'
        fullName: '>'
  - uid: '@azure/search-documents.GetDocumentOptions<Fields>'
    name: GetDocumentOptions<Fields>
    spec.typeScript:
      - name: GetDocumentOptions
        fullName: GetDocumentOptions
        uid: '@azure/search-documents.GetDocumentOptions'
      - name: <Fields>
        fullName: <Fields>
  - uid: '@azure/search-documents.CountDocumentsOptions'
    name: CountDocumentsOptions
    spec.typeScript:
      - name: CountDocumentsOptions
        fullName: CountDocumentsOptions
        uid: '@azure/search-documents.CountDocumentsOptions'
  - uid: '@azure/search-documents.IndexDocumentsBatch<T>'
    name: IndexDocumentsBatch<T>
    spec.typeScript:
      - name: IndexDocumentsBatch
        fullName: IndexDocumentsBatch
        uid: '@azure/search-documents.IndexDocumentsBatch'
      - name: <T>
        fullName: <T>
  - uid: '@azure/search-documents.IndexDocumentsOptions'
    name: IndexDocumentsOptions
    spec.typeScript:
      - name: IndexDocumentsOptions
        fullName: IndexDocumentsOptions
        uid: '@azure/search-documents.IndexDocumentsOptions'
  - uid: '@azure/search-documents.MergeDocumentsOptions'
    name: MergeDocumentsOptions
    spec.typeScript:
      - name: MergeDocumentsOptions
        fullName: MergeDocumentsOptions
        uid: '@azure/search-documents.MergeDocumentsOptions'
  - uid: '@azure/search-documents.MergeOrUploadDocumentsOptions'
    name: MergeOrUploadDocumentsOptions
    spec.typeScript:
      - name: MergeOrUploadDocumentsOptions
        fullName: MergeOrUploadDocumentsOptions
        uid: '@azure/search-documents.MergeOrUploadDocumentsOptions'
  - uid: '@azure/search-documents.SearchOptions<Fields>'
    name: SearchOptions<Fields>
    spec.typeScript:
      - name: SearchOptions
        fullName: SearchOptions
        uid: '@azure/search-documents.SearchOptions'
      - name: <Fields>
        fullName: <Fields>
  - uid: 'Promise<@azure/search-documents.SearchDocumentsResult<Pick<T, Fields>>>'
    name: 'SearchDocumentsResult<Pick<T, Fields>>>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: SearchDocumentsResult
        fullName: SearchDocumentsResult
        uid: '@azure/search-documents.SearchDocumentsResult'
      - name: '<Pick<T, Fields>>>'
        fullName: '<Pick<T, Fields>>>'
  - uid: '@azure/search-documents.SuggestOptions<Fields>'
    name: SuggestOptions<Fields>
    spec.typeScript:
      - name: SuggestOptions
        fullName: SuggestOptions
        uid: '@azure/search-documents.SuggestOptions'
      - name: <Fields>
        fullName: <Fields>
  - uid: 'Promise<@azure/search-documents.SuggestDocumentsResult<Pick<T, Fields>>>'
    name: 'SuggestDocumentsResult<Pick<T, Fields>>>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: SuggestDocumentsResult
        fullName: SuggestDocumentsResult
        uid: '@azure/search-documents.SuggestDocumentsResult'
      - name: '<Pick<T, Fields>>>'
        fullName: '<Pick<T, Fields>>>'
  - uid: '@azure/search-documents.UploadDocumentsOptions'
    name: UploadDocumentsOptions
    spec.typeScript:
      - name: UploadDocumentsOptions
        fullName: UploadDocumentsOptions
        uid: '@azure/search-documents.UploadDocumentsOptions'
