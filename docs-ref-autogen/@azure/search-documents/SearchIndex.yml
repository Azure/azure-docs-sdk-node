### YamlMime:UniversalReference
items:
  - uid: '@azure/search-documents.SearchIndex'
    name: SearchIndex
    fullName: SearchIndex
    children:
      - '@azure/search-documents.SearchIndex.analyzers'
      - '@azure/search-documents.SearchIndex.charFilters'
      - '@azure/search-documents.SearchIndex.corsOptions'
      - '@azure/search-documents.SearchIndex.defaultScoringProfile'
      - '@azure/search-documents.SearchIndex.encryptionKey'
      - '@azure/search-documents.SearchIndex.etag'
      - '@azure/search-documents.SearchIndex.fields'
      - '@azure/search-documents.SearchIndex.name'
      - '@azure/search-documents.SearchIndex.scoringProfiles'
      - '@azure/search-documents.SearchIndex.similarity'
      - '@azure/search-documents.SearchIndex.suggesters'
      - '@azure/search-documents.SearchIndex.tokenFilters'
      - '@azure/search-documents.SearchIndex.tokenizers'
    langs:
      - typeScript
    type: interface
    summary: >-
      Represents a search index definition, which describes the fields and
      search behavior of an

      index.
    package: '@azure/search-documents'
  - uid: '@azure/search-documents.SearchIndex.analyzers'
    name: analyzers
    fullName: analyzers
    children: []
    langs:
      - typeScript
    type: property
    summary: The analyzers for the index.
    optional: true
    syntax:
      content: 'analyzers?: LexicalAnalyzer[]'
      return:
        type:
          - '@azure/search-documents.LexicalAnalyzer[]'
        description: ''
    package: '@azure/search-documents'
  - uid: '@azure/search-documents.SearchIndex.charFilters'
    name: charFilters
    fullName: charFilters
    children: []
    langs:
      - typeScript
    type: property
    summary: The character filters for the index.
    optional: true
    syntax:
      content: 'charFilters?: CharFilter[]'
      return:
        type:
          - '@azure/search-documents.CharFilter[]'
        description: ''
    package: '@azure/search-documents'
  - uid: '@azure/search-documents.SearchIndex.corsOptions'
    name: corsOptions
    fullName: corsOptions
    children: []
    langs:
      - typeScript
    type: property
    summary: Options to control Cross-Origin Resource Sharing (CORS) for the index.
    optional: true
    syntax:
      content: 'corsOptions?: CorsOptions'
      return:
        type:
          - '@azure/search-documents.CorsOptions'
        description: ''
    package: '@azure/search-documents'
  - uid: '@azure/search-documents.SearchIndex.defaultScoringProfile'
    name: defaultScoringProfile
    fullName: defaultScoringProfile
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      The name of the scoring profile to use if none is specified in the query.
      If this property is

      not set and no scoring profile is specified in the query, then default
      scoring (tf-idf) will

      be used.
    optional: true
    syntax:
      content: 'defaultScoringProfile?: string'
      return:
        type:
          - string
        description: ''
    package: '@azure/search-documents'
  - uid: '@azure/search-documents.SearchIndex.encryptionKey'
    name: encryptionKey
    fullName: encryptionKey
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      A description of an encryption key that you create in Azure Key Vault.
      This key is used to

      provide an additional level of encryption-at-rest for your data when you
      want full assurance

      that no one, not even Microsoft, can decrypt your data in Azure Cognitive
      Search. Once you

      have encrypted your data, it will always remain encrypted. Azure Cognitive
      Search will ignore

      attempts to set this property to null. You can change this property as
      needed if you want to

      rotate your encryption key; Your data will be unaffected. Encryption with
      customer-managed

      keys is not available for free search services, and is only available for
      paid services

      created on or after January 1, 2019.
    optional: true
    syntax:
      content: 'encryptionKey?: SearchResourceEncryptionKey'
      return:
        type:
          - '@azure/search-documents.SearchResourceEncryptionKey'
        description: ''
    package: '@azure/search-documents'
  - uid: '@azure/search-documents.SearchIndex.etag'
    name: etag
    fullName: etag
    children: []
    langs:
      - typeScript
    type: property
    summary: The ETag of the index.
    optional: true
    syntax:
      content: 'etag?: string'
      return:
        type:
          - string
        description: ''
    package: '@azure/search-documents'
  - uid: '@azure/search-documents.SearchIndex.fields'
    name: fields
    fullName: fields
    children: []
    langs:
      - typeScript
    type: property
    summary: The fields of the index.
    syntax:
      content: 'fields: SearchField[]'
      return:
        type:
          - '@azure/search-documents.SearchField[]'
        description: ''
    package: '@azure/search-documents'
  - uid: '@azure/search-documents.SearchIndex.name'
    name: name
    fullName: name
    children: []
    langs:
      - typeScript
    type: property
    summary: The name of the index.
    syntax:
      content: 'name: string'
      return:
        type:
          - string
        description: ''
    package: '@azure/search-documents'
  - uid: '@azure/search-documents.SearchIndex.scoringProfiles'
    name: scoringProfiles
    fullName: scoringProfiles
    children: []
    langs:
      - typeScript
    type: property
    summary: The scoring profiles for the index.
    optional: true
    syntax:
      content: 'scoringProfiles?: ScoringProfile[]'
      return:
        type:
          - '@azure/search-documents.ScoringProfile[]'
        description: ''
    package: '@azure/search-documents'
  - uid: '@azure/search-documents.SearchIndex.similarity'
    name: similarity
    fullName: similarity
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      The type of similarity algorithm to be used when scoring and ranking the
      documents matching a

      search query. The similarity algorithm can only be defined at index
      creation time and cannot

      be modified on existing indexes. If null, the ClassicSimilarity algorithm
      is used.
    optional: true
    syntax:
      content: 'similarity?: SimilarityAlgorithm'
      return:
        type:
          - '@azure/search-documents.SimilarityAlgorithm'
        description: ''
    package: '@azure/search-documents'
  - uid: '@azure/search-documents.SearchIndex.suggesters'
    name: suggesters
    fullName: suggesters
    children: []
    langs:
      - typeScript
    type: property
    summary: The suggesters for the index.
    optional: true
    syntax:
      content: 'suggesters?: SearchSuggester[]'
      return:
        type:
          - '@azure/search-documents.SearchSuggester[]'
        description: ''
    package: '@azure/search-documents'
  - uid: '@azure/search-documents.SearchIndex.tokenFilters'
    name: tokenFilters
    fullName: tokenFilters
    children: []
    langs:
      - typeScript
    type: property
    summary: The token filters for the index.
    optional: true
    syntax:
      content: 'tokenFilters?: TokenFilter[]'
      return:
        type:
          - '@azure/search-documents.TokenFilter[]'
        description: ''
    package: '@azure/search-documents'
  - uid: '@azure/search-documents.SearchIndex.tokenizers'
    name: tokenizers
    fullName: tokenizers
    children: []
    langs:
      - typeScript
    type: property
    summary: The tokenizers for the index.
    optional: true
    syntax:
      content: 'tokenizers?: LexicalTokenizer[]'
      return:
        type:
          - '@azure/search-documents.LexicalTokenizer[]'
        description: ''
    package: '@azure/search-documents'
references:
  - uid: '@azure/search-documents.LexicalAnalyzer[]'
    name: 'LexicalAnalyzer[]'
    spec.typeScript:
      - name: LexicalAnalyzer
        fullName: LexicalAnalyzer
        uid: '@azure/search-documents.LexicalAnalyzer'
      - name: '[]'
        fullName: '[]'
  - uid: '@azure/search-documents.CharFilter[]'
    name: 'CharFilter[]'
    spec.typeScript:
      - name: CharFilter
        fullName: CharFilter
        uid: '@azure/search-documents.CharFilter'
      - name: '[]'
        fullName: '[]'
  - uid: '@azure/search-documents.CorsOptions'
    name: CorsOptions
    spec.typeScript:
      - name: CorsOptions
        fullName: CorsOptions
        uid: '@azure/search-documents.CorsOptions'
  - uid: '@azure/search-documents.SearchResourceEncryptionKey'
    name: SearchResourceEncryptionKey
    spec.typeScript:
      - name: SearchResourceEncryptionKey
        fullName: SearchResourceEncryptionKey
        uid: '@azure/search-documents.SearchResourceEncryptionKey'
  - uid: '@azure/search-documents.SearchField[]'
    name: 'SearchField[]'
    spec.typeScript:
      - name: SearchField
        fullName: SearchField
        uid: '@azure/search-documents.SearchField'
      - name: '[]'
        fullName: '[]'
  - uid: '@azure/search-documents.ScoringProfile[]'
    name: 'ScoringProfile[]'
    spec.typeScript:
      - name: ScoringProfile
        fullName: ScoringProfile
        uid: '@azure/search-documents.ScoringProfile'
      - name: '[]'
        fullName: '[]'
  - uid: '@azure/search-documents.SimilarityAlgorithm'
    name: SimilarityAlgorithm
    spec.typeScript:
      - name: SimilarityAlgorithm
        fullName: SimilarityAlgorithm
        uid: '@azure/search-documents.SimilarityAlgorithm'
  - uid: '@azure/search-documents.SearchSuggester[]'
    name: 'SearchSuggester[]'
    spec.typeScript:
      - name: SearchSuggester
        fullName: SearchSuggester
        uid: '@azure/search-documents.SearchSuggester'
      - name: '[]'
        fullName: '[]'
  - uid: '@azure/search-documents.TokenFilter[]'
    name: 'TokenFilter[]'
    spec.typeScript:
      - name: TokenFilter
        fullName: TokenFilter
        uid: '@azure/search-documents.TokenFilter'
      - name: '[]'
        fullName: '[]'
  - uid: '@azure/search-documents.LexicalTokenizer[]'
    name: 'LexicalTokenizer[]'
    spec.typeScript:
      - name: LexicalTokenizer
        fullName: LexicalTokenizer
        uid: '@azure/search-documents.LexicalTokenizer'
      - name: '[]'
        fullName: '[]'
