### YamlMime:UniversalReference
items:
  - uid: azure-arm-datalake-store.FileSystem
    name: FileSystem
    fullName: FileSystem
    children:
      - azure-arm-datalake-store.FileSystem.append
      - azure-arm-datalake-store.FileSystem.append_2
      - azure-arm-datalake-store.FileSystem.append_1
      - azure-arm-datalake-store.FileSystem.appendWithHttpOperationResponse
      - azure-arm-datalake-store.FileSystem.checkAccess
      - azure-arm-datalake-store.FileSystem.checkAccess_2
      - azure-arm-datalake-store.FileSystem.checkAccess_1
      - azure-arm-datalake-store.FileSystem.checkAccessWithHttpOperationResponse
      - azure-arm-datalake-store.FileSystem.concat
      - azure-arm-datalake-store.FileSystem.concat_2
      - azure-arm-datalake-store.FileSystem.concat_1
      - azure-arm-datalake-store.FileSystem.concatWithHttpOperationResponse
      - azure-arm-datalake-store.FileSystem.concurrentAppend
      - azure-arm-datalake-store.FileSystem.concurrentAppend_2
      - azure-arm-datalake-store.FileSystem.concurrentAppend_1
      - >-
        azure-arm-datalake-store.FileSystem.concurrentAppendWithHttpOperationResponse
      - azure-arm-datalake-store.FileSystem.create
      - azure-arm-datalake-store.FileSystem.create_2
      - azure-arm-datalake-store.FileSystem.create_1
      - azure-arm-datalake-store.FileSystem.createWithHttpOperationResponse
      - azure-arm-datalake-store.FileSystem.deleteMethod
      - azure-arm-datalake-store.FileSystem.deleteMethod_2
      - azure-arm-datalake-store.FileSystem.deleteMethod_1
      - >-
        azure-arm-datalake-store.FileSystem.deleteMethodWithHttpOperationResponse
      - azure-arm-datalake-store.FileSystem.getAclStatus
      - azure-arm-datalake-store.FileSystem.getAclStatus_2
      - azure-arm-datalake-store.FileSystem.getAclStatus_1
      - >-
        azure-arm-datalake-store.FileSystem.getAclStatusWithHttpOperationResponse
      - azure-arm-datalake-store.FileSystem.getContentSummary
      - azure-arm-datalake-store.FileSystem.getContentSummary_2
      - azure-arm-datalake-store.FileSystem.getContentSummary_1
      - >-
        azure-arm-datalake-store.FileSystem.getContentSummaryWithHttpOperationResponse
      - azure-arm-datalake-store.FileSystem.getFileStatus
      - azure-arm-datalake-store.FileSystem.getFileStatus_2
      - azure-arm-datalake-store.FileSystem.getFileStatus_1
      - >-
        azure-arm-datalake-store.FileSystem.getFileStatusWithHttpOperationResponse
      - azure-arm-datalake-store.FileSystem.listFileStatus
      - azure-arm-datalake-store.FileSystem.listFileStatus_2
      - azure-arm-datalake-store.FileSystem.listFileStatus_1
      - >-
        azure-arm-datalake-store.FileSystem.listFileStatusWithHttpOperationResponse
      - azure-arm-datalake-store.FileSystem.mkdirs
      - azure-arm-datalake-store.FileSystem.mkdirs_2
      - azure-arm-datalake-store.FileSystem.mkdirs_1
      - azure-arm-datalake-store.FileSystem.mkdirsWithHttpOperationResponse
      - azure-arm-datalake-store.FileSystem.modifyAclEntries
      - azure-arm-datalake-store.FileSystem.modifyAclEntries_2
      - azure-arm-datalake-store.FileSystem.modifyAclEntries_1
      - >-
        azure-arm-datalake-store.FileSystem.modifyAclEntriesWithHttpOperationResponse
      - azure-arm-datalake-store.FileSystem.msConcat
      - azure-arm-datalake-store.FileSystem.msConcat_2
      - azure-arm-datalake-store.FileSystem.msConcat_1
      - azure-arm-datalake-store.FileSystem.msConcatWithHttpOperationResponse
      - azure-arm-datalake-store.FileSystem.open
      - azure-arm-datalake-store.FileSystem.open_2
      - azure-arm-datalake-store.FileSystem.open_1
      - azure-arm-datalake-store.FileSystem.openWithHttpOperationResponse
      - azure-arm-datalake-store.FileSystem.removeAcl
      - azure-arm-datalake-store.FileSystem.removeAcl_2
      - azure-arm-datalake-store.FileSystem.removeAcl_1
      - azure-arm-datalake-store.FileSystem.removeAclEntries
      - azure-arm-datalake-store.FileSystem.removeAclEntries_2
      - azure-arm-datalake-store.FileSystem.removeAclEntries_1
      - >-
        azure-arm-datalake-store.FileSystem.removeAclEntriesWithHttpOperationResponse
      - azure-arm-datalake-store.FileSystem.removeAclWithHttpOperationResponse
      - azure-arm-datalake-store.FileSystem.removeDefaultAcl
      - azure-arm-datalake-store.FileSystem.removeDefaultAcl_2
      - azure-arm-datalake-store.FileSystem.removeDefaultAcl_1
      - >-
        azure-arm-datalake-store.FileSystem.removeDefaultAclWithHttpOperationResponse
      - azure-arm-datalake-store.FileSystem.rename
      - azure-arm-datalake-store.FileSystem.rename_2
      - azure-arm-datalake-store.FileSystem.rename_1
      - azure-arm-datalake-store.FileSystem.renameWithHttpOperationResponse
      - azure-arm-datalake-store.FileSystem.setAcl
      - azure-arm-datalake-store.FileSystem.setAcl_2
      - azure-arm-datalake-store.FileSystem.setAcl_1
      - azure-arm-datalake-store.FileSystem.setAclWithHttpOperationResponse
      - azure-arm-datalake-store.FileSystem.setFileExpiry
      - azure-arm-datalake-store.FileSystem.setFileExpiry_2
      - azure-arm-datalake-store.FileSystem.setFileExpiry_1
      - >-
        azure-arm-datalake-store.FileSystem.setFileExpiryWithHttpOperationResponse
      - azure-arm-datalake-store.FileSystem.setOwner
      - azure-arm-datalake-store.FileSystem.setOwner_2
      - azure-arm-datalake-store.FileSystem.setOwner_1
      - azure-arm-datalake-store.FileSystem.setOwnerWithHttpOperationResponse
      - azure-arm-datalake-store.FileSystem.setPermission
      - azure-arm-datalake-store.FileSystem.setPermission_2
      - azure-arm-datalake-store.FileSystem.setPermission_1
      - >-
        azure-arm-datalake-store.FileSystem.setPermissionWithHttpOperationResponse
    langs:
      - typeScript
    type: interface
    summary: ''
    package: azure-arm-datalake-store
  - uid: azure-arm-datalake-store.FileSystem.append
    name: 'append(string, string, stream.Readable, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: "Used for serial appends to the specified file.\_NOTE: The target must not\ncontain data added by ConcurrentAppend. ConcurrentAppend and Append cannot\nbe used interchangeably; once a target file has been modified using either\nof these append options, the other append option cannot be used on the\ntarget file."
    syntax:
      content: >-
        function append(accountName: string, path: string, streamContents:
        stream.Readable, options?: Object)
      parameters:
        - id: accountName
          type:
            - string
          description: |
            The Azure Data Lake Store account to execute
            filesystem operations on.
        - id: path
          type:
            - string
          description: |
            The Data Lake Store path (starting with '/') of the
            file to which to append.
        - id: streamContents
          type:
            - stream.Readable
          description: >
            The file contents to include when appending

            to the file.  The maximum content size is 4MB.  For content larger
            than 4MB

            you must append the content in 4MB chunks.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<void>
    package: azure-arm-datalake-store
  - uid: azure-arm-datalake-store.FileSystem.append_2
    name: 'append(string, string, stream.Readable, Object, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: "Used for serial appends to the specified file.\_NOTE: The target must not\ncontain data added by ConcurrentAppend. ConcurrentAppend and Append cannot\nbe used interchangeably; once a target file has been modified using either\nof these append options, the other append option cannot be used on the\ntarget file."
    syntax:
      content: >-
        function append(accountName: string, path: string, streamContents:
        stream.Readable, options: Object, callback: ServiceCallback<void>)
      parameters:
        - id: accountName
          type:
            - string
          description: ''
        - id: path
          type:
            - string
          description: ''
        - id: streamContents
          type:
            - stream.Readable
          description: ''
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: azure-arm-datalake-store
  - uid: azure-arm-datalake-store.FileSystem.append_1
    name: 'append(string, string, stream.Readable, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: "Used for serial appends to the specified file.\_NOTE: The target must not\ncontain data added by ConcurrentAppend. ConcurrentAppend and Append cannot\nbe used interchangeably; once a target file has been modified using either\nof these append options, the other append option cannot be used on the\ntarget file."
    syntax:
      content: >-
        function append(accountName: string, path: string, streamContents:
        stream.Readable, callback: ServiceCallback<void>)
      parameters:
        - id: accountName
          type:
            - string
          description: ''
        - id: path
          type:
            - string
          description: ''
        - id: streamContents
          type:
            - stream.Readable
          description: ''
        - id: callback
          type:
            - ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: azure-arm-datalake-store
  - uid: azure-arm-datalake-store.FileSystem.appendWithHttpOperationResponse
    name: 'appendWithHttpOperationResponse(string, string, stream.Readable, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: "Used for serial appends to the specified file.\_NOTE: The target must not\ncontain data added by ConcurrentAppend. ConcurrentAppend and Append cannot\nbe used interchangeably; once a target file has been modified using either\nof these append options, the other append option cannot be used on the\ntarget file."
    syntax:
      content: >-
        function appendWithHttpOperationResponse(accountName: string, path:
        string, streamContents: stream.Readable, options?: Object)
      parameters:
        - id: accountName
          type:
            - string
          description: |
            The Azure Data Lake Store account to execute
            filesystem operations on.
        - id: path
          type:
            - string
          description: |
            The Data Lake Store path (starting with '/') of the
            file to which to append.
        - id: streamContents
          type:
            - stream.Readable
          description: >
            The file contents to include when appending

            to the file.  The maximum content size is 4MB.  For content larger
            than 4MB

            you must append the content in 4MB chunks.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<HttpOperationResponse<void>>
    package: azure-arm-datalake-store
  - uid: azure-arm-datalake-store.FileSystem.checkAccess
    name: 'checkAccess(string, string, string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Checks if the specified access is available at the given path.
    syntax:
      content: >-
        function checkAccess(accountName: string, path: string, fsaction:
        string, options?: Object)
      parameters:
        - id: accountName
          type:
            - string
          description: |
            The Azure Data Lake Store account to execute
            filesystem operations on.
        - id: path
          type:
            - string
          description: |
            The Data Lake Store path (starting with '/') of the
            file or directory for which to check access.
        - id: fsaction
          type:
            - string
          description: |
            File system operation read/write/execute in string
            form, matching regex pattern '[rwx-]{3}'
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<void>
    package: azure-arm-datalake-store
  - uid: azure-arm-datalake-store.FileSystem.checkAccess_2
    name: 'checkAccess(string, string, string, Object, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Checks if the specified access is available at the given path.
    syntax:
      content: >-
        function checkAccess(accountName: string, path: string, fsaction:
        string, options: Object, callback: ServiceCallback<void>)
      parameters:
        - id: accountName
          type:
            - string
          description: ''
        - id: path
          type:
            - string
          description: ''
        - id: fsaction
          type:
            - string
          description: ''
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: azure-arm-datalake-store
  - uid: azure-arm-datalake-store.FileSystem.checkAccess_1
    name: 'checkAccess(string, string, string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Checks if the specified access is available at the given path.
    syntax:
      content: >-
        function checkAccess(accountName: string, path: string, fsaction:
        string, callback: ServiceCallback<void>)
      parameters:
        - id: accountName
          type:
            - string
          description: ''
        - id: path
          type:
            - string
          description: ''
        - id: fsaction
          type:
            - string
          description: ''
        - id: callback
          type:
            - ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: azure-arm-datalake-store
  - uid: azure-arm-datalake-store.FileSystem.checkAccessWithHttpOperationResponse
    name: 'checkAccessWithHttpOperationResponse(string, string, string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Checks if the specified access is available at the given path.
    syntax:
      content: >-
        function checkAccessWithHttpOperationResponse(accountName: string, path:
        string, fsaction: string, options?: Object)
      parameters:
        - id: accountName
          type:
            - string
          description: |
            The Azure Data Lake Store account to execute
            filesystem operations on.
        - id: path
          type:
            - string
          description: |
            The Data Lake Store path (starting with '/') of the
            file or directory for which to check access.
        - id: fsaction
          type:
            - string
          description: |
            File system operation read/write/execute in string
            form, matching regex pattern '[rwx-]{3}'
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<HttpOperationResponse<void>>
    package: azure-arm-datalake-store
  - uid: azure-arm-datalake-store.FileSystem.concat
    name: 'concat(string, string, string[], Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Concatenates the list of source files into the destination file, removing
      all source files upon success.
    syntax:
      content: >-
        function concat(accountName: string, path: string, sources: string[],
        options?: Object)
      parameters:
        - id: accountName
          type:
            - string
          description: |
            The Azure Data Lake Store account to execute
            filesystem operations on.
        - id: path
          type:
            - string
          description: |
            The Data Lake Store path (starting with '/') of the
            destination file resulting from the concatenation.
        - id: sources
          type:
            - 'string[]'
          description: >
            A list of comma separated Data Lake Store paths

            (starting with '/') of the files to concatenate, in the order in
            which they

            should be concatenated.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<void>
    package: azure-arm-datalake-store
  - uid: azure-arm-datalake-store.FileSystem.concat_2
    name: 'concat(string, string, string[], Object, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Concatenates the list of source files into the destination file, removing
      all source files upon success.
    syntax:
      content: >-
        function concat(accountName: string, path: string, sources: string[],
        options: Object, callback: ServiceCallback<void>)
      parameters:
        - id: accountName
          type:
            - string
          description: ''
        - id: path
          type:
            - string
          description: ''
        - id: sources
          type:
            - 'string[]'
          description: ''
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: azure-arm-datalake-store
  - uid: azure-arm-datalake-store.FileSystem.concat_1
    name: 'concat(string, string, string[], ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Concatenates the list of source files into the destination file, removing
      all source files upon success.
    syntax:
      content: >-
        function concat(accountName: string, path: string, sources: string[],
        callback: ServiceCallback<void>)
      parameters:
        - id: accountName
          type:
            - string
          description: ''
        - id: path
          type:
            - string
          description: ''
        - id: sources
          type:
            - 'string[]'
          description: ''
        - id: callback
          type:
            - ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: azure-arm-datalake-store
  - uid: azure-arm-datalake-store.FileSystem.concatWithHttpOperationResponse
    name: 'concatWithHttpOperationResponse(string, string, string[], Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Concatenates the list of source files into the destination file, removing
      all source files upon success.
    syntax:
      content: >-
        function concatWithHttpOperationResponse(accountName: string, path:
        string, sources: string[], options?: Object)
      parameters:
        - id: accountName
          type:
            - string
          description: |
            The Azure Data Lake Store account to execute
            filesystem operations on.
        - id: path
          type:
            - string
          description: |
            The Data Lake Store path (starting with '/') of the
            destination file resulting from the concatenation.
        - id: sources
          type:
            - 'string[]'
          description: >
            A list of comma separated Data Lake Store paths

            (starting with '/') of the files to concatenate, in the order in
            which they

            should be concatenated.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<HttpOperationResponse<void>>
    package: azure-arm-datalake-store
  - uid: azure-arm-datalake-store.FileSystem.concurrentAppend
    name: 'concurrentAppend(string, string, stream.Readable, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Appends to the specified file, optionally first creating the file if it
      does

      not yet exist. This method supports multiple concurrent appends to the
      file.

      NOTE: The target must not contain data added by Create or normal (serial)

      Append. ConcurrentAppend and Append cannot be used interchangeably; once a

      target file has been modified using either of these append options, the

      other append option cannot be used on the target file. ConcurrentAppend
      does

      not guarantee order and can result in duplicated data landing in the
      target

      file.
    syntax:
      content: >-
        function concurrentAppend(accountName: string, path: string,
        streamContents: stream.Readable, options?: Object)
      parameters:
        - id: accountName
          type:
            - string
          description: |
            The Azure Data Lake Store account to execute
            filesystem operations on.
        - id: path
          type:
            - string
          description: |
            The Data Lake Store path (starting with '/') of the
            file to which to append using concurrent append.
        - id: streamContents
          type:
            - stream.Readable
          description: >
            The file contents to include when appending

            to the file.  The maximum content size is 4MB.  For content larger
            than 4MB

            you must append the content in 4MB chunks.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<void>
    package: azure-arm-datalake-store
  - uid: azure-arm-datalake-store.FileSystem.concurrentAppend_2
    name: >-
      concurrentAppend(string, string, stream.Readable, Object,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Appends to the specified file, optionally first creating the file if it
      does

      not yet exist. This method supports multiple concurrent appends to the
      file.

      NOTE: The target must not contain data added by Create or normal (serial)

      Append. ConcurrentAppend and Append cannot be used interchangeably; once a

      target file has been modified using either of these append options, the

      other append option cannot be used on the target file. ConcurrentAppend
      does

      not guarantee order and can result in duplicated data landing in the
      target

      file.
    syntax:
      content: >-
        function concurrentAppend(accountName: string, path: string,
        streamContents: stream.Readable, options: Object, callback:
        ServiceCallback<void>)
      parameters:
        - id: accountName
          type:
            - string
          description: ''
        - id: path
          type:
            - string
          description: ''
        - id: streamContents
          type:
            - stream.Readable
          description: ''
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: azure-arm-datalake-store
  - uid: azure-arm-datalake-store.FileSystem.concurrentAppend_1
    name: 'concurrentAppend(string, string, stream.Readable, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Appends to the specified file, optionally first creating the file if it
      does

      not yet exist. This method supports multiple concurrent appends to the
      file.

      NOTE: The target must not contain data added by Create or normal (serial)

      Append. ConcurrentAppend and Append cannot be used interchangeably; once a

      target file has been modified using either of these append options, the

      other append option cannot be used on the target file. ConcurrentAppend
      does

      not guarantee order and can result in duplicated data landing in the
      target

      file.
    syntax:
      content: >-
        function concurrentAppend(accountName: string, path: string,
        streamContents: stream.Readable, callback: ServiceCallback<void>)
      parameters:
        - id: accountName
          type:
            - string
          description: ''
        - id: path
          type:
            - string
          description: ''
        - id: streamContents
          type:
            - stream.Readable
          description: ''
        - id: callback
          type:
            - ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: azure-arm-datalake-store
  - uid: >-
      azure-arm-datalake-store.FileSystem.concurrentAppendWithHttpOperationResponse
    name: >-
      concurrentAppendWithHttpOperationResponse(string, string, stream.Readable,
      Object)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Appends to the specified file, optionally first creating the file if it
      does

      not yet exist. This method supports multiple concurrent appends to the
      file.

      NOTE: The target must not contain data added by Create or normal (serial)

      Append. ConcurrentAppend and Append cannot be used interchangeably; once a

      target file has been modified using either of these append options, the

      other append option cannot be used on the target file. ConcurrentAppend
      does

      not guarantee order and can result in duplicated data landing in the
      target

      file.
    syntax:
      content: >-
        function concurrentAppendWithHttpOperationResponse(accountName: string,
        path: string, streamContents: stream.Readable, options?: Object)
      parameters:
        - id: accountName
          type:
            - string
          description: |
            The Azure Data Lake Store account to execute
            filesystem operations on.
        - id: path
          type:
            - string
          description: |
            The Data Lake Store path (starting with '/') of the
            file to which to append using concurrent append.
        - id: streamContents
          type:
            - stream.Readable
          description: >
            The file contents to include when appending

            to the file.  The maximum content size is 4MB.  For content larger
            than 4MB

            you must append the content in 4MB chunks.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<HttpOperationResponse<void>>
    package: azure-arm-datalake-store
  - uid: azure-arm-datalake-store.FileSystem.create
    name: 'create(string, string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Creates a file with optionally specified content. NOTE: If content is
      provided, the resulting file cannot be modified using ConcurrentAppend.
    syntax:
      content: 'function create(accountName: string, path: string, options?: Object)'
      parameters:
        - id: accountName
          type:
            - string
          description: |
            The Azure Data Lake Store account to execute
            filesystem operations on.
        - id: path
          type:
            - string
          description: |
            The Data Lake Store path (starting with '/') of the
            file to create.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<void>
    package: azure-arm-datalake-store
  - uid: azure-arm-datalake-store.FileSystem.create_2
    name: 'create(string, string, Object, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Creates a file with optionally specified content. NOTE: If content is
      provided, the resulting file cannot be modified using ConcurrentAppend.
    syntax:
      content: >-
        function create(accountName: string, path: string, options: Object,
        callback: ServiceCallback<void>)
      parameters:
        - id: accountName
          type:
            - string
          description: ''
        - id: path
          type:
            - string
          description: ''
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: azure-arm-datalake-store
  - uid: azure-arm-datalake-store.FileSystem.create_1
    name: 'create(string, string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Creates a file with optionally specified content. NOTE: If content is
      provided, the resulting file cannot be modified using ConcurrentAppend.
    syntax:
      content: >-
        function create(accountName: string, path: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: accountName
          type:
            - string
          description: ''
        - id: path
          type:
            - string
          description: ''
        - id: callback
          type:
            - ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: azure-arm-datalake-store
  - uid: azure-arm-datalake-store.FileSystem.createWithHttpOperationResponse
    name: 'createWithHttpOperationResponse(string, string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Creates a file with optionally specified content. NOTE: If content is
      provided, the resulting file cannot be modified using ConcurrentAppend.
    syntax:
      content: >-
        function createWithHttpOperationResponse(accountName: string, path:
        string, options?: Object)
      parameters:
        - id: accountName
          type:
            - string
          description: |
            The Azure Data Lake Store account to execute
            filesystem operations on.
        - id: path
          type:
            - string
          description: |
            The Data Lake Store path (starting with '/') of the
            file to create.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<HttpOperationResponse<void>>
    package: azure-arm-datalake-store
  - uid: azure-arm-datalake-store.FileSystem.deleteMethod
    name: 'deleteMethod(string, string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Deletes the requested file or directory, optionally recursively.'
    syntax:
      content: >-
        function deleteMethod(accountName: string, path: string, options?:
        Object)
      parameters:
        - id: accountName
          type:
            - string
          description: |
            The Azure Data Lake Store account to execute
            filesystem operations on.
        - id: path
          type:
            - string
          description: |
            The Data Lake Store path (starting with '/') of the
            file or directory to delete.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<azure-arm-datalake-store.FileOperationResult>
    package: azure-arm-datalake-store
  - uid: azure-arm-datalake-store.FileSystem.deleteMethod_2
    name: 'deleteMethod(string, string, Object, ServiceCallback<FileOperationResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Deletes the requested file or directory, optionally recursively.'
    syntax:
      content: >-
        function deleteMethod(accountName: string, path: string, options:
        Object, callback: ServiceCallback<FileOperationResult>)
      parameters:
        - id: accountName
          type:
            - string
          description: ''
        - id: path
          type:
            - string
          description: ''
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - ServiceCallback<azure-arm-datalake-store.FileOperationResult>
          description: ''
      return:
        type:
          - Promise<azure-arm-datalake-store.FileOperationResult>
    package: azure-arm-datalake-store
  - uid: azure-arm-datalake-store.FileSystem.deleteMethod_1
    name: 'deleteMethod(string, string, ServiceCallback<FileOperationResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Deletes the requested file or directory, optionally recursively.'
    syntax:
      content: >-
        function deleteMethod(accountName: string, path: string, callback:
        ServiceCallback<FileOperationResult>)
      parameters:
        - id: accountName
          type:
            - string
          description: ''
        - id: path
          type:
            - string
          description: ''
        - id: callback
          type:
            - ServiceCallback<azure-arm-datalake-store.FileOperationResult>
          description: ''
      return:
        type:
          - Promise<azure-arm-datalake-store.FileOperationResult>
    package: azure-arm-datalake-store
  - uid: azure-arm-datalake-store.FileSystem.deleteMethodWithHttpOperationResponse
    name: 'deleteMethodWithHttpOperationResponse(string, string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Deletes the requested file or directory, optionally recursively.'
    syntax:
      content: >-
        function deleteMethodWithHttpOperationResponse(accountName: string,
        path: string, options?: Object)
      parameters:
        - id: accountName
          type:
            - string
          description: |
            The Azure Data Lake Store account to execute
            filesystem operations on.
        - id: path
          type:
            - string
          description: |
            The Data Lake Store path (starting with '/') of the
            file or directory to delete.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<HttpOperationResponse<azure-arm-datalake-store.FileOperationResult>>
    package: azure-arm-datalake-store
  - uid: azure-arm-datalake-store.FileSystem.getAclStatus
    name: 'getAclStatus(string, string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets Access Control List (ACL) entries for the specified file or
      directory.
    syntax:
      content: >-
        function getAclStatus(accountName: string, path: string, options?:
        Object)
      parameters:
        - id: accountName
          type:
            - string
          description: |
            The Azure Data Lake Store account to execute
            filesystem operations on.
        - id: path
          type:
            - string
          description: |
            The Data Lake Store path (starting with '/') of the
            file or directory for which to get the ACL.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<azure-arm-datalake-store.AclStatusResult>
    package: azure-arm-datalake-store
  - uid: azure-arm-datalake-store.FileSystem.getAclStatus_2
    name: 'getAclStatus(string, string, Object, ServiceCallback<AclStatusResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets Access Control List (ACL) entries for the specified file or
      directory.
    syntax:
      content: >-
        function getAclStatus(accountName: string, path: string, options:
        Object, callback: ServiceCallback<AclStatusResult>)
      parameters:
        - id: accountName
          type:
            - string
          description: ''
        - id: path
          type:
            - string
          description: ''
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - ServiceCallback<azure-arm-datalake-store.AclStatusResult>
          description: ''
      return:
        type:
          - Promise<azure-arm-datalake-store.AclStatusResult>
    package: azure-arm-datalake-store
  - uid: azure-arm-datalake-store.FileSystem.getAclStatus_1
    name: 'getAclStatus(string, string, ServiceCallback<AclStatusResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets Access Control List (ACL) entries for the specified file or
      directory.
    syntax:
      content: >-
        function getAclStatus(accountName: string, path: string, callback:
        ServiceCallback<AclStatusResult>)
      parameters:
        - id: accountName
          type:
            - string
          description: ''
        - id: path
          type:
            - string
          description: ''
        - id: callback
          type:
            - ServiceCallback<azure-arm-datalake-store.AclStatusResult>
          description: ''
      return:
        type:
          - Promise<azure-arm-datalake-store.AclStatusResult>
    package: azure-arm-datalake-store
  - uid: azure-arm-datalake-store.FileSystem.getAclStatusWithHttpOperationResponse
    name: 'getAclStatusWithHttpOperationResponse(string, string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets Access Control List (ACL) entries for the specified file or
      directory.
    syntax:
      content: >-
        function getAclStatusWithHttpOperationResponse(accountName: string,
        path: string, options?: Object)
      parameters:
        - id: accountName
          type:
            - string
          description: |
            The Azure Data Lake Store account to execute
            filesystem operations on.
        - id: path
          type:
            - string
          description: |
            The Data Lake Store path (starting with '/') of the
            file or directory for which to get the ACL.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<HttpOperationResponse<azure-arm-datalake-store.AclStatusResult>>
    package: azure-arm-datalake-store
  - uid: azure-arm-datalake-store.FileSystem.getContentSummary
    name: 'getContentSummary(string, string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Gets the file content summary object specified by the file path.
    syntax:
      content: >-
        function getContentSummary(accountName: string, path: string, options?:
        Object)
      parameters:
        - id: accountName
          type:
            - string
          description: |
            The Azure Data Lake Store account to execute
            filesystem operations on.
        - id: path
          type:
            - string
          description: |
            The Data Lake Store path (starting with '/') of the
            file for which to retrieve the summary.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<azure-arm-datalake-store.ContentSummaryResult>
    package: azure-arm-datalake-store
  - uid: azure-arm-datalake-store.FileSystem.getContentSummary_2
    name: >-
      getContentSummary(string, string, Object,
      ServiceCallback<ContentSummaryResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: Gets the file content summary object specified by the file path.
    syntax:
      content: >-
        function getContentSummary(accountName: string, path: string, options:
        Object, callback: ServiceCallback<ContentSummaryResult>)
      parameters:
        - id: accountName
          type:
            - string
          description: ''
        - id: path
          type:
            - string
          description: ''
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - ServiceCallback<azure-arm-datalake-store.ContentSummaryResult>
          description: ''
      return:
        type:
          - Promise<azure-arm-datalake-store.ContentSummaryResult>
    package: azure-arm-datalake-store
  - uid: azure-arm-datalake-store.FileSystem.getContentSummary_1
    name: 'getContentSummary(string, string, ServiceCallback<ContentSummaryResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Gets the file content summary object specified by the file path.
    syntax:
      content: >-
        function getContentSummary(accountName: string, path: string, callback:
        ServiceCallback<ContentSummaryResult>)
      parameters:
        - id: accountName
          type:
            - string
          description: ''
        - id: path
          type:
            - string
          description: ''
        - id: callback
          type:
            - ServiceCallback<azure-arm-datalake-store.ContentSummaryResult>
          description: ''
      return:
        type:
          - Promise<azure-arm-datalake-store.ContentSummaryResult>
    package: azure-arm-datalake-store
  - uid: >-
      azure-arm-datalake-store.FileSystem.getContentSummaryWithHttpOperationResponse
    name: 'getContentSummaryWithHttpOperationResponse(string, string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Gets the file content summary object specified by the file path.
    syntax:
      content: >-
        function getContentSummaryWithHttpOperationResponse(accountName: string,
        path: string, options?: Object)
      parameters:
        - id: accountName
          type:
            - string
          description: |
            The Azure Data Lake Store account to execute
            filesystem operations on.
        - id: path
          type:
            - string
          description: |
            The Data Lake Store path (starting with '/') of the
            file for which to retrieve the summary.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<HttpOperationResponse<azure-arm-datalake-store.ContentSummaryResult>>
    package: azure-arm-datalake-store
  - uid: azure-arm-datalake-store.FileSystem.getFileStatus
    name: 'getFileStatus(string, string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Get the file status object specified by the file path.
    syntax:
      content: >-
        function getFileStatus(accountName: string, path: string, options?:
        Object)
      parameters:
        - id: accountName
          type:
            - string
          description: |
            The Azure Data Lake Store account to execute
            filesystem operations on.
        - id: path
          type:
            - string
          description: |
            The Data Lake Store path (starting with '/') of the
            file or directory for which to retrieve the status.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<azure-arm-datalake-store.FileStatusResult>
    package: azure-arm-datalake-store
  - uid: azure-arm-datalake-store.FileSystem.getFileStatus_2
    name: 'getFileStatus(string, string, Object, ServiceCallback<FileStatusResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Get the file status object specified by the file path.
    syntax:
      content: >-
        function getFileStatus(accountName: string, path: string, options:
        Object, callback: ServiceCallback<FileStatusResult>)
      parameters:
        - id: accountName
          type:
            - string
          description: ''
        - id: path
          type:
            - string
          description: ''
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - ServiceCallback<azure-arm-datalake-store.FileStatusResult>
          description: ''
      return:
        type:
          - Promise<azure-arm-datalake-store.FileStatusResult>
    package: azure-arm-datalake-store
  - uid: azure-arm-datalake-store.FileSystem.getFileStatus_1
    name: 'getFileStatus(string, string, ServiceCallback<FileStatusResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Get the file status object specified by the file path.
    syntax:
      content: >-
        function getFileStatus(accountName: string, path: string, callback:
        ServiceCallback<FileStatusResult>)
      parameters:
        - id: accountName
          type:
            - string
          description: ''
        - id: path
          type:
            - string
          description: ''
        - id: callback
          type:
            - ServiceCallback<azure-arm-datalake-store.FileStatusResult>
          description: ''
      return:
        type:
          - Promise<azure-arm-datalake-store.FileStatusResult>
    package: azure-arm-datalake-store
  - uid: azure-arm-datalake-store.FileSystem.getFileStatusWithHttpOperationResponse
    name: 'getFileStatusWithHttpOperationResponse(string, string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Get the file status object specified by the file path.
    syntax:
      content: >-
        function getFileStatusWithHttpOperationResponse(accountName: string,
        path: string, options?: Object)
      parameters:
        - id: accountName
          type:
            - string
          description: |
            The Azure Data Lake Store account to execute
            filesystem operations on.
        - id: path
          type:
            - string
          description: |
            The Data Lake Store path (starting with '/') of the
            file or directory for which to retrieve the status.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<HttpOperationResponse<azure-arm-datalake-store.FileStatusResult>>
    package: azure-arm-datalake-store
  - uid: azure-arm-datalake-store.FileSystem.listFileStatus
    name: 'listFileStatus(string, string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Get the list of file status objects specified by the file path, with
      optional pagination parameters
    syntax:
      content: >-
        function listFileStatus(accountName: string, path: string, options?:
        Object)
      parameters:
        - id: accountName
          type:
            - string
          description: |
            The Azure Data Lake Store account to execute
            filesystem operations on.
        - id: path
          type:
            - string
          description: |
            The Data Lake Store path (starting with '/') of the
            directory to list.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<azure-arm-datalake-store.FileStatusesResult>
    package: azure-arm-datalake-store
  - uid: azure-arm-datalake-store.FileSystem.listFileStatus_2
    name: >-
      listFileStatus(string, string, Object,
      ServiceCallback<FileStatusesResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Get the list of file status objects specified by the file path, with
      optional pagination parameters
    syntax:
      content: >-
        function listFileStatus(accountName: string, path: string, options:
        Object, callback: ServiceCallback<FileStatusesResult>)
      parameters:
        - id: accountName
          type:
            - string
          description: ''
        - id: path
          type:
            - string
          description: ''
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - ServiceCallback<azure-arm-datalake-store.FileStatusesResult>
          description: ''
      return:
        type:
          - Promise<azure-arm-datalake-store.FileStatusesResult>
    package: azure-arm-datalake-store
  - uid: azure-arm-datalake-store.FileSystem.listFileStatus_1
    name: 'listFileStatus(string, string, ServiceCallback<FileStatusesResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Get the list of file status objects specified by the file path, with
      optional pagination parameters
    syntax:
      content: >-
        function listFileStatus(accountName: string, path: string, callback:
        ServiceCallback<FileStatusesResult>)
      parameters:
        - id: accountName
          type:
            - string
          description: ''
        - id: path
          type:
            - string
          description: ''
        - id: callback
          type:
            - ServiceCallback<azure-arm-datalake-store.FileStatusesResult>
          description: ''
      return:
        type:
          - Promise<azure-arm-datalake-store.FileStatusesResult>
    package: azure-arm-datalake-store
  - uid: >-
      azure-arm-datalake-store.FileSystem.listFileStatusWithHttpOperationResponse
    name: 'listFileStatusWithHttpOperationResponse(string, string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Get the list of file status objects specified by the file path, with
      optional pagination parameters
    syntax:
      content: >-
        function listFileStatusWithHttpOperationResponse(accountName: string,
        path: string, options?: Object)
      parameters:
        - id: accountName
          type:
            - string
          description: |
            The Azure Data Lake Store account to execute
            filesystem operations on.
        - id: path
          type:
            - string
          description: |
            The Data Lake Store path (starting with '/') of the
            directory to list.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<HttpOperationResponse<azure-arm-datalake-store.FileStatusesResult>>
    package: azure-arm-datalake-store
  - uid: azure-arm-datalake-store.FileSystem.mkdirs
    name: 'mkdirs(string, string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Creates a directory.
    syntax:
      content: 'function mkdirs(accountName: string, path: string, options?: Object)'
      parameters:
        - id: accountName
          type:
            - string
          description: |
            The Azure Data Lake Store account to execute
            filesystem operations on.
        - id: path
          type:
            - string
          description: |
            The Data Lake Store path (starting with '/') of the
            directory to create.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<azure-arm-datalake-store.FileOperationResult>
    package: azure-arm-datalake-store
  - uid: azure-arm-datalake-store.FileSystem.mkdirs_2
    name: 'mkdirs(string, string, Object, ServiceCallback<FileOperationResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Creates a directory.
    syntax:
      content: >-
        function mkdirs(accountName: string, path: string, options: Object,
        callback: ServiceCallback<FileOperationResult>)
      parameters:
        - id: accountName
          type:
            - string
          description: ''
        - id: path
          type:
            - string
          description: ''
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - ServiceCallback<azure-arm-datalake-store.FileOperationResult>
          description: ''
      return:
        type:
          - Promise<azure-arm-datalake-store.FileOperationResult>
    package: azure-arm-datalake-store
  - uid: azure-arm-datalake-store.FileSystem.mkdirs_1
    name: 'mkdirs(string, string, ServiceCallback<FileOperationResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Creates a directory.
    syntax:
      content: >-
        function mkdirs(accountName: string, path: string, callback:
        ServiceCallback<FileOperationResult>)
      parameters:
        - id: accountName
          type:
            - string
          description: ''
        - id: path
          type:
            - string
          description: ''
        - id: callback
          type:
            - ServiceCallback<azure-arm-datalake-store.FileOperationResult>
          description: ''
      return:
        type:
          - Promise<azure-arm-datalake-store.FileOperationResult>
    package: azure-arm-datalake-store
  - uid: azure-arm-datalake-store.FileSystem.mkdirsWithHttpOperationResponse
    name: 'mkdirsWithHttpOperationResponse(string, string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Creates a directory.
    syntax:
      content: >-
        function mkdirsWithHttpOperationResponse(accountName: string, path:
        string, options?: Object)
      parameters:
        - id: accountName
          type:
            - string
          description: |
            The Azure Data Lake Store account to execute
            filesystem operations on.
        - id: path
          type:
            - string
          description: |
            The Data Lake Store path (starting with '/') of the
            directory to create.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<HttpOperationResponse<azure-arm-datalake-store.FileOperationResult>>
    package: azure-arm-datalake-store
  - uid: azure-arm-datalake-store.FileSystem.modifyAclEntries
    name: 'modifyAclEntries(string, string, string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Modifies existing Access Control List (ACL) entries on a file or folder.
    syntax:
      content: >-
        function modifyAclEntries(accountName: string, path: string, aclspec:
        string, options?: Object)
      parameters:
        - id: accountName
          type:
            - string
          description: |
            The Azure Data Lake Store account to execute
            filesystem operations on.
        - id: path
          type:
            - string
          description: |
            The Data Lake Store path (starting with '/') of the
            file or directory with the ACL being modified.
        - id: aclspec
          type:
            - string
          description: |
            The ACL specification included in ACL modification
            operations in the format '[default:]user|group|other::r|-w|-x|-'
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<void>
    package: azure-arm-datalake-store
  - uid: azure-arm-datalake-store.FileSystem.modifyAclEntries_2
    name: 'modifyAclEntries(string, string, string, Object, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Modifies existing Access Control List (ACL) entries on a file or folder.
    syntax:
      content: >-
        function modifyAclEntries(accountName: string, path: string, aclspec:
        string, options: Object, callback: ServiceCallback<void>)
      parameters:
        - id: accountName
          type:
            - string
          description: ''
        - id: path
          type:
            - string
          description: ''
        - id: aclspec
          type:
            - string
          description: ''
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: azure-arm-datalake-store
  - uid: azure-arm-datalake-store.FileSystem.modifyAclEntries_1
    name: 'modifyAclEntries(string, string, string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Modifies existing Access Control List (ACL) entries on a file or folder.
    syntax:
      content: >-
        function modifyAclEntries(accountName: string, path: string, aclspec:
        string, callback: ServiceCallback<void>)
      parameters:
        - id: accountName
          type:
            - string
          description: ''
        - id: path
          type:
            - string
          description: ''
        - id: aclspec
          type:
            - string
          description: ''
        - id: callback
          type:
            - ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: azure-arm-datalake-store
  - uid: >-
      azure-arm-datalake-store.FileSystem.modifyAclEntriesWithHttpOperationResponse
    name: 'modifyAclEntriesWithHttpOperationResponse(string, string, string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Modifies existing Access Control List (ACL) entries on a file or folder.
    syntax:
      content: >-
        function modifyAclEntriesWithHttpOperationResponse(accountName: string,
        path: string, aclspec: string, options?: Object)
      parameters:
        - id: accountName
          type:
            - string
          description: |
            The Azure Data Lake Store account to execute
            filesystem operations on.
        - id: path
          type:
            - string
          description: |
            The Data Lake Store path (starting with '/') of the
            file or directory with the ACL being modified.
        - id: aclspec
          type:
            - string
          description: |
            The ACL specification included in ACL modification
            operations in the format '[default:]user|group|other::r|-w|-x|-'
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<HttpOperationResponse<void>>
    package: azure-arm-datalake-store
  - uid: azure-arm-datalake-store.FileSystem.msConcat
    name: 'msConcat(string, string, stream.Readable, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Concatenates the list of source files into the destination file, deleting
      all source files upon success. This method accepts more source file paths
      than the Concat method. This method and the parameters it accepts are
      subject to change for usability in an upcoming version.
    syntax:
      content: >-
        function msConcat(accountName: string, path: string, streamContents:
        stream.Readable, options?: Object)
      parameters:
        - id: accountName
          type:
            - string
          description: |
            The Azure Data Lake Store account to execute
            filesystem operations on.
        - id: path
          type:
            - string
          description: |
            The Data Lake Store path (starting with '/') of the
            destination file resulting from the concatenation.
        - id: streamContents
          type:
            - stream.Readable
          description: >
            A list of Data Lake Store paths (starting

            with '/') of the source files. Must be a comma-separated path list
            in the

            format:
            sources=/file/path/1.txt,/file/path/2.txt,/file/path/lastfile.csv
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<void>
    package: azure-arm-datalake-store
  - uid: azure-arm-datalake-store.FileSystem.msConcat_2
    name: 'msConcat(string, string, stream.Readable, Object, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Concatenates the list of source files into the destination file, deleting
      all source files upon success. This method accepts more source file paths
      than the Concat method. This method and the parameters it accepts are
      subject to change for usability in an upcoming version.
    syntax:
      content: >-
        function msConcat(accountName: string, path: string, streamContents:
        stream.Readable, options: Object, callback: ServiceCallback<void>)
      parameters:
        - id: accountName
          type:
            - string
          description: ''
        - id: path
          type:
            - string
          description: ''
        - id: streamContents
          type:
            - stream.Readable
          description: ''
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: azure-arm-datalake-store
  - uid: azure-arm-datalake-store.FileSystem.msConcat_1
    name: 'msConcat(string, string, stream.Readable, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Concatenates the list of source files into the destination file, deleting
      all source files upon success. This method accepts more source file paths
      than the Concat method. This method and the parameters it accepts are
      subject to change for usability in an upcoming version.
    syntax:
      content: >-
        function msConcat(accountName: string, path: string, streamContents:
        stream.Readable, callback: ServiceCallback<void>)
      parameters:
        - id: accountName
          type:
            - string
          description: ''
        - id: path
          type:
            - string
          description: ''
        - id: streamContents
          type:
            - stream.Readable
          description: ''
        - id: callback
          type:
            - ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: azure-arm-datalake-store
  - uid: azure-arm-datalake-store.FileSystem.msConcatWithHttpOperationResponse
    name: 'msConcatWithHttpOperationResponse(string, string, stream.Readable, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Concatenates the list of source files into the destination file, deleting
      all source files upon success. This method accepts more source file paths
      than the Concat method. This method and the parameters it accepts are
      subject to change for usability in an upcoming version.
    syntax:
      content: >-
        function msConcatWithHttpOperationResponse(accountName: string, path:
        string, streamContents: stream.Readable, options?: Object)
      parameters:
        - id: accountName
          type:
            - string
          description: |
            The Azure Data Lake Store account to execute
            filesystem operations on.
        - id: path
          type:
            - string
          description: |
            The Data Lake Store path (starting with '/') of the
            destination file resulting from the concatenation.
        - id: streamContents
          type:
            - stream.Readable
          description: >
            A list of Data Lake Store paths (starting

            with '/') of the source files. Must be a comma-separated path list
            in the

            format:
            sources=/file/path/1.txt,/file/path/2.txt,/file/path/lastfile.csv
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<HttpOperationResponse<void>>
    package: azure-arm-datalake-store
  - uid: azure-arm-datalake-store.FileSystem.open
    name: 'open(string, string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Opens and reads from the specified file.
    syntax:
      content: 'function open(accountName: string, path: string, options?: Object)'
      parameters:
        - id: accountName
          type:
            - string
          description: |
            The Azure Data Lake Store account to execute
            filesystem operations on.
        - id: path
          type:
            - string
          description: |
            The Data Lake Store path (starting with '/') of the
            file to open.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<stream.Readable>
    package: azure-arm-datalake-store
  - uid: azure-arm-datalake-store.FileSystem.open_2
    name: 'open(string, string, Object, ServiceCallback<stream.Readable>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Opens and reads from the specified file.
    syntax:
      content: >-
        function open(accountName: string, path: string, options: Object,
        callback: ServiceCallback<stream.Readable>)
      parameters:
        - id: accountName
          type:
            - string
          description: ''
        - id: path
          type:
            - string
          description: ''
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - ServiceCallback<stream.Readable>
          description: ''
      return:
        type:
          - Promise<stream.Readable>
    package: azure-arm-datalake-store
  - uid: azure-arm-datalake-store.FileSystem.open_1
    name: 'open(string, string, ServiceCallback<stream.Readable>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Opens and reads from the specified file.
    syntax:
      content: >-
        function open(accountName: string, path: string, callback:
        ServiceCallback<stream.Readable>)
      parameters:
        - id: accountName
          type:
            - string
          description: ''
        - id: path
          type:
            - string
          description: ''
        - id: callback
          type:
            - ServiceCallback<stream.Readable>
          description: ''
      return:
        type:
          - Promise<stream.Readable>
    package: azure-arm-datalake-store
  - uid: azure-arm-datalake-store.FileSystem.openWithHttpOperationResponse
    name: 'openWithHttpOperationResponse(string, string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Opens and reads from the specified file.
    syntax:
      content: >-
        function openWithHttpOperationResponse(accountName: string, path:
        string, options?: Object)
      parameters:
        - id: accountName
          type:
            - string
          description: |
            The Azure Data Lake Store account to execute
            filesystem operations on.
        - id: path
          type:
            - string
          description: |
            The Data Lake Store path (starting with '/') of the
            file to open.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<HttpOperationResponse<stream.Readable>>
    package: azure-arm-datalake-store
  - uid: azure-arm-datalake-store.FileSystem.removeAcl
    name: 'removeAcl(string, string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Removes the existing Access Control List (ACL) of the specified file or
      directory.
    syntax:
      content: 'function removeAcl(accountName: string, path: string, options?: Object)'
      parameters:
        - id: accountName
          type:
            - string
          description: |
            The Azure Data Lake Store account to execute
            filesystem operations on.
        - id: path
          type:
            - string
          description: |
            The Data Lake Store path (starting with '/') of the
            file or directory with the ACL being removed.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<void>
    package: azure-arm-datalake-store
  - uid: azure-arm-datalake-store.FileSystem.removeAcl_2
    name: 'removeAcl(string, string, Object, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Removes the existing Access Control List (ACL) of the specified file or
      directory.
    syntax:
      content: >-
        function removeAcl(accountName: string, path: string, options: Object,
        callback: ServiceCallback<void>)
      parameters:
        - id: accountName
          type:
            - string
          description: ''
        - id: path
          type:
            - string
          description: ''
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: azure-arm-datalake-store
  - uid: azure-arm-datalake-store.FileSystem.removeAcl_1
    name: 'removeAcl(string, string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Removes the existing Access Control List (ACL) of the specified file or
      directory.
    syntax:
      content: >-
        function removeAcl(accountName: string, path: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: accountName
          type:
            - string
          description: ''
        - id: path
          type:
            - string
          description: ''
        - id: callback
          type:
            - ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: azure-arm-datalake-store
  - uid: azure-arm-datalake-store.FileSystem.removeAclEntries
    name: 'removeAclEntries(string, string, string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Removes existing Access Control List (ACL) entries for a file or folder.
    syntax:
      content: >-
        function removeAclEntries(accountName: string, path: string, aclspec:
        string, options?: Object)
      parameters:
        - id: accountName
          type:
            - string
          description: |
            The Azure Data Lake Store account to execute
            filesystem operations on.
        - id: path
          type:
            - string
          description: |
            The Data Lake Store path (starting with '/') of the
            file or directory with the ACL being removed.
        - id: aclspec
          type:
            - string
          description: |
            The ACL spec included in ACL removal operations in
            the format '[default:]user|group|other'
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<void>
    package: azure-arm-datalake-store
  - uid: azure-arm-datalake-store.FileSystem.removeAclEntries_2
    name: 'removeAclEntries(string, string, string, Object, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Removes existing Access Control List (ACL) entries for a file or folder.
    syntax:
      content: >-
        function removeAclEntries(accountName: string, path: string, aclspec:
        string, options: Object, callback: ServiceCallback<void>)
      parameters:
        - id: accountName
          type:
            - string
          description: ''
        - id: path
          type:
            - string
          description: ''
        - id: aclspec
          type:
            - string
          description: ''
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: azure-arm-datalake-store
  - uid: azure-arm-datalake-store.FileSystem.removeAclEntries_1
    name: 'removeAclEntries(string, string, string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Removes existing Access Control List (ACL) entries for a file or folder.
    syntax:
      content: >-
        function removeAclEntries(accountName: string, path: string, aclspec:
        string, callback: ServiceCallback<void>)
      parameters:
        - id: accountName
          type:
            - string
          description: ''
        - id: path
          type:
            - string
          description: ''
        - id: aclspec
          type:
            - string
          description: ''
        - id: callback
          type:
            - ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: azure-arm-datalake-store
  - uid: >-
      azure-arm-datalake-store.FileSystem.removeAclEntriesWithHttpOperationResponse
    name: 'removeAclEntriesWithHttpOperationResponse(string, string, string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Removes existing Access Control List (ACL) entries for a file or folder.
    syntax:
      content: >-
        function removeAclEntriesWithHttpOperationResponse(accountName: string,
        path: string, aclspec: string, options?: Object)
      parameters:
        - id: accountName
          type:
            - string
          description: |
            The Azure Data Lake Store account to execute
            filesystem operations on.
        - id: path
          type:
            - string
          description: |
            The Data Lake Store path (starting with '/') of the
            file or directory with the ACL being removed.
        - id: aclspec
          type:
            - string
          description: |
            The ACL spec included in ACL removal operations in
            the format '[default:]user|group|other'
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<HttpOperationResponse<void>>
    package: azure-arm-datalake-store
  - uid: azure-arm-datalake-store.FileSystem.removeAclWithHttpOperationResponse
    name: 'removeAclWithHttpOperationResponse(string, string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Removes the existing Access Control List (ACL) of the specified file or
      directory.
    syntax:
      content: >-
        function removeAclWithHttpOperationResponse(accountName: string, path:
        string, options?: Object)
      parameters:
        - id: accountName
          type:
            - string
          description: |
            The Azure Data Lake Store account to execute
            filesystem operations on.
        - id: path
          type:
            - string
          description: |
            The Data Lake Store path (starting with '/') of the
            file or directory with the ACL being removed.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<HttpOperationResponse<void>>
    package: azure-arm-datalake-store
  - uid: azure-arm-datalake-store.FileSystem.removeDefaultAcl
    name: 'removeDefaultAcl(string, string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Removes the existing Default Access Control List (ACL) of the specified
      directory.
    syntax:
      content: >-
        function removeDefaultAcl(accountName: string, path: string, options?:
        Object)
      parameters:
        - id: accountName
          type:
            - string
          description: |
            The Azure Data Lake Store account to execute
            filesystem operations on.
        - id: path
          type:
            - string
          description: |
            The Data Lake Store path (starting with '/') of the
            directory with the default ACL being removed.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<void>
    package: azure-arm-datalake-store
  - uid: azure-arm-datalake-store.FileSystem.removeDefaultAcl_2
    name: 'removeDefaultAcl(string, string, Object, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Removes the existing Default Access Control List (ACL) of the specified
      directory.
    syntax:
      content: >-
        function removeDefaultAcl(accountName: string, path: string, options:
        Object, callback: ServiceCallback<void>)
      parameters:
        - id: accountName
          type:
            - string
          description: ''
        - id: path
          type:
            - string
          description: ''
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: azure-arm-datalake-store
  - uid: azure-arm-datalake-store.FileSystem.removeDefaultAcl_1
    name: 'removeDefaultAcl(string, string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Removes the existing Default Access Control List (ACL) of the specified
      directory.
    syntax:
      content: >-
        function removeDefaultAcl(accountName: string, path: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: accountName
          type:
            - string
          description: ''
        - id: path
          type:
            - string
          description: ''
        - id: callback
          type:
            - ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: azure-arm-datalake-store
  - uid: >-
      azure-arm-datalake-store.FileSystem.removeDefaultAclWithHttpOperationResponse
    name: 'removeDefaultAclWithHttpOperationResponse(string, string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Removes the existing Default Access Control List (ACL) of the specified
      directory.
    syntax:
      content: >-
        function removeDefaultAclWithHttpOperationResponse(accountName: string,
        path: string, options?: Object)
      parameters:
        - id: accountName
          type:
            - string
          description: |
            The Azure Data Lake Store account to execute
            filesystem operations on.
        - id: path
          type:
            - string
          description: |
            The Data Lake Store path (starting with '/') of the
            directory with the default ACL being removed.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<HttpOperationResponse<void>>
    package: azure-arm-datalake-store
  - uid: azure-arm-datalake-store.FileSystem.rename
    name: 'rename(string, string, string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Rename a file or directory.
    syntax:
      content: >-
        function rename(accountName: string, path: string, destination: string,
        options?: Object)
      parameters:
        - id: accountName
          type:
            - string
          description: |
            The Azure Data Lake Store account to execute
            filesystem operations on.
        - id: path
          type:
            - string
          description: |
            The Data Lake Store path (starting with '/') of the
            file or directory to move/rename.
        - id: destination
          type:
            - string
          description: |
            The path to move/rename the file or folder to
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<azure-arm-datalake-store.FileOperationResult>
    package: azure-arm-datalake-store
  - uid: azure-arm-datalake-store.FileSystem.rename_2
    name: >-
      rename(string, string, string, Object,
      ServiceCallback<FileOperationResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: Rename a file or directory.
    syntax:
      content: >-
        function rename(accountName: string, path: string, destination: string,
        options: Object, callback: ServiceCallback<FileOperationResult>)
      parameters:
        - id: accountName
          type:
            - string
          description: ''
        - id: path
          type:
            - string
          description: ''
        - id: destination
          type:
            - string
          description: ''
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - ServiceCallback<azure-arm-datalake-store.FileOperationResult>
          description: ''
      return:
        type:
          - Promise<azure-arm-datalake-store.FileOperationResult>
    package: azure-arm-datalake-store
  - uid: azure-arm-datalake-store.FileSystem.rename_1
    name: 'rename(string, string, string, ServiceCallback<FileOperationResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Rename a file or directory.
    syntax:
      content: >-
        function rename(accountName: string, path: string, destination: string,
        callback: ServiceCallback<FileOperationResult>)
      parameters:
        - id: accountName
          type:
            - string
          description: ''
        - id: path
          type:
            - string
          description: ''
        - id: destination
          type:
            - string
          description: ''
        - id: callback
          type:
            - ServiceCallback<azure-arm-datalake-store.FileOperationResult>
          description: ''
      return:
        type:
          - Promise<azure-arm-datalake-store.FileOperationResult>
    package: azure-arm-datalake-store
  - uid: azure-arm-datalake-store.FileSystem.renameWithHttpOperationResponse
    name: 'renameWithHttpOperationResponse(string, string, string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Rename a file or directory.
    syntax:
      content: >-
        function renameWithHttpOperationResponse(accountName: string, path:
        string, destination: string, options?: Object)
      parameters:
        - id: accountName
          type:
            - string
          description: |
            The Azure Data Lake Store account to execute
            filesystem operations on.
        - id: path
          type:
            - string
          description: |
            The Data Lake Store path (starting with '/') of the
            file or directory to move/rename.
        - id: destination
          type:
            - string
          description: |
            The path to move/rename the file or folder to
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<HttpOperationResponse<azure-arm-datalake-store.FileOperationResult>>
    package: azure-arm-datalake-store
  - uid: azure-arm-datalake-store.FileSystem.setAcl
    name: 'setAcl(string, string, string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Sets the Access Control List (ACL) for a file or folder.
    syntax:
      content: >-
        function setAcl(accountName: string, path: string, aclspec: string,
        options?: Object)
      parameters:
        - id: accountName
          type:
            - string
          description: |
            The Azure Data Lake Store account to execute
            filesystem operations on.
        - id: path
          type:
            - string
          description: |
            The Data Lake Store path (starting with '/') of the
            file or directory on which to set the ACL.
        - id: aclspec
          type:
            - string
          description: |
            The ACL spec included in ACL creation operations in
            the format '[default:]user|group|other::r|-w|-x|-'
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<void>
    package: azure-arm-datalake-store
  - uid: azure-arm-datalake-store.FileSystem.setAcl_2
    name: 'setAcl(string, string, string, Object, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Sets the Access Control List (ACL) for a file or folder.
    syntax:
      content: >-
        function setAcl(accountName: string, path: string, aclspec: string,
        options: Object, callback: ServiceCallback<void>)
      parameters:
        - id: accountName
          type:
            - string
          description: ''
        - id: path
          type:
            - string
          description: ''
        - id: aclspec
          type:
            - string
          description: ''
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: azure-arm-datalake-store
  - uid: azure-arm-datalake-store.FileSystem.setAcl_1
    name: 'setAcl(string, string, string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Sets the Access Control List (ACL) for a file or folder.
    syntax:
      content: >-
        function setAcl(accountName: string, path: string, aclspec: string,
        callback: ServiceCallback<void>)
      parameters:
        - id: accountName
          type:
            - string
          description: ''
        - id: path
          type:
            - string
          description: ''
        - id: aclspec
          type:
            - string
          description: ''
        - id: callback
          type:
            - ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: azure-arm-datalake-store
  - uid: azure-arm-datalake-store.FileSystem.setAclWithHttpOperationResponse
    name: 'setAclWithHttpOperationResponse(string, string, string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Sets the Access Control List (ACL) for a file or folder.
    syntax:
      content: >-
        function setAclWithHttpOperationResponse(accountName: string, path:
        string, aclspec: string, options?: Object)
      parameters:
        - id: accountName
          type:
            - string
          description: |
            The Azure Data Lake Store account to execute
            filesystem operations on.
        - id: path
          type:
            - string
          description: |
            The Data Lake Store path (starting with '/') of the
            file or directory on which to set the ACL.
        - id: aclspec
          type:
            - string
          description: |
            The ACL spec included in ACL creation operations in
            the format '[default:]user|group|other::r|-w|-x|-'
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<HttpOperationResponse<void>>
    package: azure-arm-datalake-store
  - uid: azure-arm-datalake-store.FileSystem.setFileExpiry
    name: 'setFileExpiry(string, string, string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Sets or removes the expiration time on the specified file. This operation
      can only be executed against files. Folders are not supported.
    syntax:
      content: >-
        function setFileExpiry(accountName: string, path: string, expiryOption:
        string, options?: Object)
      parameters:
        - id: accountName
          type:
            - string
          description: |
            The Azure Data Lake Store account to execute
            filesystem operations on.
        - id: path
          type:
            - string
          description: |
            The Data Lake Store path (starting with '/') of the
            file on which to set or remove the expiration time.
        - id: expiryOption
          type:
            - string
          description: >
            Indicates the type of expiration to use for the

            file: 1. NeverExpire: ExpireTime is ignored. 2. RelativeToNow:
            ExpireTime is

            an integer in milliseconds representing the expiration date relative
            to when

            file expiration is updated. 3. RelativeToCreationDate: ExpireTime is
            an

            integer in milliseconds representing the expiration date relative to
            file

            creation. 4. Absolute: ExpireTime is an integer in milliseconds, as
            a Unix

            timestamp relative to 1/1/1970 00:00:00. Possible values include:

            'NeverExpire', 'RelativeToNow', 'RelativeToCreationDate', 'Absolute'
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<void>
    package: azure-arm-datalake-store
  - uid: azure-arm-datalake-store.FileSystem.setFileExpiry_2
    name: 'setFileExpiry(string, string, string, Object, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Sets or removes the expiration time on the specified file. This operation
      can only be executed against files. Folders are not supported.
    syntax:
      content: >-
        function setFileExpiry(accountName: string, path: string, expiryOption:
        string, options: Object, callback: ServiceCallback<void>)
      parameters:
        - id: accountName
          type:
            - string
          description: ''
        - id: path
          type:
            - string
          description: ''
        - id: expiryOption
          type:
            - string
          description: ''
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: azure-arm-datalake-store
  - uid: azure-arm-datalake-store.FileSystem.setFileExpiry_1
    name: 'setFileExpiry(string, string, string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Sets or removes the expiration time on the specified file. This operation
      can only be executed against files. Folders are not supported.
    syntax:
      content: >-
        function setFileExpiry(accountName: string, path: string, expiryOption:
        string, callback: ServiceCallback<void>)
      parameters:
        - id: accountName
          type:
            - string
          description: ''
        - id: path
          type:
            - string
          description: ''
        - id: expiryOption
          type:
            - string
          description: ''
        - id: callback
          type:
            - ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: azure-arm-datalake-store
  - uid: azure-arm-datalake-store.FileSystem.setFileExpiryWithHttpOperationResponse
    name: 'setFileExpiryWithHttpOperationResponse(string, string, string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Sets or removes the expiration time on the specified file. This operation
      can only be executed against files. Folders are not supported.
    syntax:
      content: >-
        function setFileExpiryWithHttpOperationResponse(accountName: string,
        path: string, expiryOption: string, options?: Object)
      parameters:
        - id: accountName
          type:
            - string
          description: |
            The Azure Data Lake Store account to execute
            filesystem operations on.
        - id: path
          type:
            - string
          description: |
            The Data Lake Store path (starting with '/') of the
            file on which to set or remove the expiration time.
        - id: expiryOption
          type:
            - string
          description: >
            Indicates the type of expiration to use for the

            file: 1. NeverExpire: ExpireTime is ignored. 2. RelativeToNow:
            ExpireTime is

            an integer in milliseconds representing the expiration date relative
            to when

            file expiration is updated. 3. RelativeToCreationDate: ExpireTime is
            an

            integer in milliseconds representing the expiration date relative to
            file

            creation. 4. Absolute: ExpireTime is an integer in milliseconds, as
            a Unix

            timestamp relative to 1/1/1970 00:00:00. Possible values include:

            'NeverExpire', 'RelativeToNow', 'RelativeToCreationDate', 'Absolute'
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<HttpOperationResponse<void>>
    package: azure-arm-datalake-store
  - uid: azure-arm-datalake-store.FileSystem.setOwner
    name: 'setOwner(string, string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Sets the owner of a file or directory.
    syntax:
      content: 'function setOwner(accountName: string, path: string, options?: Object)'
      parameters:
        - id: accountName
          type:
            - string
          description: |
            The Azure Data Lake Store account to execute
            filesystem operations on.
        - id: path
          type:
            - string
          description: |
            The Data Lake Store path (starting with '/') of the
            file or directory for which to set the owner.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<void>
    package: azure-arm-datalake-store
  - uid: azure-arm-datalake-store.FileSystem.setOwner_2
    name: 'setOwner(string, string, Object, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Sets the owner of a file or directory.
    syntax:
      content: >-
        function setOwner(accountName: string, path: string, options: Object,
        callback: ServiceCallback<void>)
      parameters:
        - id: accountName
          type:
            - string
          description: ''
        - id: path
          type:
            - string
          description: ''
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: azure-arm-datalake-store
  - uid: azure-arm-datalake-store.FileSystem.setOwner_1
    name: 'setOwner(string, string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Sets the owner of a file or directory.
    syntax:
      content: >-
        function setOwner(accountName: string, path: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: accountName
          type:
            - string
          description: ''
        - id: path
          type:
            - string
          description: ''
        - id: callback
          type:
            - ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: azure-arm-datalake-store
  - uid: azure-arm-datalake-store.FileSystem.setOwnerWithHttpOperationResponse
    name: 'setOwnerWithHttpOperationResponse(string, string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Sets the owner of a file or directory.
    syntax:
      content: >-
        function setOwnerWithHttpOperationResponse(accountName: string, path:
        string, options?: Object)
      parameters:
        - id: accountName
          type:
            - string
          description: |
            The Azure Data Lake Store account to execute
            filesystem operations on.
        - id: path
          type:
            - string
          description: |
            The Data Lake Store path (starting with '/') of the
            file or directory for which to set the owner.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<HttpOperationResponse<void>>
    package: azure-arm-datalake-store
  - uid: azure-arm-datalake-store.FileSystem.setPermission
    name: 'setPermission(string, string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Sets the permission of the file or folder.
    syntax:
      content: >-
        function setPermission(accountName: string, path: string, options?:
        Object)
      parameters:
        - id: accountName
          type:
            - string
          description: |
            The Azure Data Lake Store account to execute
            filesystem operations on.
        - id: path
          type:
            - string
          description: |
            The Data Lake Store path (starting with '/') of the
            file or directory for which to set the permission.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<void>
    package: azure-arm-datalake-store
  - uid: azure-arm-datalake-store.FileSystem.setPermission_2
    name: 'setPermission(string, string, Object, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Sets the permission of the file or folder.
    syntax:
      content: >-
        function setPermission(accountName: string, path: string, options:
        Object, callback: ServiceCallback<void>)
      parameters:
        - id: accountName
          type:
            - string
          description: ''
        - id: path
          type:
            - string
          description: ''
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: azure-arm-datalake-store
  - uid: azure-arm-datalake-store.FileSystem.setPermission_1
    name: 'setPermission(string, string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Sets the permission of the file or folder.
    syntax:
      content: >-
        function setPermission(accountName: string, path: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: accountName
          type:
            - string
          description: ''
        - id: path
          type:
            - string
          description: ''
        - id: callback
          type:
            - ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: azure-arm-datalake-store
  - uid: azure-arm-datalake-store.FileSystem.setPermissionWithHttpOperationResponse
    name: 'setPermissionWithHttpOperationResponse(string, string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Sets the permission of the file or folder.
    syntax:
      content: >-
        function setPermissionWithHttpOperationResponse(accountName: string,
        path: string, options?: Object)
      parameters:
        - id: accountName
          type:
            - string
          description: |
            The Azure Data Lake Store account to execute
            filesystem operations on.
        - id: path
          type:
            - string
          description: |
            The Data Lake Store path (starting with '/') of the
            file or directory for which to set the permission.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<HttpOperationResponse<void>>
    package: azure-arm-datalake-store
references:
  - uid: Promise<azure-arm-datalake-store.FileOperationResult>
    name: FileOperationResult>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: FileOperationResult
        fullName: FileOperationResult
        uid: azure-arm-datalake-store.FileOperationResult
      - name: '>'
        fullName: '>'
  - uid: ServiceCallback<azure-arm-datalake-store.FileOperationResult>
    name: FileOperationResult>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: FileOperationResult
        fullName: FileOperationResult
        uid: azure-arm-datalake-store.FileOperationResult
      - name: '>'
        fullName: '>'
  - uid: >-
      Promise<HttpOperationResponse<azure-arm-datalake-store.FileOperationResult>>
    name: FileOperationResult>>
    spec.typeScript:
      - name: Promise<HttpOperationResponse<
        fullName: Promise<HttpOperationResponse<
      - name: FileOperationResult
        fullName: FileOperationResult
        uid: azure-arm-datalake-store.FileOperationResult
      - name: '>>'
        fullName: '>>'
  - uid: Promise<azure-arm-datalake-store.AclStatusResult>
    name: AclStatusResult>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: AclStatusResult
        fullName: AclStatusResult
        uid: azure-arm-datalake-store.AclStatusResult
      - name: '>'
        fullName: '>'
  - uid: ServiceCallback<azure-arm-datalake-store.AclStatusResult>
    name: AclStatusResult>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: AclStatusResult
        fullName: AclStatusResult
        uid: azure-arm-datalake-store.AclStatusResult
      - name: '>'
        fullName: '>'
  - uid: Promise<HttpOperationResponse<azure-arm-datalake-store.AclStatusResult>>
    name: AclStatusResult>>
    spec.typeScript:
      - name: Promise<HttpOperationResponse<
        fullName: Promise<HttpOperationResponse<
      - name: AclStatusResult
        fullName: AclStatusResult
        uid: azure-arm-datalake-store.AclStatusResult
      - name: '>>'
        fullName: '>>'
  - uid: Promise<azure-arm-datalake-store.ContentSummaryResult>
    name: ContentSummaryResult>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ContentSummaryResult
        fullName: ContentSummaryResult
        uid: azure-arm-datalake-store.ContentSummaryResult
      - name: '>'
        fullName: '>'
  - uid: ServiceCallback<azure-arm-datalake-store.ContentSummaryResult>
    name: ContentSummaryResult>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: ContentSummaryResult
        fullName: ContentSummaryResult
        uid: azure-arm-datalake-store.ContentSummaryResult
      - name: '>'
        fullName: '>'
  - uid: >-
      Promise<HttpOperationResponse<azure-arm-datalake-store.ContentSummaryResult>>
    name: ContentSummaryResult>>
    spec.typeScript:
      - name: Promise<HttpOperationResponse<
        fullName: Promise<HttpOperationResponse<
      - name: ContentSummaryResult
        fullName: ContentSummaryResult
        uid: azure-arm-datalake-store.ContentSummaryResult
      - name: '>>'
        fullName: '>>'
  - uid: Promise<azure-arm-datalake-store.FileStatusResult>
    name: FileStatusResult>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: FileStatusResult
        fullName: FileStatusResult
        uid: azure-arm-datalake-store.FileStatusResult
      - name: '>'
        fullName: '>'
  - uid: ServiceCallback<azure-arm-datalake-store.FileStatusResult>
    name: FileStatusResult>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: FileStatusResult
        fullName: FileStatusResult
        uid: azure-arm-datalake-store.FileStatusResult
      - name: '>'
        fullName: '>'
  - uid: Promise<HttpOperationResponse<azure-arm-datalake-store.FileStatusResult>>
    name: FileStatusResult>>
    spec.typeScript:
      - name: Promise<HttpOperationResponse<
        fullName: Promise<HttpOperationResponse<
      - name: FileStatusResult
        fullName: FileStatusResult
        uid: azure-arm-datalake-store.FileStatusResult
      - name: '>>'
        fullName: '>>'
  - uid: Promise<azure-arm-datalake-store.FileStatusesResult>
    name: FileStatusesResult>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: FileStatusesResult
        fullName: FileStatusesResult
        uid: azure-arm-datalake-store.FileStatusesResult
      - name: '>'
        fullName: '>'
  - uid: ServiceCallback<azure-arm-datalake-store.FileStatusesResult>
    name: FileStatusesResult>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: FileStatusesResult
        fullName: FileStatusesResult
        uid: azure-arm-datalake-store.FileStatusesResult
      - name: '>'
        fullName: '>'
  - uid: >-
      Promise<HttpOperationResponse<azure-arm-datalake-store.FileStatusesResult>>
    name: FileStatusesResult>>
    spec.typeScript:
      - name: Promise<HttpOperationResponse<
        fullName: Promise<HttpOperationResponse<
      - name: FileStatusesResult
        fullName: FileStatusesResult
        uid: azure-arm-datalake-store.FileStatusesResult
      - name: '>>'
        fullName: '>>'
