### YamlMime:UniversalReference
items:
  - uid: documentdb.DocumentClient
    id: documentdb.DocumentClient
    name: DocumentClient
    summary: "Provides a client-side logical representation of the Azure Cosmos DB database account.\rThis client is used to configure and execute requests in the Azure Cosmos DB database service."
    fullName: documentdb.DocumentClient
    type: Class
    children:
      - 'documentdb.DocumentClient.#ctor'
      - 'documentdb.DocumentClient#getWriteEndpoint'
      - 'documentdb.DocumentClient#getReadEndpoint'
      - 'documentdb.DocumentClient#createDatabase'
      - 'documentdb.DocumentClient#createCollection'
      - 'documentdb.DocumentClient#createDocument'
      - 'documentdb.DocumentClient#createAttachment'
      - 'documentdb.DocumentClient#createUser'
      - 'documentdb.DocumentClient#createPermission'
      - 'documentdb.DocumentClient#createTrigger'
      - 'documentdb.DocumentClient#createUserDefinedFunction'
      - 'documentdb.DocumentClient#createStoredProcedure'
      - 'documentdb.DocumentClient#createAttachmentAndUploadMedia'
      - 'documentdb.DocumentClient#readDatabase'
      - 'documentdb.DocumentClient#readCollection'
      - 'documentdb.DocumentClient#readDocument'
      - 'documentdb.DocumentClient#readAttachment'
      - 'documentdb.DocumentClient#readUser'
      - 'documentdb.DocumentClient#readPermission'
      - 'documentdb.DocumentClient#readTrigger'
      - 'documentdb.DocumentClient#readUserDefinedFunction'
      - 'documentdb.DocumentClient#readStoredProcedure'
      - 'documentdb.DocumentClient#readConflict'
      - 'documentdb.DocumentClient#readDatabases'
      - 'documentdb.DocumentClient#readCollections'
      - 'documentdb.DocumentClient#readDocuments'
      - 'documentdb.DocumentClient#readPartitionKeyRanges'
      - 'documentdb.DocumentClient#readAttachments'
      - 'documentdb.DocumentClient#readUsers'
      - 'documentdb.DocumentClient#readPermissions'
      - 'documentdb.DocumentClient#readTriggers'
      - 'documentdb.DocumentClient#readUserDefinedFunctions'
      - 'documentdb.DocumentClient#readStoredProcedures'
      - 'documentdb.DocumentClient#readConflicts'
      - 'documentdb.DocumentClient#queryDatabases'
      - 'documentdb.DocumentClient#queryCollections'
      - 'documentdb.DocumentClient#queryDocuments'
      - 'documentdb.DocumentClient#queryPartitionKeyRanges'
      - 'documentdb.DocumentClient#queryAttachments'
      - 'documentdb.DocumentClient#queryUsers'
      - 'documentdb.DocumentClient#queryPermissions'
      - 'documentdb.DocumentClient#queryTriggers'
      - 'documentdb.DocumentClient#queryUserDefinedFunctions'
      - 'documentdb.DocumentClient#queryStoredProcedures'
      - 'documentdb.DocumentClient#queryConflicts'
      - 'documentdb.DocumentClient#deleteDatabase'
      - 'documentdb.DocumentClient#deleteCollection'
      - 'documentdb.DocumentClient#deleteDocument'
      - 'documentdb.DocumentClient#deleteAttachment'
      - 'documentdb.DocumentClient#deleteUser'
      - 'documentdb.DocumentClient#deletePermission'
      - 'documentdb.DocumentClient#deleteTrigger'
      - 'documentdb.DocumentClient#deleteUserDefinedFunction'
      - 'documentdb.DocumentClient#deleteStoredProcedure'
      - 'documentdb.DocumentClient#deleteConflict'
      - 'documentdb.DocumentClient#replaceCollection'
      - 'documentdb.DocumentClient#replaceDocument'
      - 'documentdb.DocumentClient#replaceAttachment'
      - 'documentdb.DocumentClient#replaceUser'
      - 'documentdb.DocumentClient#replacePermission'
      - 'documentdb.DocumentClient#replaceTrigger'
      - 'documentdb.DocumentClient#replaceUserDefinedFunction'
      - 'documentdb.DocumentClient#replaceStoredProcedure'
      - 'documentdb.DocumentClient#upsertDocument'
      - 'documentdb.DocumentClient#upsertAttachment'
      - 'documentdb.DocumentClient#upsertUser'
      - 'documentdb.DocumentClient#upsertPermission'
      - 'documentdb.DocumentClient#upsertTrigger'
      - 'documentdb.DocumentClient#upsertUserDefinedFunction'
      - 'documentdb.DocumentClient#upsertStoredProcedure'
      - 'documentdb.DocumentClient#upsertAttachmentAndUploadMedia'
      - 'documentdb.DocumentClient#readMedia'
      - 'documentdb.DocumentClient#updateMedia'
      - 'documentdb.DocumentClient#executeStoredProcedure'
      - 'documentdb.DocumentClient#replaceOffer'
      - 'documentdb.DocumentClient#readOffer'
      - 'documentdb.DocumentClient#readOffers'
      - 'documentdb.DocumentClient#queryOffers'
      - 'documentdb.DocumentClient#getDatabaseAccount'
      - 'documentdb.DocumentClient#getSessionToken'
    langs:
      - js
  - id: 'documentdb.DocumentClient.#ctor'
    uid: 'documentdb.DocumentClient.#ctor'
    parent: documentdb.DocumentClient
    name: 'DocumentClient(urlConnection, auth, connectionPolicy, consistencyLevel)'
    fullName: >-
      documentdb.DocumentClient.DocumentClient(urlConnection, auth,
      connectionPolicy, consistencyLevel)
    summary: "Provides a client-side logical representation of the Azure Cosmos DB database account.\rThis client is used to configure and execute requests in the Azure Cosmos DB database service."
    type: Constructor
    syntax:
      parameters:
        - id: urlConnection
          type:
            - string
          description: The service endpoint to use to create the client.
        - id: auth
          type:
            - object
          description: >-
            An object that is used for authenticating requests and must contains
            one of the options
        - id: auth.masterKey
          type:
            - string
          description: The authorization master key to use to create the client.
          optional: true
        - id: auth.resourceTokens
          type:
            - Object
          description: >-
            An object that contains resources tokens. Keys for the object are
            resource Ids and values are the resource tokens.
          optional: true
        - id: auth.permissionFeed
          type:
            - Array
          description: 'An array of <xref:Permission> objects.'
          optional: true
        - id: connectionPolicy
          type:
            - object
          description: >-
            An instance of <xref:ConnectionPolicy> class. This parameter is
            optional and the default connectionPolicy will be used if omitted.
          optional: true
        - id: consistencyLevel
          type:
            - string
          description: >-
            An optional parameter that represents the consistency level. It can
            take any value from <xref:ConsistencyLevel>.
          optional: true
      content: >-
        new DocumentClient(urlConnection, auth, connectionPolicy,
        consistencyLevel)
    langs:
      - js
  - uid: 'documentdb.DocumentClient#getWriteEndpoint'
    id: 'documentdb.DocumentClient#getWriteEndpoint'
    parent: documentdb.DocumentClient
    name: getWriteEndpoint(callback)
    summary: Gets the curent write endpoint for a geo-replicated database account.
    fullName: documentdb.DocumentClient.getWriteEndpoint(callback)
    type: Function
    syntax:
      parameters:
        - id: callback
          type:
            - function
          description: The callback function which takes endpoint(string) as an argument.
      content: function getWriteEndpoint(callback)
    langs:
      - js
  - uid: 'documentdb.DocumentClient#getReadEndpoint'
    id: 'documentdb.DocumentClient#getReadEndpoint'
    parent: documentdb.DocumentClient
    name: getReadEndpoint(callback)
    summary: Gets the curent read endpoint for a geo-replicated database account.
    fullName: documentdb.DocumentClient.getReadEndpoint(callback)
    type: Function
    syntax:
      parameters:
        - id: callback
          type:
            - function
          description: The callback function which takes endpoint(string) as an argument.
      content: function getReadEndpoint(callback)
    langs:
      - js
  - uid: 'documentdb.DocumentClient#createDatabase'
    id: 'documentdb.DocumentClient#createDatabase'
    parent: documentdb.DocumentClient
    name: 'createDatabase(body, options, callback)'
    summary: "Send a request for creating a database.\r<p>\r A database manages users, permissions and a set of collections.  <br>\r Each Azure Cosmos DB Database Account is able to support multiple independent named databases, with the database being the logical container for data. <br>\r Each Database consists of one or more collections, each of which in turn contain one or more documents. Since databases are an an administrative resource, the Service Master Key will be required in order to access and successfully complete any action using the User APIs. <br>\r</p>"
    fullName: 'documentdb.DocumentClient.createDatabase(body, options, callback)'
    type: Function
    syntax:
      parameters:
        - id: body
          type:
            - Object
          description: A json object that represents The database to be created.
        - id: body.id
          type:
            - string
          description: The id of the database.
        - id: options
          type:
            - documentdb.RequestOptions
          description: The request options.
          optional: true
        - id: callback
          type:
            - documentdb.RequestCallback
          description: The callback for the request.
      content: 'function createDatabase(body, options, callback)'
    langs:
      - js
  - uid: 'documentdb.DocumentClient#createCollection'
    id: 'documentdb.DocumentClient#createCollection'
    parent: documentdb.DocumentClient
    name: 'createCollection(databaseLink, body, options, callback)'
    summary: "Creates a collection.\r<p>\rA collection is a named logical container for documents. <br>\rA database may contain zero or more named collections and each collection consists of zero or more JSON documents. <br>\rBeing schema-free, the documents in a collection do not need to share the same structure or fields. <br>\rSince collections are application resources, they can be authorized using either the master key or resource keys. <br>\r</p>"
    fullName: >-
      documentdb.DocumentClient.createCollection(databaseLink, body, options,
      callback)
    type: Function
    syntax:
      parameters:
        - id: databaseLink
          type:
            - string
          description: The self-link of the database.
        - id: body
          type:
            - object
          description: Represents the body of the collection.
        - id: body.id
          type:
            - string
          description: The id of the collection.
        - id: body.indexingPolicy
          type:
            - documentdb.IndexingPolicy
          description: The indexing policy associated with the collection.
        - id: body.defaultTtl
          type:
            - number
          description: The default time to live in seconds for documents in a collection.
        - id: options
          type:
            - documentdb.RequestOptions
          description: The request options.
          optional: true
        - id: callback
          type:
            - documentdb.RequestCallback
          description: The callback for the request.
      content: 'function createCollection(databaseLink, body, options, callback)'
    langs:
      - js
  - uid: 'documentdb.DocumentClient#createDocument'
    id: 'documentdb.DocumentClient#createDocument'
    parent: documentdb.DocumentClient
    name: 'createDocument(documentsFeedOrDatabaseLink, body, options, callback)'
    summary: "Create a document.\r<p>\rThere is no set schema for JSON documents. They may contain any number of custom properties as well as an optional list of attachments. <br>\rA Document is an application resource and can be authorized using the master key or resource keys\r</p>"
    fullName: >-
      documentdb.DocumentClient.createDocument(documentsFeedOrDatabaseLink,
      body, options, callback)
    type: Function
    syntax:
      parameters:
        - id: documentsFeedOrDatabaseLink
          type:
            - string
          description: The collection link or database link if using a partition resolver
        - id: body
          type:
            - object
          description: >-
            Represents the body of the document. Can contain any number of user
            defined properties.
        - id: body.id
          type:
            - string
          description: 'The id of the document, MUST be unique for each document.'
          optional: true
        - id: body.ttl
          type:
            - number
          description: The time to live in seconds of the document.
        - id: options
          type:
            - documentdb.RequestOptions
          description: The request options.
          optional: true
        - id: options.disableAutomaticIdGeneration
          type:
            - boolean
          description: >-
            Disables the automatic id generation. If id is missing in the body
            and this option is true, an error will be returned.
          optional: true
        - id: callback
          type:
            - documentdb.RequestCallback
          description: The callback for the request.
      content: >-
        function createDocument(documentsFeedOrDatabaseLink, body, options,
        callback)
    langs:
      - js
  - uid: 'documentdb.DocumentClient#createAttachment'
    id: 'documentdb.DocumentClient#createAttachment'
    parent: documentdb.DocumentClient
    name: 'createAttachment(documentLink, body, options, callback)'
    summary: "Create an attachment for the document object.\r<p>\rEach document may contain zero or more attachments. Attachments can be of any MIME type - text, image, binary data. <br>\rThese are stored externally in Azure Blob storage. Attachments are automatically deleted when the parent document is deleted.\r</P>"
    fullName: >-
      documentdb.DocumentClient.createAttachment(documentLink, body, options,
      callback)
    type: Function
    syntax:
      parameters:
        - id: documentLink
          type:
            - string
          description: The self-link of the document.
        - id: body
          type:
            - Object
          description: >-
            The metadata the defines the attachment media like media,
            contentType. It can include any other properties as part of the
            metedata.
        - id: body.contentType
          type:
            - string
          description: The MIME contentType of the attachment.
        - id: body.media
          type:
            - string
          description: Media link associated with the attachment content.
        - id: options
          type:
            - documentdb.RequestOptions
          description: The request options.
        - id: callback
          type:
            - documentdb.RequestCallback
          description: The callback for the request.
      content: 'function createAttachment(documentLink, body, options, callback)'
    langs:
      - js
  - uid: 'documentdb.DocumentClient#createUser'
    id: 'documentdb.DocumentClient#createUser'
    parent: documentdb.DocumentClient
    name: 'createUser(databaseLink, body, options, callback)'
    summary: Create a database user.
    fullName: >-
      documentdb.DocumentClient.createUser(databaseLink, body, options,
      callback)
    type: Function
    syntax:
      parameters:
        - id: databaseLink
          type:
            - string
          description: The self-link of the database.
        - id: body
          type:
            - object
          description: Represents the body of the user.
        - id: body.id
          type:
            - string
          description: The id of the user.
        - id: options
          type:
            - documentdb.RequestOptions
          description: The request options.
          optional: true
        - id: callback
          type:
            - documentdb.RequestCallback
          description: The callback for the request.
      content: 'function createUser(databaseLink, body, options, callback)'
    langs:
      - js
  - uid: 'documentdb.DocumentClient#createPermission'
    id: 'documentdb.DocumentClient#createPermission'
    parent: documentdb.DocumentClient
    name: 'createPermission(userLink, body, options, callback)'
    summary: "Create a permission.\r<p> A permission represents a per-User Permission to access a specific resource e.g. Document or Collection.  </p>"
    fullName: >-
      documentdb.DocumentClient.createPermission(userLink, body, options,
      callback)
    type: Function
    syntax:
      parameters:
        - id: userLink
          type:
            - string
          description: The self-link of the user.
        - id: body
          type:
            - object
          description: Represents the body of the permission.
        - id: body.id
          type:
            - string
          description: The id of the permission
        - id: body.permissionMode
          type:
            - string
          description: >-
            The mode of the permission, must be a value of
            <xref:documentdb.PermissionMode>
        - id: body.resource
          type:
            - string
          description: The link of the resource that the permission will be applied to.
        - id: options
          type:
            - documentdb.RequestOptions
          description: The request options.
          optional: true
        - id: callback
          type:
            - documentdb.RequestCallback
          description: The callback for the request.
      content: 'function createPermission(userLink, body, options, callback)'
    langs:
      - js
  - uid: 'documentdb.DocumentClient#createTrigger'
    id: 'documentdb.DocumentClient#createTrigger'
    parent: documentdb.DocumentClient
    name: 'createTrigger(collectionLink, trigger, options, callback)'
    summary: "Create a trigger.\r<p>\rAzure Cosmos DB supports pre and post triggers defined in JavaScript to be executed on creates, updates and deletes. <br>\rFor additional details, refer to the server-side JavaScript API documentation.\r</p>"
    fullName: >-
      documentdb.DocumentClient.createTrigger(collectionLink, trigger, options,
      callback)
    type: Function
    syntax:
      parameters:
        - id: collectionLink
          type:
            - string
          description: The self-link of the collection.
        - id: trigger
          type:
            - object
          description: Represents the body of the trigger.
        - id: trigger.id
          type:
            - string
          description: The id of the trigger.
        - id: trigger.triggerType
          type:
            - string
          description: >-
            The type of the trigger, should be one of the values of
            <xref:documentdb.TriggerType>.
        - id: trigger.triggerOperation
          type:
            - string
          description: >-
            The trigger operation, should be one of the values of
            <xref:documentdb.TriggerOperation>.
        - id: trigger.serverScript
          type:
            - function
          description: 'The body of the trigger, it can be passed as stringified too.'
        - id: options
          type:
            - documentdb.RequestOptions
          description: The request options.
          optional: true
        - id: callback
          type:
            - documentdb.RequestCallback
          description: The callback for the request.
      content: 'function createTrigger(collectionLink, trigger, options, callback)'
    langs:
      - js
  - uid: 'documentdb.DocumentClient#createUserDefinedFunction'
    id: 'documentdb.DocumentClient#createUserDefinedFunction'
    parent: documentdb.DocumentClient
    name: 'createUserDefinedFunction(collectionLink, udf, options, callback)'
    summary: "Create a UserDefinedFunction.\r<p>\rAzure Cosmos DB supports JavaScript UDFs which can be used inside queries, stored procedures and triggers. <br>\rFor additional details, refer to the server-side JavaScript API documentation.\r</p>"
    fullName: >-
      documentdb.DocumentClient.createUserDefinedFunction(collectionLink, udf,
      options, callback)
    type: Function
    syntax:
      parameters:
        - id: collectionLink
          type:
            - string
          description: The self-link of the collection.
        - id: udf
          type:
            - object
          description: Represents the body of the userDefinedFunction.
        - id: udf.id
          type:
            - string
          description: The id of the udf.
        - id: udf.userDefinedFunctionType
          type:
            - string
          description: >-
            The type of the udf, it should be one of the values of
            <xref:documentdb.UserDefinedFunctionType>
        - id: udf.serverScript
          type:
            - function
          description: 'Represents the body of the udf, it can be passed as stringified too.'
        - id: options
          type:
            - documentdb.RequestOptions
          description: The request options.
          optional: true
        - id: callback
          type:
            - documentdb.RequestCallback
          description: The callback for the request.
      content: >-
        function createUserDefinedFunction(collectionLink, udf, options,
        callback)
    langs:
      - js
  - uid: 'documentdb.DocumentClient#createStoredProcedure'
    id: 'documentdb.DocumentClient#createStoredProcedure'
    parent: documentdb.DocumentClient
    name: 'createStoredProcedure(collectionLink, sproc, options, callback)'
    summary: "Create a StoredProcedure.\r<p>\rAzure Cosmos DB allows stored procedures to be executed in the storage tier, directly against a document collection. The script <br>\rgets executed under ACID transactions on the primary storage partition of the specified collection. For additional details, <br>\rrefer to the server-side JavaScript API documentation.\r</p>"
    fullName: >-
      documentdb.DocumentClient.createStoredProcedure(collectionLink, sproc,
      options, callback)
    type: Function
    syntax:
      parameters:
        - id: collectionLink
          type:
            - string
          description: The self-link of the collection.
        - id: sproc
          type:
            - object
          description: Represents the body of the stored procedure.
        - id: sproc.id
          type:
            - string
          description: The id of the stored procedure.
        - id: sproc.serverScript
          type:
            - function
          description: >-
            The body of the stored procedure, it can be passed as stringified
            too.
        - id: options
          type:
            - documentdb.RequestOptions
          description: The request options.
          optional: true
        - id: callback
          type:
            - documentdb.RequestCallback
          description: The callback for the request.
      content: 'function createStoredProcedure(collectionLink, sproc, options, callback)'
    langs:
      - js
  - uid: 'documentdb.DocumentClient#createAttachmentAndUploadMedia'
    id: 'documentdb.DocumentClient#createAttachmentAndUploadMedia'
    parent: documentdb.DocumentClient
    name: >-
      createAttachmentAndUploadMedia(documentLink, readableStream, options,
      callback)
    summary: Create an attachment for the document object.
    fullName: >-
      documentdb.DocumentClient.createAttachmentAndUploadMedia(documentLink,
      readableStream, options, callback)
    type: Function
    syntax:
      parameters:
        - id: documentLink
          type:
            - string
          description: The self-link of the document.
        - id: readableStream
          type:
            - documentdb.stream.Readable
          description: >-
            the stream that represents the media itself that needs to be
            uploaded.
        - id: options
          type:
            - documentdb.MediaOptions
          description: The request options.
          optional: true
        - id: callback
          type:
            - documentdb.RequestCallback
          description: The callback for the request.
      content: >-
        function createAttachmentAndUploadMedia(documentLink, readableStream,
        options, callback)
    langs:
      - js
  - uid: 'documentdb.DocumentClient#readDatabase'
    id: 'documentdb.DocumentClient#readDatabase'
    parent: documentdb.DocumentClient
    name: 'readDatabase(databaseLink, options, callback)'
    summary: Reads a database.
    fullName: 'documentdb.DocumentClient.readDatabase(databaseLink, options, callback)'
    type: Function
    syntax:
      parameters:
        - id: databaseLink
          type:
            - string
          description: The self-link of the database.
        - id: options
          type:
            - documentdb.RequestOptions
          description: The request options.
          optional: true
        - id: callback
          type:
            - documentdb.RequestCallback
          description: The callback for the request.
      content: 'function readDatabase(databaseLink, options, callback)'
    langs:
      - js
  - uid: 'documentdb.DocumentClient#readCollection'
    id: 'documentdb.DocumentClient#readCollection'
    parent: documentdb.DocumentClient
    name: 'readCollection(collectionLink, options, callback)'
    summary: Reads a collection.
    fullName: >-
      documentdb.DocumentClient.readCollection(collectionLink, options,
      callback)
    type: Function
    syntax:
      parameters:
        - id: collectionLink
          type:
            - string
          description: The self-link of the collection.
        - id: options
          type:
            - documentdb.RequestOptions
          description: The request options.
          optional: true
        - id: callback
          type:
            - documentdb.RequestCallback
          description: The callback for the request.
      content: 'function readCollection(collectionLink, options, callback)'
    langs:
      - js
  - uid: 'documentdb.DocumentClient#readDocument'
    id: 'documentdb.DocumentClient#readDocument'
    parent: documentdb.DocumentClient
    name: 'readDocument(documentLink, options, callback)'
    summary: Reads a document.
    fullName: 'documentdb.DocumentClient.readDocument(documentLink, options, callback)'
    type: Function
    syntax:
      parameters:
        - id: documentLink
          type:
            - string
          description: The self-link of the document.
        - id: options
          type:
            - documentdb.RequestOptions
          description: The request options.
          optional: true
        - id: callback
          type:
            - documentdb.RequestCallback
          description: The callback for the request.
      content: 'function readDocument(documentLink, options, callback)'
    langs:
      - js
  - uid: 'documentdb.DocumentClient#readAttachment'
    id: 'documentdb.DocumentClient#readAttachment'
    parent: documentdb.DocumentClient
    name: 'readAttachment(attachmentLink, options, callback)'
    summary: Reads an Attachment object.
    fullName: >-
      documentdb.DocumentClient.readAttachment(attachmentLink, options,
      callback)
    type: Function
    syntax:
      parameters:
        - id: attachmentLink
          type:
            - string
          description: The self-link of the attachment.
        - id: options
          type:
            - documentdb.RequestOptions
          description: The request options.
          optional: true
        - id: callback
          type:
            - documentdb.RequestCallback
          description: The callback for the request.
      content: 'function readAttachment(attachmentLink, options, callback)'
    langs:
      - js
  - uid: 'documentdb.DocumentClient#readUser'
    id: 'documentdb.DocumentClient#readUser'
    parent: documentdb.DocumentClient
    name: 'readUser(userLink, options, callback)'
    summary: Reads a user.
    fullName: 'documentdb.DocumentClient.readUser(userLink, options, callback)'
    type: Function
    syntax:
      parameters:
        - id: userLink
          type:
            - string
          description: The self-link of the user.
        - id: options
          type:
            - documentdb.RequestOptions
          description: The request options.
          optional: true
        - id: callback
          type:
            - documentdb.RequestCallback
          description: The callback for the request.
      content: 'function readUser(userLink, options, callback)'
    langs:
      - js
  - uid: 'documentdb.DocumentClient#readPermission'
    id: 'documentdb.DocumentClient#readPermission'
    parent: documentdb.DocumentClient
    name: 'readPermission(permissionLink, options, callback)'
    summary: Reads a permission.
    fullName: >-
      documentdb.DocumentClient.readPermission(permissionLink, options,
      callback)
    type: Function
    syntax:
      parameters:
        - id: permissionLink
          type:
            - string
          description: The self-link of the permission.
        - id: options
          type:
            - documentdb.RequestOptions
          description: The request options.
          optional: true
        - id: callback
          type:
            - documentdb.RequestCallback
          description: The callback for the request.
      content: 'function readPermission(permissionLink, options, callback)'
    langs:
      - js
  - uid: 'documentdb.DocumentClient#readTrigger'
    id: 'documentdb.DocumentClient#readTrigger'
    parent: documentdb.DocumentClient
    name: 'readTrigger(triggerLink, options, callback)'
    summary: Reads a trigger object.
    fullName: 'documentdb.DocumentClient.readTrigger(triggerLink, options, callback)'
    type: Function
    syntax:
      parameters:
        - id: triggerLink
          type:
            - string
          description: The self-link of the trigger.
        - id: options
          type:
            - documentdb.RequestOptions
          description: The request options.
          optional: true
        - id: callback
          type:
            - documentdb.RequestCallback
          description: The callback for the request.
      content: 'function readTrigger(triggerLink, options, callback)'
    langs:
      - js
  - uid: 'documentdb.DocumentClient#readUserDefinedFunction'
    id: 'documentdb.DocumentClient#readUserDefinedFunction'
    parent: documentdb.DocumentClient
    name: 'readUserDefinedFunction(udfLink, options, callback)'
    summary: Reads a udf object.
    fullName: >-
      documentdb.DocumentClient.readUserDefinedFunction(udfLink, options,
      callback)
    type: Function
    syntax:
      parameters:
        - id: udfLink
          type:
            - string
          description: The self-link of the user defined function.
        - id: options
          type:
            - documentdb.RequestOptions
          description: The request options.
          optional: true
        - id: callback
          type:
            - documentdb.RequestCallback
          description: The callback for the request.
      content: 'function readUserDefinedFunction(udfLink, options, callback)'
    langs:
      - js
  - uid: 'documentdb.DocumentClient#readStoredProcedure'
    id: 'documentdb.DocumentClient#readStoredProcedure'
    parent: documentdb.DocumentClient
    name: 'readStoredProcedure(sprocLink, options, callback)'
    summary: Reads a StoredProcedure object.
    fullName: >-
      documentdb.DocumentClient.readStoredProcedure(sprocLink, options,
      callback)
    type: Function
    syntax:
      parameters:
        - id: sprocLink
          type:
            - string
          description: The self-link of the stored procedure.
        - id: options
          type:
            - documentdb.RequestOptions
          description: The request options.
          optional: true
        - id: callback
          type:
            - documentdb.RequestCallback
          description: The callback for the request.
      content: 'function readStoredProcedure(sprocLink, options, callback)'
    langs:
      - js
  - uid: 'documentdb.DocumentClient#readConflict'
    id: 'documentdb.DocumentClient#readConflict'
    parent: documentdb.DocumentClient
    name: 'readConflict(conflictLink, options, callback)'
    summary: Reads a conflict.
    fullName: 'documentdb.DocumentClient.readConflict(conflictLink, options, callback)'
    type: Function
    syntax:
      parameters:
        - id: conflictLink
          type:
            - string
          description: The self-link of the conflict.
        - id: options
          type:
            - documentdb.RequestOptions
          description: The request options.
          optional: true
        - id: callback
          type:
            - documentdb.RequestCallback
          description: The callback for the request.
      content: 'function readConflict(conflictLink, options, callback)'
    langs:
      - js
  - uid: 'documentdb.DocumentClient#readDatabases'
    id: 'documentdb.DocumentClient#readDatabases'
    parent: documentdb.DocumentClient
    name: readDatabases(options)
    summary: Lists all databases.
    fullName: documentdb.DocumentClient.readDatabases(options)
    type: Function
    syntax:
      parameters:
        - id: options
          type:
            - documentdb.FeedOptions
          description: The feed options.
          optional: true
      return:
        type:
          - documentdb.QueryIterator
        description: '- An instance of queryIterator to handle reading feed.'
      content: function readDatabases(options)
    langs:
      - js
  - uid: 'documentdb.DocumentClient#readCollections'
    id: 'documentdb.DocumentClient#readCollections'
    parent: documentdb.DocumentClient
    name: 'readCollections(databaseLink, options)'
    summary: Get all collections in this database.
    fullName: 'documentdb.DocumentClient.readCollections(databaseLink, options)'
    type: Function
    syntax:
      parameters:
        - id: databaseLink
          type:
            - string
          description: The self-link of the database.
        - id: options
          type:
            - documentdb.FeedOptions
          description: The feed options.
          optional: true
      return:
        type:
          - documentdb.QueryIterator
        description: '- An instance of queryIterator to handle reading feed.'
      content: 'function readCollections(databaseLink, options)'
    langs:
      - js
  - uid: 'documentdb.DocumentClient#readDocuments'
    id: 'documentdb.DocumentClient#readDocuments'
    parent: documentdb.DocumentClient
    name: 'readDocuments(collectionLink, options)'
    summary: Get all documents in this collection.
    fullName: 'documentdb.DocumentClient.readDocuments(collectionLink, options)'
    type: Function
    syntax:
      parameters:
        - id: collectionLink
          type:
            - string
          description: The self-link of the collection.
        - id: options
          type:
            - documentdb.FeedOptions
          description: The feed options.
          optional: true
      return:
        type:
          - documentdb.QueryIterator
        description: '- An instance of queryIterator to handle reading feed.'
      content: 'function readDocuments(collectionLink, options)'
    langs:
      - js
  - uid: 'documentdb.DocumentClient#readPartitionKeyRanges'
    id: 'documentdb.DocumentClient#readPartitionKeyRanges'
    parent: documentdb.DocumentClient
    name: 'readPartitionKeyRanges(collectionLink, options)'
    summary: Get all Partition key Ranges in this collection.
    fullName: 'documentdb.DocumentClient.readPartitionKeyRanges(collectionLink, options)'
    type: Function
    syntax:
      parameters:
        - id: collectionLink
          type:
            - string
          description: The self-link of the collection.
        - id: options
          type:
            - documentdb.FeedOptions
          description: The feed options.
          optional: true
      return:
        type:
          - documentdb.QueryIterator
        description: '- An instance of queryIterator to handle reading feed.'
      content: 'function readPartitionKeyRanges(collectionLink, options)'
    langs:
      - js
  - uid: 'documentdb.DocumentClient#readAttachments'
    id: 'documentdb.DocumentClient#readAttachments'
    parent: documentdb.DocumentClient
    name: 'readAttachments(documentLink, options)'
    summary: Get all attachments for this document.
    fullName: 'documentdb.DocumentClient.readAttachments(documentLink, options)'
    type: Function
    syntax:
      parameters:
        - id: documentLink
          type:
            - string
          description: The self-link of the document.
        - id: options
          type:
            - documentdb.FeedOptions
          description: The feed options.
          optional: true
      return:
        type:
          - documentdb.QueryIterator
        description: '- An instance of queryIterator to handle reading feed.'
      content: 'function readAttachments(documentLink, options)'
    langs:
      - js
  - uid: 'documentdb.DocumentClient#readUsers'
    id: 'documentdb.DocumentClient#readUsers'
    parent: documentdb.DocumentClient
    name: 'readUsers(databaseLink, feedOptions)'
    summary: Get all users in this database.
    fullName: 'documentdb.DocumentClient.readUsers(databaseLink, feedOptions)'
    type: Function
    syntax:
      parameters:
        - id: databaseLink
          type:
            - string
          description: The self-link of the database.
        - id: feedOptions
          type:
            - documentdb.FeedOptions
          description: The feed options.
          optional: true
      return:
        type:
          - documentdb.QueryIterator
        description: '- An instance of queryIterator to handle reading feed.'
      content: 'function readUsers(databaseLink, feedOptions)'
    langs:
      - js
  - uid: 'documentdb.DocumentClient#readPermissions'
    id: 'documentdb.DocumentClient#readPermissions'
    parent: documentdb.DocumentClient
    name: 'readPermissions(userLink, feedOptions)'
    summary: Get all permissions for this user.
    fullName: 'documentdb.DocumentClient.readPermissions(userLink, feedOptions)'
    type: Function
    syntax:
      parameters:
        - id: userLink
          type:
            - string
          description: The self-link of the user.
        - id: feedOptions
          type:
            - documentdb.FeedOptions
          description: The feed options.
          optional: true
      return:
        type:
          - documentdb.QueryIterator
        description: '- An instance of queryIterator to handle reading feed.'
      content: 'function readPermissions(userLink, feedOptions)'
    langs:
      - js
  - uid: 'documentdb.DocumentClient#readTriggers'
    id: 'documentdb.DocumentClient#readTriggers'
    parent: documentdb.DocumentClient
    name: 'readTriggers(collectionLink, options)'
    summary: Get all triggers in this collection.
    fullName: 'documentdb.DocumentClient.readTriggers(collectionLink, options)'
    type: Function
    syntax:
      parameters:
        - id: collectionLink
          type:
            - string
          description: The self-link of the collection.
        - id: options
          type:
            - documentdb.FeedOptions
          description: The feed options.
          optional: true
      return:
        type:
          - documentdb.QueryIterator
        description: '- An instance of queryIterator to handle reading feed.'
      content: 'function readTriggers(collectionLink, options)'
    langs:
      - js
  - uid: 'documentdb.DocumentClient#readUserDefinedFunctions'
    id: 'documentdb.DocumentClient#readUserDefinedFunctions'
    parent: documentdb.DocumentClient
    name: 'readUserDefinedFunctions(collectionLink, options)'
    summary: Get all UserDefinedFunctions in this collection.
    fullName: >-
      documentdb.DocumentClient.readUserDefinedFunctions(collectionLink,
      options)
    type: Function
    syntax:
      parameters:
        - id: collectionLink
          type:
            - string
          description: The self-link of the collection.
        - id: options
          type:
            - documentdb.FeedOptions
          description: The feed options.
          optional: true
      return:
        type:
          - documentdb.QueryIterator
        description: '- An instance of queryIterator to handle reading feed.'
      content: 'function readUserDefinedFunctions(collectionLink, options)'
    langs:
      - js
  - uid: 'documentdb.DocumentClient#readStoredProcedures'
    id: 'documentdb.DocumentClient#readStoredProcedures'
    parent: documentdb.DocumentClient
    name: 'readStoredProcedures(collectionLink, options)'
    summary: Get all StoredProcedures in this collection.
    fullName: 'documentdb.DocumentClient.readStoredProcedures(collectionLink, options)'
    type: Function
    syntax:
      parameters:
        - id: collectionLink
          type:
            - string
          description: The self-link of the collection.
        - id: options
          type:
            - documentdb.FeedOptions
          description: The feed options.
          optional: true
      return:
        type:
          - documentdb.QueryIterator
        description: '- An instance of queryIterator to handle reading feed.'
      content: 'function readStoredProcedures(collectionLink, options)'
    langs:
      - js
  - uid: 'documentdb.DocumentClient#readConflicts'
    id: 'documentdb.DocumentClient#readConflicts'
    parent: documentdb.DocumentClient
    name: 'readConflicts(collectionLink, options)'
    summary: Get all conflicts in this collection.
    fullName: 'documentdb.DocumentClient.readConflicts(collectionLink, options)'
    type: Function
    syntax:
      parameters:
        - id: collectionLink
          type:
            - string
          description: The self-link of the collection.
        - id: options
          type:
            - documentdb.FeedOptions
          description: The feed options.
          optional: true
      return:
        type:
          - documentdb.QueryIterator
        description: '- An instance of QueryIterator to handle reading feed.'
      content: 'function readConflicts(collectionLink, options)'
    langs:
      - js
  - uid: 'documentdb.DocumentClient#queryDatabases'
    id: 'documentdb.DocumentClient#queryDatabases'
    parent: documentdb.DocumentClient
    name: 'queryDatabases(query, options)'
    summary: Lists all databases that satisfy a query.
    fullName: 'documentdb.DocumentClient.queryDatabases(query, options)'
    type: Function
    syntax:
      parameters:
        - id: query
          type:
            - documentdb.SqlQuerySpec
            - string
          description: A SQL query.
        - id: options
          type:
            - documentdb.FeedOptions
          description: The feed options.
          optional: true
      return:
        type:
          - documentdb.QueryIterator
        description: '- An instance of QueryIterator to handle reading feed.'
      content: 'function queryDatabases(query, options)'
    langs:
      - js
  - uid: 'documentdb.DocumentClient#queryCollections'
    id: 'documentdb.DocumentClient#queryCollections'
    parent: documentdb.DocumentClient
    name: 'queryCollections(databaseLink, query, options)'
    summary: Query the collections for the database.
    fullName: 'documentdb.DocumentClient.queryCollections(databaseLink, query, options)'
    type: Function
    syntax:
      parameters:
        - id: databaseLink
          type:
            - string
          description: The self-link of the database.
        - id: query
          type:
            - documentdb.SqlQuerySpec
            - string
          description: A SQL query.
        - id: options
          type:
            - documentdb.FeedOptions
          description: Represents the feed options.
          optional: true
      return:
        type:
          - documentdb.QueryIterator
        description: '- An instance of queryIterator to handle reading feed.'
      content: 'function queryCollections(databaseLink, query, options)'
    langs:
      - js
  - uid: 'documentdb.DocumentClient#queryDocuments'
    id: 'documentdb.DocumentClient#queryDocuments'
    parent: documentdb.DocumentClient
    name: 'queryDocuments(documentsFeedOrDatabaseLink, query, options)'
    summary: Query the documents for the collection.
    fullName: >-
      documentdb.DocumentClient.queryDocuments(documentsFeedOrDatabaseLink,
      query, options)
    type: Function
    syntax:
      parameters:
        - id: documentsFeedOrDatabaseLink
          type:
            - string
          description: The collection link or database link if using a partition resolver
        - id: query
          type:
            - documentdb.SqlQuerySpec
            - string
          description: A SQL query.
        - id: options
          type:
            - documentdb.FeedOptions
          description: Represents the feed options.
          optional: true
        - id: options.partitionKey
          type:
            - object
          description: Optional partition key to be used with the partition resolver
          optional: true
      return:
        type:
          - documentdb.QueryIterator
        description: '- An instance of queryIterator to handle reading feed.'
      content: 'function queryDocuments(documentsFeedOrDatabaseLink, query, options)'
    langs:
      - js
  - uid: 'documentdb.DocumentClient#queryPartitionKeyRanges'
    id: 'documentdb.DocumentClient#queryPartitionKeyRanges'
    parent: documentdb.DocumentClient
    name: 'queryPartitionKeyRanges(databaseLink, query, options)'
    summary: Query the partition key ranges
    fullName: >-
      documentdb.DocumentClient.queryPartitionKeyRanges(databaseLink, query,
      options)
    type: Function
    syntax:
      parameters:
        - id: databaseLink
          type:
            - string
          description: The self-link of the database.
        - id: query
          type:
            - documentdb.SqlQuerySpec
            - string
          description: A SQL query.
        - id: options
          type:
            - documentdb.FeedOptions
          description: Represents the feed options.
          optional: true
      return:
        type:
          - documentdb.QueryIterator
        description: '- An instance of queryIterator to handle reading feed.'
      content: 'function queryPartitionKeyRanges(databaseLink, query, options)'
    langs:
      - js
  - uid: 'documentdb.DocumentClient#queryAttachments'
    id: 'documentdb.DocumentClient#queryAttachments'
    parent: documentdb.DocumentClient
    name: 'queryAttachments(documentLink, query, options)'
    summary: Query the attachments for the document.
    fullName: 'documentdb.DocumentClient.queryAttachments(documentLink, query, options)'
    type: Function
    syntax:
      parameters:
        - id: documentLink
          type:
            - string
          description: The self-link of the document.
        - id: query
          type:
            - documentdb.SqlQuerySpec
            - string
          description: A SQL query.
        - id: options
          type:
            - documentdb.FeedOptions
          description: Represents the feed options.
          optional: true
      return:
        type:
          - documentdb.QueryIterator
        description: '- An instance of queryIterator to handle reading feed.'
      content: 'function queryAttachments(documentLink, query, options)'
    langs:
      - js
  - uid: 'documentdb.DocumentClient#queryUsers'
    id: 'documentdb.DocumentClient#queryUsers'
    parent: documentdb.DocumentClient
    name: 'queryUsers(databaseLink, query, options)'
    summary: Query the users for the database.
    fullName: 'documentdb.DocumentClient.queryUsers(databaseLink, query, options)'
    type: Function
    syntax:
      parameters:
        - id: databaseLink
          type:
            - string
          description: The self-link of the database.
        - id: query
          type:
            - documentdb.SqlQuerySpec
            - string
          description: A SQL query.
        - id: options
          type:
            - documentdb.FeedOptions
          description: Represents the feed options.
          optional: true
      return:
        type:
          - documentdb.QueryIterator
        description: '- An instance of queryIterator to handle reading feed.'
      content: 'function queryUsers(databaseLink, query, options)'
    langs:
      - js
  - uid: 'documentdb.DocumentClient#queryPermissions'
    id: 'documentdb.DocumentClient#queryPermissions'
    parent: documentdb.DocumentClient
    name: 'queryPermissions(userLink, query, options)'
    summary: Query the permission for the user.
    fullName: 'documentdb.DocumentClient.queryPermissions(userLink, query, options)'
    type: Function
    syntax:
      parameters:
        - id: userLink
          type:
            - string
          description: The self-link of the user.
        - id: query
          type:
            - documentdb.SqlQuerySpec
            - string
          description: A SQL query.
        - id: options
          type:
            - documentdb.FeedOptions
          description: Represents the feed options.
          optional: true
      return:
        type:
          - documentdb.QueryIterator
        description: '- An instance of queryIterator to handle reading feed.'
      content: 'function queryPermissions(userLink, query, options)'
    langs:
      - js
  - uid: 'documentdb.DocumentClient#queryTriggers'
    id: 'documentdb.DocumentClient#queryTriggers'
    parent: documentdb.DocumentClient
    name: 'queryTriggers(collectionLink, query, options)'
    summary: Query the triggers for the collection.
    fullName: 'documentdb.DocumentClient.queryTriggers(collectionLink, query, options)'
    type: Function
    syntax:
      parameters:
        - id: collectionLink
          type:
            - string
          description: The self-link of the collection.
        - id: query
          type:
            - documentdb.SqlQuerySpec
            - string
          description: A SQL query.
        - id: options
          type:
            - documentdb.FeedOptions
          description: Represents the feed options.
          optional: true
      return:
        type:
          - documentdb.QueryIterator
        description: '- An instance of queryIterator to handle reading feed.'
      content: 'function queryTriggers(collectionLink, query, options)'
    langs:
      - js
  - uid: 'documentdb.DocumentClient#queryUserDefinedFunctions'
    id: 'documentdb.DocumentClient#queryUserDefinedFunctions'
    parent: documentdb.DocumentClient
    name: 'queryUserDefinedFunctions(collectionLink, query, options)'
    summary: Query the user defined functions for the collection.
    fullName: >-
      documentdb.DocumentClient.queryUserDefinedFunctions(collectionLink, query,
      options)
    type: Function
    syntax:
      parameters:
        - id: collectionLink
          type:
            - string
          description: The self-link of the collection.
        - id: query
          type:
            - documentdb.SqlQuerySpec
            - string
          description: A SQL query.
        - id: options
          type:
            - documentdb.FeedOptions
          description: Represents the feed options.
          optional: true
      return:
        type:
          - documentdb.QueryIterator
        description: '- An instance of queryIterator to handle reading feed.'
      content: 'function queryUserDefinedFunctions(collectionLink, query, options)'
    langs:
      - js
  - uid: 'documentdb.DocumentClient#queryStoredProcedures'
    id: 'documentdb.DocumentClient#queryStoredProcedures'
    parent: documentdb.DocumentClient
    name: 'queryStoredProcedures(collectionLink, query, options)'
    summary: Query the storedProcedures for the collection.
    fullName: >-
      documentdb.DocumentClient.queryStoredProcedures(collectionLink, query,
      options)
    type: Function
    syntax:
      parameters:
        - id: collectionLink
          type:
            - string
          description: The self-link of the collection.
        - id: query
          type:
            - documentdb.SqlQuerySpec
            - string
          description: A SQL query.
        - id: options
          type:
            - documentdb.FeedOptions
          description: Represents the feed options.
          optional: true
      return:
        type:
          - documentdb.QueryIterator
        description: '- An instance of queryIterator to handle reading feed.'
      content: 'function queryStoredProcedures(collectionLink, query, options)'
    langs:
      - js
  - uid: 'documentdb.DocumentClient#queryConflicts'
    id: 'documentdb.DocumentClient#queryConflicts'
    parent: documentdb.DocumentClient
    name: 'queryConflicts(collectionLink, query, options)'
    summary: Query the conflicts for the collection.
    fullName: 'documentdb.DocumentClient.queryConflicts(collectionLink, query, options)'
    type: Function
    syntax:
      parameters:
        - id: collectionLink
          type:
            - string
          description: The self-link of the collection.
        - id: query
          type:
            - documentdb.SqlQuerySpec
            - string
          description: A SQL query.
        - id: options
          type:
            - documentdb.FeedOptions
          description: Represents the feed options.
          optional: true
      return:
        type:
          - documentdb.QueryIterator
        description: '- An instance of queryIterator to handle reading feed.'
      content: 'function queryConflicts(collectionLink, query, options)'
    langs:
      - js
  - uid: 'documentdb.DocumentClient#deleteDatabase'
    id: 'documentdb.DocumentClient#deleteDatabase'
    parent: documentdb.DocumentClient
    name: 'deleteDatabase(databaseLink, options, callback)'
    summary: Delete the database object.
    fullName: 'documentdb.DocumentClient.deleteDatabase(databaseLink, options, callback)'
    type: Function
    syntax:
      parameters:
        - id: databaseLink
          type:
            - string
          description: The self-link of the database.
        - id: options
          type:
            - documentdb.RequestOptions
          description: The request options.
          optional: true
        - id: callback
          type:
            - documentdb.RequestCallback
          description: The callback for the request.
      content: 'function deleteDatabase(databaseLink, options, callback)'
    langs:
      - js
  - uid: 'documentdb.DocumentClient#deleteCollection'
    id: 'documentdb.DocumentClient#deleteCollection'
    parent: documentdb.DocumentClient
    name: 'deleteCollection(collectionLink, options, callback)'
    summary: Delete the collection object.
    fullName: >-
      documentdb.DocumentClient.deleteCollection(collectionLink, options,
      callback)
    type: Function
    syntax:
      parameters:
        - id: collectionLink
          type:
            - string
          description: The self-link of the collection.
        - id: options
          type:
            - documentdb.RequestOptions
          description: The request options.
          optional: true
        - id: callback
          type:
            - documentdb.RequestCallback
          description: The callback for the request.
      content: 'function deleteCollection(collectionLink, options, callback)'
    langs:
      - js
  - uid: 'documentdb.DocumentClient#deleteDocument'
    id: 'documentdb.DocumentClient#deleteDocument'
    parent: documentdb.DocumentClient
    name: 'deleteDocument(documentLink, options, callback)'
    summary: Delete the document object.
    fullName: 'documentdb.DocumentClient.deleteDocument(documentLink, options, callback)'
    type: Function
    syntax:
      parameters:
        - id: documentLink
          type:
            - string
          description: The self-link of the document.
        - id: options
          type:
            - documentdb.RequestOptions
          description: The request options.
          optional: true
        - id: callback
          type:
            - documentdb.RequestCallback
          description: The callback for the request.
      content: 'function deleteDocument(documentLink, options, callback)'
    langs:
      - js
  - uid: 'documentdb.DocumentClient#deleteAttachment'
    id: 'documentdb.DocumentClient#deleteAttachment'
    parent: documentdb.DocumentClient
    name: 'deleteAttachment(attachmentLink, options, callback)'
    summary: Delete the attachment object.
    fullName: >-
      documentdb.DocumentClient.deleteAttachment(attachmentLink, options,
      callback)
    type: Function
    syntax:
      parameters:
        - id: attachmentLink
          type:
            - string
          description: The self-link of the attachment.
        - id: options
          type:
            - documentdb.RequestOptions
          description: The request options.
          optional: true
        - id: callback
          type:
            - documentdb.RequestCallback
          description: The callback for the request.
      content: 'function deleteAttachment(attachmentLink, options, callback)'
    langs:
      - js
  - uid: 'documentdb.DocumentClient#deleteUser'
    id: 'documentdb.DocumentClient#deleteUser'
    parent: documentdb.DocumentClient
    name: 'deleteUser(userLink, options, callback)'
    summary: Delete the user object.
    fullName: 'documentdb.DocumentClient.deleteUser(userLink, options, callback)'
    type: Function
    syntax:
      parameters:
        - id: userLink
          type:
            - string
          description: The self-link of the user.
        - id: options
          type:
            - documentdb.RequestOptions
          description: The request options.
          optional: true
        - id: callback
          type:
            - documentdb.RequestCallback
          description: The callback for the request.
      content: 'function deleteUser(userLink, options, callback)'
    langs:
      - js
  - uid: 'documentdb.DocumentClient#deletePermission'
    id: 'documentdb.DocumentClient#deletePermission'
    parent: documentdb.DocumentClient
    name: 'deletePermission(permissionLink, options, callback)'
    summary: Delete the permission object.
    fullName: >-
      documentdb.DocumentClient.deletePermission(permissionLink, options,
      callback)
    type: Function
    syntax:
      parameters:
        - id: permissionLink
          type:
            - string
          description: The self-link of the permission.
        - id: options
          type:
            - documentdb.RequestOptions
          description: The request options.
          optional: true
        - id: callback
          type:
            - documentdb.RequestCallback
          description: The callback for the request.
      content: 'function deletePermission(permissionLink, options, callback)'
    langs:
      - js
  - uid: 'documentdb.DocumentClient#deleteTrigger'
    id: 'documentdb.DocumentClient#deleteTrigger'
    parent: documentdb.DocumentClient
    name: 'deleteTrigger(triggerLink, options, callback)'
    summary: Delete the trigger object.
    fullName: 'documentdb.DocumentClient.deleteTrigger(triggerLink, options, callback)'
    type: Function
    syntax:
      parameters:
        - id: triggerLink
          type:
            - string
          description: The self-link of the trigger.
        - id: options
          type:
            - documentdb.RequestOptions
          description: The request options.
          optional: true
        - id: callback
          type:
            - documentdb.RequestCallback
          description: The callback for the request.
      content: 'function deleteTrigger(triggerLink, options, callback)'
    langs:
      - js
  - uid: 'documentdb.DocumentClient#deleteUserDefinedFunction'
    id: 'documentdb.DocumentClient#deleteUserDefinedFunction'
    parent: documentdb.DocumentClient
    name: 'deleteUserDefinedFunction(udfLink, options, callback)'
    summary: Delete the UserDefinedFunction object.
    fullName: >-
      documentdb.DocumentClient.deleteUserDefinedFunction(udfLink, options,
      callback)
    type: Function
    syntax:
      parameters:
        - id: udfLink
          type:
            - string
          description: The self-link of the user defined function.
        - id: options
          type:
            - documentdb.RequestOptions
          description: The request options.
          optional: true
        - id: callback
          type:
            - documentdb.RequestCallback
          description: The callback for the request.
      content: 'function deleteUserDefinedFunction(udfLink, options, callback)'
    langs:
      - js
  - uid: 'documentdb.DocumentClient#deleteStoredProcedure'
    id: 'documentdb.DocumentClient#deleteStoredProcedure'
    parent: documentdb.DocumentClient
    name: 'deleteStoredProcedure(sprocLink, options, callback)'
    summary: Delete the StoredProcedure object.
    fullName: >-
      documentdb.DocumentClient.deleteStoredProcedure(sprocLink, options,
      callback)
    type: Function
    syntax:
      parameters:
        - id: sprocLink
          type:
            - string
          description: The self-link of the stored procedure.
        - id: options
          type:
            - documentdb.RequestOptions
          description: The request options.
          optional: true
        - id: callback
          type:
            - documentdb.RequestCallback
          description: The callback for the request.
      content: 'function deleteStoredProcedure(sprocLink, options, callback)'
    langs:
      - js
  - uid: 'documentdb.DocumentClient#deleteConflict'
    id: 'documentdb.DocumentClient#deleteConflict'
    parent: documentdb.DocumentClient
    name: 'deleteConflict(conflictLink, options, callback)'
    summary: Delete the conflict object.
    fullName: 'documentdb.DocumentClient.deleteConflict(conflictLink, options, callback)'
    type: Function
    syntax:
      parameters:
        - id: conflictLink
          type:
            - string
          description: The self-link of the conflict.
        - id: options
          type:
            - documentdb.RequestOptions
          description: The request options.
          optional: true
        - id: callback
          type:
            - documentdb.RequestCallback
          description: The callback for the request.
      content: 'function deleteConflict(conflictLink, options, callback)'
    langs:
      - js
  - uid: 'documentdb.DocumentClient#replaceCollection'
    id: 'documentdb.DocumentClient#replaceCollection'
    parent: documentdb.DocumentClient
    name: 'replaceCollection(collectionLink, collection, options, callback)'
    summary: Replace the document collection.
    fullName: >-
      documentdb.DocumentClient.replaceCollection(collectionLink, collection,
      options, callback)
    type: Function
    syntax:
      parameters:
        - id: collectionLink
          type:
            - string
          description: The self-link of the document collection.
        - id: collection
          type:
            - object
          description: Represent the new document collection body.
        - id: options
          type:
            - documentdb.RequestOptions
          description: The request options.
          optional: true
        - id: callback
          type:
            - documentdb.RequestCallback
          description: The callback for the request.
      content: >-
        function replaceCollection(collectionLink, collection, options,
        callback)
    langs:
      - js
  - uid: 'documentdb.DocumentClient#replaceDocument'
    id: 'documentdb.DocumentClient#replaceDocument'
    parent: documentdb.DocumentClient
    name: 'replaceDocument(documentLink, document, options, callback)'
    summary: Replace the document object.
    fullName: >-
      documentdb.DocumentClient.replaceDocument(documentLink, document, options,
      callback)
    type: Function
    syntax:
      parameters:
        - id: documentLink
          type:
            - string
          description: The self-link of the document.
        - id: document
          type:
            - object
          description: Represent the new document body.
        - id: options
          type:
            - documentdb.RequestOptions
          description: The request options.
          optional: true
        - id: callback
          type:
            - documentdb.RequestCallback
          description: The callback for the request.
      content: 'function replaceDocument(documentLink, document, options, callback)'
    langs:
      - js
  - uid: 'documentdb.DocumentClient#replaceAttachment'
    id: 'documentdb.DocumentClient#replaceAttachment'
    parent: documentdb.DocumentClient
    name: 'replaceAttachment(attachmentLink, attachment, options, callback)'
    summary: Replace the attachment object.
    fullName: >-
      documentdb.DocumentClient.replaceAttachment(attachmentLink, attachment,
      options, callback)
    type: Function
    syntax:
      parameters:
        - id: attachmentLink
          type:
            - string
          description: The self-link of the attachment.
        - id: attachment
          type:
            - object
          description: Represent the new attachment body.
        - id: options
          type:
            - documentdb.RequestOptions
          description: The request options.
          optional: true
        - id: callback
          type:
            - documentdb.RequestCallback
          description: The callback for the request.
      content: >-
        function replaceAttachment(attachmentLink, attachment, options,
        callback)
    langs:
      - js
  - uid: 'documentdb.DocumentClient#replaceUser'
    id: 'documentdb.DocumentClient#replaceUser'
    parent: documentdb.DocumentClient
    name: 'replaceUser(userLink, user, options, callback)'
    summary: Replace the user object.
    fullName: 'documentdb.DocumentClient.replaceUser(userLink, user, options, callback)'
    type: Function
    syntax:
      parameters:
        - id: userLink
          type:
            - string
          description: The self-link of the user.
        - id: user
          type:
            - object
          description: Represent the new user body.
        - id: options
          type:
            - documentdb.RequestOptions
          description: The request options.
          optional: true
        - id: callback
          type:
            - documentdb.RequestCallback
          description: The callback for the request.
      content: 'function replaceUser(userLink, user, options, callback)'
    langs:
      - js
  - uid: 'documentdb.DocumentClient#replacePermission'
    id: 'documentdb.DocumentClient#replacePermission'
    parent: documentdb.DocumentClient
    name: 'replacePermission(permissionLink, permission, options, callback)'
    summary: Replace the permission object.
    fullName: >-
      documentdb.DocumentClient.replacePermission(permissionLink, permission,
      options, callback)
    type: Function
    syntax:
      parameters:
        - id: permissionLink
          type:
            - string
          description: The self-link of the permission.
        - id: permission
          type:
            - object
          description: Represent the new permission body.
        - id: options
          type:
            - documentdb.RequestOptions
          description: The request options.
          optional: true
        - id: callback
          type:
            - documentdb.RequestCallback
          description: The callback for the request.
      content: >-
        function replacePermission(permissionLink, permission, options,
        callback)
    langs:
      - js
  - uid: 'documentdb.DocumentClient#replaceTrigger'
    id: 'documentdb.DocumentClient#replaceTrigger'
    parent: documentdb.DocumentClient
    name: 'replaceTrigger(triggerLink, trigger, options, callback)'
    summary: Replace the trigger object.
    fullName: >-
      documentdb.DocumentClient.replaceTrigger(triggerLink, trigger, options,
      callback)
    type: Function
    syntax:
      parameters:
        - id: triggerLink
          type:
            - string
          description: The self-link of the trigger.
        - id: trigger
          type:
            - object
          description: Represent the new trigger body.
        - id: options
          type:
            - documentdb.RequestOptions
          description: The request options.
          optional: true
        - id: callback
          type:
            - documentdb.RequestCallback
          description: The callback for the request.
      content: 'function replaceTrigger(triggerLink, trigger, options, callback)'
    langs:
      - js
  - uid: 'documentdb.DocumentClient#replaceUserDefinedFunction'
    id: 'documentdb.DocumentClient#replaceUserDefinedFunction'
    parent: documentdb.DocumentClient
    name: 'replaceUserDefinedFunction(udfLink, udf, options, callback)'
    summary: Replace the UserDefinedFunction object.
    fullName: >-
      documentdb.DocumentClient.replaceUserDefinedFunction(udfLink, udf,
      options, callback)
    type: Function
    syntax:
      parameters:
        - id: udfLink
          type:
            - string
          description: The self-link of the user defined function.
        - id: udf
          type:
            - object
          description: Represent the new udf body.
        - id: options
          type:
            - documentdb.RequestOptions
          description: The request options.
          optional: true
        - id: callback
          type:
            - documentdb.RequestCallback
          description: The callback for the request.
      content: 'function replaceUserDefinedFunction(udfLink, udf, options, callback)'
    langs:
      - js
  - uid: 'documentdb.DocumentClient#replaceStoredProcedure'
    id: 'documentdb.DocumentClient#replaceStoredProcedure'
    parent: documentdb.DocumentClient
    name: 'replaceStoredProcedure(sprocLink, sproc, options, callback)'
    summary: Replace the StoredProcedure object.
    fullName: >-
      documentdb.DocumentClient.replaceStoredProcedure(sprocLink, sproc,
      options, callback)
    type: Function
    syntax:
      parameters:
        - id: sprocLink
          type:
            - string
          description: The self-link of the stored procedure.
        - id: sproc
          type:
            - object
          description: Represent the new sproc body.
        - id: options
          type:
            - documentdb.RequestOptions
          description: The request options.
          optional: true
        - id: callback
          type:
            - documentdb.RequestCallback
          description: The callback for the request.
      content: 'function replaceStoredProcedure(sprocLink, sproc, options, callback)'
    langs:
      - js
  - uid: 'documentdb.DocumentClient#upsertDocument'
    id: 'documentdb.DocumentClient#upsertDocument'
    parent: documentdb.DocumentClient
    name: 'upsertDocument(documentsFeedOrDatabaseLink, body, options, callback)'
    summary: "Upsert a document.\r<p>\rThere is no set schema for JSON documents. They may contain any number of custom properties as well as an optional list of attachments. <br>\rA Document is an application resource and can be authorized using the master key or resource keys\r</p>"
    fullName: >-
      documentdb.DocumentClient.upsertDocument(documentsFeedOrDatabaseLink,
      body, options, callback)
    type: Function
    syntax:
      parameters:
        - id: documentsFeedOrDatabaseLink
          type:
            - string
          description: The collection link or database link if using a partition resolver
        - id: body
          type:
            - object
          description: >-
            Represents the body of the document. Can contain any number of user
            defined properties.
        - id: body.id
          type:
            - string
          description: 'The id of the document, MUST be unique for each document.'
          optional: true
        - id: body.ttl
          type:
            - number
          description: The time to live in seconds of the document.
        - id: options
          type:
            - documentdb.RequestOptions
          description: The request options.
          optional: true
        - id: options.disableAutomaticIdGeneration
          type:
            - boolean
          description: >-
            Disables the automatic id generation. If id is missing in the body
            and this option is true, an error will be returned.
          optional: true
        - id: callback
          type:
            - documentdb.RequestCallback
          description: The callback for the request.
      content: >-
        function upsertDocument(documentsFeedOrDatabaseLink, body, options,
        callback)
    langs:
      - js
  - uid: 'documentdb.DocumentClient#upsertAttachment'
    id: 'documentdb.DocumentClient#upsertAttachment'
    parent: documentdb.DocumentClient
    name: 'upsertAttachment(documentLink, body, options, callback)'
    summary: "Upsert an attachment for the document object.\r<p>\rEach document may contain zero or more attachments. Attachments can be of any MIME type - text, image, binary data. <br>\rThese are stored externally in Azure Blob storage. Attachments are automatically deleted when the parent document is deleted.\r</P>"
    fullName: >-
      documentdb.DocumentClient.upsertAttachment(documentLink, body, options,
      callback)
    type: Function
    syntax:
      parameters:
        - id: documentLink
          type:
            - string
          description: The self-link of the document.
        - id: body
          type:
            - Object
          description: >-
            The metadata the defines the attachment media like media,
            contentType. It can include any other properties as part of the
            metedata.
        - id: body.contentType
          type:
            - string
          description: The MIME contentType of the attachment.
        - id: body.media
          type:
            - string
          description: Media link associated with the attachment content.
        - id: options
          type:
            - documentdb.RequestOptions
          description: The request options.
        - id: callback
          type:
            - documentdb.RequestCallback
          description: The callback for the request.
      content: 'function upsertAttachment(documentLink, body, options, callback)'
    langs:
      - js
  - uid: 'documentdb.DocumentClient#upsertUser'
    id: 'documentdb.DocumentClient#upsertUser'
    parent: documentdb.DocumentClient
    name: 'upsertUser(databaseLink, body, options, callback)'
    summary: Upsert a database user.
    fullName: >-
      documentdb.DocumentClient.upsertUser(databaseLink, body, options,
      callback)
    type: Function
    syntax:
      parameters:
        - id: databaseLink
          type:
            - string
          description: The self-link of the database.
        - id: body
          type:
            - object
          description: Represents the body of the user.
        - id: body.id
          type:
            - string
          description: The id of the user.
        - id: options
          type:
            - documentdb.RequestOptions
          description: The request options.
          optional: true
        - id: callback
          type:
            - documentdb.RequestCallback
          description: The callback for the request.
      content: 'function upsertUser(databaseLink, body, options, callback)'
    langs:
      - js
  - uid: 'documentdb.DocumentClient#upsertPermission'
    id: 'documentdb.DocumentClient#upsertPermission'
    parent: documentdb.DocumentClient
    name: 'upsertPermission(userLink, body, options, callback)'
    summary: "Upsert a permission.\r<p> A permission represents a per-User Permission to access a specific resource e.g. Document or Collection.  </p>"
    fullName: >-
      documentdb.DocumentClient.upsertPermission(userLink, body, options,
      callback)
    type: Function
    syntax:
      parameters:
        - id: userLink
          type:
            - string
          description: The self-link of the user.
        - id: body
          type:
            - object
          description: Represents the body of the permission.
        - id: body.id
          type:
            - string
          description: The id of the permission
        - id: body.permissionMode
          type:
            - string
          description: >-
            The mode of the permission, must be a value of
            <xref:documentdb.PermissionMode>
        - id: body.resource
          type:
            - string
          description: The link of the resource that the permission will be applied to.
        - id: options
          type:
            - documentdb.RequestOptions
          description: The request options.
          optional: true
        - id: callback
          type:
            - documentdb.RequestCallback
          description: The callback for the request.
      content: 'function upsertPermission(userLink, body, options, callback)'
    langs:
      - js
  - uid: 'documentdb.DocumentClient#upsertTrigger'
    id: 'documentdb.DocumentClient#upsertTrigger'
    parent: documentdb.DocumentClient
    name: 'upsertTrigger(collectionLink, trigger, options, callback)'
    summary: "Upsert a trigger.\r<p>\rAzure Cosmos DB supports pre and post triggers defined in JavaScript to be executed on creates, updates and deletes. <br>\rFor additional details, refer to the server-side JavaScript API documentation.\r</p>"
    fullName: >-
      documentdb.DocumentClient.upsertTrigger(collectionLink, trigger, options,
      callback)
    type: Function
    syntax:
      parameters:
        - id: collectionLink
          type:
            - string
          description: The self-link of the collection.
        - id: trigger
          type:
            - object
          description: Represents the body of the trigger.
        - id: trigger.id
          type:
            - string
          description: The id of the trigger.
        - id: trigger.triggerType
          type:
            - string
          description: >-
            The type of the trigger, should be one of the values of
            <xref:documentdb.TriggerType>.
        - id: trigger.triggerOperation
          type:
            - string
          description: >-
            The trigger operation, should be one of the values of
            <xref:documentdb.TriggerOperation>.
        - id: trigger.serverScript
          type:
            - function
          description: 'The body of the trigger, it can be passed as stringified too.'
        - id: options
          type:
            - documentdb.RequestOptions
          description: The request options.
          optional: true
        - id: callback
          type:
            - documentdb.RequestCallback
          description: The callback for the request.
      content: 'function upsertTrigger(collectionLink, trigger, options, callback)'
    langs:
      - js
  - uid: 'documentdb.DocumentClient#upsertUserDefinedFunction'
    id: 'documentdb.DocumentClient#upsertUserDefinedFunction'
    parent: documentdb.DocumentClient
    name: 'upsertUserDefinedFunction(collectionLink, udf, options, callback)'
    summary: "Upsert a UserDefinedFunction.\r<p>\rAzure Cosmos DB supports JavaScript UDFs which can be used inside queries, stored procedures and triggers. <br>\rFor additional details, refer to the server-side JavaScript API documentation.\r</p>"
    fullName: >-
      documentdb.DocumentClient.upsertUserDefinedFunction(collectionLink, udf,
      options, callback)
    type: Function
    syntax:
      parameters:
        - id: collectionLink
          type:
            - string
          description: The self-link of the collection.
        - id: udf
          type:
            - object
          description: Represents the body of the userDefinedFunction.
        - id: udf.id
          type:
            - string
          description: The id of the udf.
        - id: udf.userDefinedFunctionType
          type:
            - string
          description: >-
            The type of the udf, it should be one of the values of
            <xref:documentdb.UserDefinedFunctionType>
        - id: udf.serverScript
          type:
            - function
          description: 'Represents the body of the udf, it can be passed as stringified too.'
        - id: options
          type:
            - documentdb.RequestOptions
          description: The request options.
          optional: true
        - id: callback
          type:
            - documentdb.RequestCallback
          description: The callback for the request.
      content: >-
        function upsertUserDefinedFunction(collectionLink, udf, options,
        callback)
    langs:
      - js
  - uid: 'documentdb.DocumentClient#upsertStoredProcedure'
    id: 'documentdb.DocumentClient#upsertStoredProcedure'
    parent: documentdb.DocumentClient
    name: 'upsertStoredProcedure(collectionLink, sproc, options, callback)'
    summary: "Upsert a StoredProcedure.\r<p>\rAzure Cosmos DB allows stored procedures to be executed in the storage tier, directly against a document collection. The script <br>\rgets executed under ACID transactions on the primary storage partition of the specified collection. For additional details, <br>\rrefer to the server-side JavaScript API documentation.\r</p>"
    fullName: >-
      documentdb.DocumentClient.upsertStoredProcedure(collectionLink, sproc,
      options, callback)
    type: Function
    syntax:
      parameters:
        - id: collectionLink
          type:
            - string
          description: The self-link of the collection.
        - id: sproc
          type:
            - object
          description: Represents the body of the stored procedure.
        - id: sproc.id
          type:
            - string
          description: The id of the stored procedure.
        - id: sproc.serverScript
          type:
            - function
          description: >-
            The body of the stored procedure, it can be passed as stringified
            too.
        - id: options
          type:
            - documentdb.RequestOptions
          description: The request options.
          optional: true
        - id: callback
          type:
            - documentdb.RequestCallback
          description: The callback for the request.
      content: 'function upsertStoredProcedure(collectionLink, sproc, options, callback)'
    langs:
      - js
  - uid: 'documentdb.DocumentClient#upsertAttachmentAndUploadMedia'
    id: 'documentdb.DocumentClient#upsertAttachmentAndUploadMedia'
    parent: documentdb.DocumentClient
    name: >-
      upsertAttachmentAndUploadMedia(documentLink, readableStream, options,
      callback)
    summary: Upsert an attachment for the document object.
    fullName: >-
      documentdb.DocumentClient.upsertAttachmentAndUploadMedia(documentLink,
      readableStream, options, callback)
    type: Function
    syntax:
      parameters:
        - id: documentLink
          type:
            - string
          description: The self-link of the document.
        - id: readableStream
          type:
            - documentdb.stream.Readable
          description: >-
            the stream that represents the media itself that needs to be
            uploaded.
        - id: options
          type:
            - documentdb.MediaOptions
          description: The request options.
          optional: true
        - id: callback
          type:
            - documentdb.RequestCallback
          description: The callback for the request.
      content: >-
        function upsertAttachmentAndUploadMedia(documentLink, readableStream,
        options, callback)
    langs:
      - js
  - uid: 'documentdb.DocumentClient#readMedia'
    id: 'documentdb.DocumentClient#readMedia'
    parent: documentdb.DocumentClient
    name: 'readMedia(mediaLink, callback)'
    summary: Read the media for the attachment object.
    fullName: 'documentdb.DocumentClient.readMedia(mediaLink, callback)'
    type: Function
    syntax:
      parameters:
        - id: mediaLink
          type:
            - string
          description: The media link of the media in the attachment.
        - id: callback
          type:
            - documentdb.RequestCallback
          description: "The callback for the request, the result parameter can be a buffer or a stream\r                                    depending on the value of <xref:documentdb.MediaReadMode>."
      content: 'function readMedia(mediaLink, callback)'
    langs:
      - js
  - uid: 'documentdb.DocumentClient#updateMedia'
    id: 'documentdb.DocumentClient#updateMedia'
    parent: documentdb.DocumentClient
    name: 'updateMedia(mediaLink, readableStream, options, callback)'
    summary: Update media for the attachment
    fullName: >-
      documentdb.DocumentClient.updateMedia(mediaLink, readableStream, options,
      callback)
    type: Function
    syntax:
      parameters:
        - id: mediaLink
          type:
            - string
          description: The media link of the media in the attachment.
        - id: readableStream
          type:
            - documentdb.stream.Readable
          description: >-
            The stream that represents the media itself that needs to be
            uploaded.
        - id: options
          type:
            - documentdb.MediaOptions
          description: options for the media
          optional: true
        - id: callback
          type:
            - documentdb.RequestCallback
          description: The callback for the request.
      content: 'function updateMedia(mediaLink, readableStream, options, callback)'
    langs:
      - js
  - uid: 'documentdb.DocumentClient#executeStoredProcedure'
    id: 'documentdb.DocumentClient#executeStoredProcedure'
    parent: documentdb.DocumentClient
    name: 'executeStoredProcedure(sprocLink, params, options, callback)'
    summary: Execute the StoredProcedure represented by the object with partition key.
    fullName: >-
      documentdb.DocumentClient.executeStoredProcedure(sprocLink, params,
      options, callback)
    type: Function
    syntax:
      parameters:
        - id: sprocLink
          type:
            - string
          description: The self-link of the stored procedure.
        - id: params
          type:
            - Array
          description: represent the parameters of the stored procedure.
          optional: true
        - id: options
          type:
            - Object
          description: partition key
          optional: true
        - id: callback
          type:
            - documentdb.RequestCallback
          description: The callback for the request.
      content: 'function executeStoredProcedure(sprocLink, params, options, callback)'
    langs:
      - js
  - uid: 'documentdb.DocumentClient#replaceOffer'
    id: 'documentdb.DocumentClient#replaceOffer'
    parent: documentdb.DocumentClient
    name: 'replaceOffer(offerLink, offer, callback)'
    summary: Replace the offer object.
    fullName: 'documentdb.DocumentClient.replaceOffer(offerLink, offer, callback)'
    type: Function
    syntax:
      parameters:
        - id: offerLink
          type:
            - string
          description: The self-link of the offer.
        - id: offer
          type:
            - object
          description: Represent the new offer body.
        - id: callback
          type:
            - documentdb.RequestCallback
          description: The callback for the request.
      content: 'function replaceOffer(offerLink, offer, callback)'
    langs:
      - js
  - uid: 'documentdb.DocumentClient#readOffer'
    id: 'documentdb.DocumentClient#readOffer'
    parent: documentdb.DocumentClient
    name: 'readOffer(offerLink, callback)'
    summary: Reads an offer.
    fullName: 'documentdb.DocumentClient.readOffer(offerLink, callback)'
    type: Function
    syntax:
      parameters:
        - id: offerLink
          type:
            - string
          description: The self-link of the offer.
        - id: callback
          type:
            - documentdb.RequestCallback
          description: The callback for the request.
      content: 'function readOffer(offerLink, callback)'
    langs:
      - js
  - uid: 'documentdb.DocumentClient#readOffers'
    id: 'documentdb.DocumentClient#readOffers'
    parent: documentdb.DocumentClient
    name: readOffers(options)
    summary: Lists all offers.
    fullName: documentdb.DocumentClient.readOffers(options)
    type: Function
    syntax:
      parameters:
        - id: options
          type:
            - documentdb.FeedOptions
          description: The feed options.
          optional: true
      return:
        type:
          - documentdb.QueryIterator
        description: '- An instance of queryIterator to handle reading feed.'
      content: function readOffers(options)
    langs:
      - js
  - uid: 'documentdb.DocumentClient#queryOffers'
    id: 'documentdb.DocumentClient#queryOffers'
    parent: documentdb.DocumentClient
    name: 'queryOffers(query, options)'
    summary: Lists all offers that satisfy a query.
    fullName: 'documentdb.DocumentClient.queryOffers(query, options)'
    type: Function
    syntax:
      parameters:
        - id: query
          type:
            - documentdb.SqlQuerySpec
            - string
          description: A SQL query.
        - id: options
          type:
            - documentdb.FeedOptions
          description: The feed options.
          optional: true
      return:
        type:
          - documentdb.QueryIterator
        description: '- An instance of QueryIterator to handle reading feed.'
      content: 'function queryOffers(query, options)'
    langs:
      - js
  - uid: 'documentdb.DocumentClient#getDatabaseAccount'
    id: 'documentdb.DocumentClient#getDatabaseAccount'
    parent: documentdb.DocumentClient
    name: getDatabaseAccount(callback)
    summary: Gets the Database account information.
    fullName: documentdb.DocumentClient.getDatabaseAccount(callback)
    type: Function
    syntax:
      parameters:
        - id: options.urlConnection
          type:
            - string
          description: >-
            The endpoint url whose database account needs to be retrieved. If
            not present, current client's url will be used.
          optional: true
        - id: callback
          type:
            - documentdb.RequestCallback
          description: >-
            The callback for the request. The second parameter of the callback
            will be of type <xref:documentdb.DatabaseAccount>.
      content: function getDatabaseAccount(callback)
    langs:
      - js
  - uid: 'documentdb.DocumentClient#getSessionToken'
    id: 'documentdb.DocumentClient#getSessionToken'
    parent: documentdb.DocumentClient
    name: getSessionToken(collectionLink)
    summary: Gets the SessionToken for a given collectionLink
    fullName: documentdb.DocumentClient.getSessionToken(collectionLink)
    type: Function
    syntax:
      parameters:
        - id: collectionLink
          description: The link of the collection for which the session token is needed
      content: function getSessionToken(collectionLink)
    langs:
      - js
references:
  - uid: documentdb.QueryIterator
    name: QueryIterator
    fullName: documentdb.QueryIterator
    isExternal: false
