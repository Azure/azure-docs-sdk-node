### YamlMime:UniversalReference
items:
  - uid: botbuilder-core.BotContext
    id: botbuilder-core.BotContext
    name: BotContext
    summary: ":package: **botbuilder-core**\r\rContext object containing information cached for a single turn of conversation with a user. This\rwill typically be created by the adapter you're using and then passed to middleware and your\rbots logic.\r\rFor TypeScript developers the `BotContext` is also exposed as an interface which you can derive\rfrom to better describe the actual shape of the context object being passed around.  Middleware\rcan potentially extend the context object with additional members so in order to get intellisense\rfor those added members you'll need to define them on an interface that extends BotContext:\r\r```JavaScript\rinterface MyContext extends BotContext {\r     // Added by UserState middleware.\r     readonly userState: MyUserState;\r\r     // Added by ConversationState middleware.\r     readonly conversationState: MyConversationState;\r}\r\radapter.processRequest(req, res, (context: MyContext) => {\r     const state = context.conversationState;\r});\r```"
    fullName: botbuilder-core.BotContext
    source:
      id: botbuilder-core.BotContext
      path: libraries\botbuilder-core\lib\botContext.js
      startLine: 30
      remote:
        branch: master
        path: libraries\botbuilder-core\lib\botContext.js
        repo: 'https://github.com/Microsoft/botbuilder-js.git'
    type: Class
    children:
      - 'botbuilder-core.BotContext.#ctor'
      - 'botbuilder-core.BotContext#copyTo'
      - 'botbuilder-core.BotContext#adapter'
      - 'botbuilder-core.BotContext#request'
      - 'botbuilder-core.BotContext#responded'
      - 'botbuilder-core.BotContext#get'
      - 'botbuilder-core.BotContext#has'
      - 'botbuilder-core.BotContext#set'
      - 'botbuilder-core.BotContext#sendActivity'
      - 'botbuilder-core.BotContext#updateActivity'
      - 'botbuilder-core.BotContext#deleteActivity'
      - 'botbuilder-core.BotContext#onSendActivity'
      - 'botbuilder-core.BotContext#onUpdateActivity'
      - 'botbuilder-core.BotContext#onDeleteActivity'
      - botbuilder-core.BotContext.getConversationReference
      - botbuilder-core.BotContext.applyConversationReference
    langs:
      - js
  - id: 'botbuilder-core.BotContext.#ctor'
    uid: 'botbuilder-core.BotContext.#ctor'
    parent: botbuilder-core.BotContext
    name: BotContext()
    fullName: botbuilder-core.BotContext.BotContext()
    summary: ''
    type: Constructor
    syntax:
      content: new BotContext()
    langs:
      - js
  - uid: 'botbuilder-core.BotContext#copyTo'
    id: 'botbuilder-core.BotContext#copyTo'
    parent: botbuilder-core.BotContext
    name: copyTo(context)
    summary: "Called when this BotContext instance is passed into the constructor of a new BotContext\rinstance."
    fullName: botbuilder-core.BotContext.copyTo(context)
    type: Function
    syntax:
      parameters:
        - id: context
          description: >-
            The context object to copy private members to. Everything should be
            copied by reference.
      content: function copyTo(context)
    langs:
      - js
  - uid: 'botbuilder-core.BotContext#adapter'
    id: 'botbuilder-core.BotContext#adapter'
    parent: botbuilder-core.BotContext
    name: adapter
    summary: The adapter for this context.
    fullName: botbuilder-core.BotContext.adapter
    type: Member
    syntax:
      content: adapter
    langs:
      - js
  - uid: 'botbuilder-core.BotContext#request'
    id: 'botbuilder-core.BotContext#request'
    parent: botbuilder-core.BotContext
    name: request
    summary: The received activity.
    fullName: botbuilder-core.BotContext.request
    type: Member
    syntax:
      content: request
    langs:
      - js
  - uid: 'botbuilder-core.BotContext#responded'
    id: 'botbuilder-core.BotContext#responded'
    parent: botbuilder-core.BotContext
    name: responded
    summary: >-
      If `true` at least one response has been sent for the current turn of
      conversation.
    fullName: botbuilder-core.BotContext.responded
    type: Member
    syntax:
      content: responded
    langs:
      - js
  - uid: 'botbuilder-core.BotContext#get'
    id: 'botbuilder-core.BotContext#get'
    parent: botbuilder-core.BotContext
    name: 'get(T, key)'
    summary: Gets a value previously cached on the context.
    fullName: 'botbuilder-core.BotContext.get(T, key)'
    type: Function
    syntax:
      parameters:
        - id: T
          description: (Optional) type of value being returned.
        - id: key
          description: The key to lookup in the cache.
      content: 'function get(T, key)'
    langs:
      - js
  - uid: 'botbuilder-core.BotContext#has'
    id: 'botbuilder-core.BotContext#has'
    parent: botbuilder-core.BotContext
    name: has(key)
    summary: >-
      Returns `true` if [set()](#set) has been called for a key. The cached
      value may be `undefined`.
    fullName: botbuilder-core.BotContext.has(key)
    type: Function
    syntax:
      parameters:
        - id: key
          description: The key to lookup in the cache.
      content: function has(key)
    langs:
      - js
  - uid: 'botbuilder-core.BotContext#set'
    id: 'botbuilder-core.BotContext#set'
    parent: botbuilder-core.BotContext
    name: 'set(key, value)'
    summary: Caches a value for the lifetime of the current turn.
    fullName: 'botbuilder-core.BotContext.set(key, value)'
    type: Function
    syntax:
      parameters:
        - id: key
          description: The key of the value being cached.
        - id: value
          description: The value to cache.
      content: 'function set(key, value)'
    langs:
      - js
  - uid: 'botbuilder-core.BotContext#sendActivity'
    id: 'botbuilder-core.BotContext#sendActivity'
    parent: botbuilder-core.BotContext
    name: sendActivity(activityOrText)
    summary: "Sends a set of activities to the user. An array of responses form the server will be\rreturned."
    fullName: botbuilder-core.BotContext.sendActivity(activityOrText)
    type: Function
    syntax:
      parameters:
        - id: activityOrText
          description: >-
            One or more activities or messages to send to the user. If a
            `string` is provided it will be sent to the user as a `message`
            activity.
      content: function sendActivity(activityOrText)
    langs:
      - js
  - uid: 'botbuilder-core.BotContext#updateActivity'
    id: 'botbuilder-core.BotContext#updateActivity'
    parent: botbuilder-core.BotContext
    name: updateActivity(activity)
    summary: Replaces an existing activity.
    fullName: botbuilder-core.BotContext.updateActivity(activity)
    type: Function
    syntax:
      parameters:
        - id: activity
          description: >-
            New replacement activity. The activity should already have it's ID
            information populated.
      content: function updateActivity(activity)
    langs:
      - js
  - uid: 'botbuilder-core.BotContext#deleteActivity'
    id: 'botbuilder-core.BotContext#deleteActivity'
    parent: botbuilder-core.BotContext
    name: deleteActivity(idOrReference)
    summary: Deletes an existing activity.
    fullName: botbuilder-core.BotContext.deleteActivity(idOrReference)
    type: Function
    syntax:
      parameters:
        - id: idOrReference
          description: >-
            ID or conversation of the activity being deleted. If an ID is
            specified the conversation reference information from the current
            request will be used to delete the activity.
      content: function deleteActivity(idOrReference)
    langs:
      - js
  - uid: 'botbuilder-core.BotContext#onSendActivity'
    id: 'botbuilder-core.BotContext#onSendActivity'
    parent: botbuilder-core.BotContext
    name: onSendActivity(handler)
    summary: >-
      Registers a handler to be notified of and potentially intercept the
      sending of activities.
    fullName: botbuilder-core.BotContext.onSendActivity(handler)
    type: Function
    syntax:
      parameters:
        - id: handler
          description: >-
            A function that will be called anytime
            [sendActivity()](#sendactivity) is called. The handler should call
            `next()` to continue sending of the activities.
      content: function onSendActivity(handler)
    langs:
      - js
  - uid: 'botbuilder-core.BotContext#onUpdateActivity'
    id: 'botbuilder-core.BotContext#onUpdateActivity'
    parent: botbuilder-core.BotContext
    name: onUpdateActivity(handler)
    summary: >-
      Registers a handler to be notified of and potentially intercept an
      activity being updated.
    fullName: botbuilder-core.BotContext.onUpdateActivity(handler)
    type: Function
    syntax:
      parameters:
        - id: handler
          description: >-
            A function that will be called anytime
            [updateActivity()](#updateactivity) is called. The handler should
            call `next()` to continue sending of the replacement activity.
      content: function onUpdateActivity(handler)
    langs:
      - js
  - uid: 'botbuilder-core.BotContext#onDeleteActivity'
    id: 'botbuilder-core.BotContext#onDeleteActivity'
    parent: botbuilder-core.BotContext
    name: onDeleteActivity(handler)
    summary: >-
      Registers a handler to be notified of and potentially intercept an
      activity being deleted.
    fullName: botbuilder-core.BotContext.onDeleteActivity(handler)
    type: Function
    syntax:
      parameters:
        - id: handler
          description: >-
            A function that will be called anytime
            [deleteActivity()](#deleteactivity) is called. The handler should
            call `next()` to continue deletion of the activity.
      content: function onDeleteActivity(handler)
    langs:
      - js
  - uid: botbuilder-core.BotContext.getConversationReference
    id: botbuilder-core.BotContext.getConversationReference
    parent: botbuilder-core.BotContext
    name: getConversationReference(activity)
    summary: "Returns the conversation reference for an activity. This can be saved as a plain old JSON\robject and then later used to message the user proactively.\r\r**Usage Example**\r\r```JavaScript\rconst reference = TurnContext.getConversationReference(context.request);\r```"
    fullName: botbuilder-core.BotContext.getConversationReference(activity)
    type: Function
    syntax:
      parameters:
        - id: activity
          description: The activity to copy the conversation reference from
      content: function getConversationReference(activity)
    langs:
      - js
  - uid: botbuilder-core.BotContext.applyConversationReference
    id: botbuilder-core.BotContext.applyConversationReference
    parent: botbuilder-core.BotContext
    name: 'applyConversationReference(activity, reference, isIncoming)'
    summary: "Updates an activity with the delivery information from a conversation reference. Calling\rthis after [getConversationReference()](#getconversationreference) on an incoming activity\rwill properly address the reply to a received activity.\r\r**Usage Example**\r\r```JavaScript\r// Send a typing indicator without calling any handlers\rconst reference = TurnContext.getConversationReference(context.request);\rconst activity = TurnContext.applyConversationReference({ type: 'typing' }, reference);\rreturn context.adapter.sendActivity(activity);\r```"
    fullName: >-
      botbuilder-core.BotContext.applyConversationReference(activity, reference,
      isIncoming)
    type: Function
    syntax:
      parameters:
        - id: activity
          description: Activity to copy delivery information to.
        - id: reference
          description: Conversation reference containing delivery information.
        - id: isIncoming
          description: >-
            (Optional) flag indicating whether the activity is an incoming or
            outgoing activity. Defaults to `false` indicating the activity is
            outgoing.
      content: 'function applyConversationReference(activity, reference, isIncoming)'
    langs:
      - js
