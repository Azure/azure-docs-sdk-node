### YamlMime:TSType
name: ModuleClient
uid: azure-iot-device.ModuleClient
package: azure-iot-device
summary: >
  IoT Hub device client used to connect a device with an Azure IoT hub.

  Users of the SDK should call one of the factory methods,

  [fromConnectionString](xref:azure-iot-device.Client.fromConnectionString)

  or
  [fromSharedAccessSignature](xref:azure-iot-device.Client.fromSharedAccessSignature)

  to create an IoT Hub device client.
fullName: ModuleClient
remarks: ''
isPreview: false
isDeprecated: false
type: class
methods:
  - name: abandon(Message)
    uid: azure-iot-device.ModuleClient.abandon_1
    package: azure-iot-device
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function abandon(message: Message)'
      parameters:
        - id: message
          type: Message
          description: ''
      return:
        type: Promise&lt;MessageAbandoned&gt;
        description: ''
  - name: 'abandon(Message, Callback<MessageAbandoned>)'
    uid: azure-iot-device.ModuleClient.abandon
    package: azure-iot-device
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function abandon(message: Message, abandonCallback:
        Callback<MessageAbandoned>)
      parameters:
        - id: message
          type: Message
          description: ''
        - id: abandonCallback
          type: Callback&lt;MessageAbandoned&gt;
          description: ''
  - name: 'addListener(string | symbol, (args: any[]) => void)'
    uid: azure-iot-device.ModuleClient.addListener
    package: azure-iot-device
    summary: 'Alias for `emitter.on(eventName, listener)`.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function addListener(eventName: string | symbol, listener: (args: any[])
        => void)
      parameters:
        - id: eventName
          type: string | symbol
          description: ''
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: ''
      return:
        type: this
        description: ''
  - name: close()
    uid: azure-iot-device.ModuleClient.close_1
    package: azure-iot-device
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function close()
      return:
        type: Promise&lt;Disconnected&gt;
        description: ''
  - name: close(Callback<Disconnected>)
    uid: azure-iot-device.ModuleClient.close
    package: azure-iot-device
    summary: >
      Closes the transport connection and destroys the client resources.

      *Note: After calling this method the ModuleClient object cannot be
      reused.*
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function close(closeCallback: Callback<Disconnected>)'
      parameters:
        - id: closeCallback
          type: Callback&lt;Disconnected&gt;
          description: ''
  - name: complete(Message)
    uid: azure-iot-device.ModuleClient.complete_1
    package: azure-iot-device
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function complete(message: Message)'
      parameters:
        - id: message
          type: Message
          description: ''
      return:
        type: Promise&lt;MessageCompleted&gt;
        description: ''
  - name: 'complete(Message, Callback<MessageCompleted>)'
    uid: azure-iot-device.ModuleClient.complete
    package: azure-iot-device
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function complete(message: Message, completeCallback:
        Callback<MessageCompleted>)
      parameters:
        - id: message
          type: Message
          description: ''
        - id: completeCallback
          type: Callback&lt;MessageCompleted&gt;
          description: ''
  - name: 'emit(string | symbol, any[])'
    uid: azure-iot-device.ModuleClient.emit
    package: azure-iot-device
    summary: >-
      Synchronously calls each of the listeners registered for the event
      named`eventName`, in the order they were registered, passing the supplied
      arguments

      to each.

      Returns `true` if the event had listeners, `false` otherwise.


      ```js

      const EventEmitter = require('events');

      const myEmitter = new EventEmitter();


      // First listener

      myEmitter.on('event', function firstListener() {
        console.log('Helloooo! first listener');
      });

      // Second listener

      myEmitter.on('event', function secondListener(arg1, arg2) {
        console.log(`event with parameters ${arg1}, ${arg2} in second listener`);
      });

      // Third listener

      myEmitter.on('event', function thirdListener(...args) {
        const parameters = args.join(', ');
        console.log(`event with parameters ${parameters} in third listener`);
      });


      console.log(myEmitter.listeners('event'));


      myEmitter.emit('event', 1, 2, 3, 4, 5);


      // Prints:

      // [

      //   [Function: firstListener],

      //   [Function: secondListener],

      //   [Function: thirdListener]

      // ]

      // Helloooo! first listener

      // event with parameters 1, 2 in second listener

      // event with parameters 1, 2, 3, 4, 5 in third listener

      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function emit(eventName: string | symbol, args: any[])'
      parameters:
        - id: eventName
          type: string | symbol
          description: ''
        - id: args
          type: 'any[]'
          description: ''
      return:
        type: boolean
        description: ''
  - name: eventNames()
    uid: azure-iot-device.ModuleClient.eventNames
    package: azure-iot-device
    summary: |-
      Returns an array listing the events for which the emitter has registered
      listeners. The values in the array are strings or `Symbol`s.
      ```js
      const EventEmitter = require('events');
      const myEE = new EventEmitter();
      myEE.on('foo', () => {});
      myEE.on('bar', () => {});

      const sym = Symbol('symbol');
      myEE.on(sym, () => {});

      console.log(myEE.eventNames());
      // Prints: [ 'foo', 'bar', Symbol(symbol) ]
      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function eventNames()
      return:
        type: Array&lt;string | symbol&gt;
        description: ''
  - name: 'fromAuthenticationProvider(AuthenticationProvider, any)'
    uid: azure-iot-device.ModuleClient.fromAuthenticationProvider
    package: azure-iot-device
    summary: >-
      Creates an IoT Hub module client from the given authentication method and
      using the given transport type.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        static function fromAuthenticationProvider(authenticationProvider:
        AuthenticationProvider, transportCtor: any)
      parameters:
        - id: authenticationProvider
          type: AuthenticationProvider
          description: Object used to obtain the authentication parameters for the IoT hub.
        - id: transportCtor
          type: any
          description: |
            Transport protocol used to connect to IoT hub.
      return:
        type: <xref uid="azure-iot-device.ModuleClient" />
        description: ''
  - name: 'fromConnectionString(string, any)'
    uid: azure-iot-device.ModuleClient.fromConnectionString
    package: azure-iot-device
    summary: >-
      Creates an IoT Hub device client from the given connection string using
      the given transport type.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        static function fromConnectionString(connStr: string, transportCtor:
        any)
      parameters:
        - id: connStr
          type: string
          description: >-
            A connection string which encapsulates "device connect" permissions
            on an IoT hub.
        - id: transportCtor
          type: any
          description: |
            A transport constructor.
      return:
        type: <xref uid="azure-iot-device.ModuleClient" />
        description: ''
  - name: fromEnvironment(any)
    uid: azure-iot-device.ModuleClient.fromEnvironment_1
    package: azure-iot-device
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static function fromEnvironment(transportCtor: any)'
      parameters:
        - id: transportCtor
          type: any
          description: ''
      return:
        type: Promise&lt;<xref uid="azure-iot-device.ModuleClient" />&gt;
        description: ''
  - name: 'fromEnvironment(any, Callback<ModuleClient>)'
    uid: azure-iot-device.ModuleClient.fromEnvironment
    package: azure-iot-device
    summary: >
      Creates an IoT Hub module client by using configuration information from
      the environment.

      If an environment variable called `EdgeHubConnectionString` or
      `IotHubConnectionString` exists, then that value is used and behavior is
      identical

      to calling `fromConnectionString` passing that in. If those environment
      variables do not exist then the following variables MUST be defined:

          - IOTEDGE_WORKLOADURI          URI for iotedged's workload API
          - IOTEDGE_DEVICEID             Device identifier
          - IOTEDGE_MODULEID             Module identifier
          - IOTEDGE_MODULEGENERATIONID   Module generation identifier
          - IOTEDGE_IOTHUBHOSTNAME       IoT Hub host name
          - IOTEDGE_AUTHSCHEME           Authentication scheme to use; must be "sasToken"
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        static function fromEnvironment(transportCtor: any, callback:
        Callback<ModuleClient>)
      parameters:
        - id: transportCtor
          type: any
          description: Transport protocol used to connect to IoT hub.
        - id: callback
          type: Callback&lt;<xref uid="azure-iot-device.ModuleClient" />&gt;
          description: ''
  - name: 'fromSharedAccessSignature(string, any)'
    uid: azure-iot-device.ModuleClient.fromSharedAccessSignature
    package: azure-iot-device
    summary: >-
      Creates an IoT Hub module client from the given shared access signature
      using the given transport type.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        static function fromSharedAccessSignature(sharedAccessSignature: string,
        transportCtor: any)
      parameters:
        - id: sharedAccessSignature
          type: string
          description: |-
            A shared access signature which encapsulates "device
                                             connect" permissions on an IoT hub.
        - id: transportCtor
          type: any
          description: ''
      return:
        type: <xref uid="azure-iot-device.ModuleClient" />
        description: ''
  - name: getMaxListeners()
    uid: azure-iot-device.ModuleClient.getMaxListeners
    package: azure-iot-device
    summary: >-
      Returns the current max listener value for the `EventEmitter` which is
      either

      set by `emitter.setMaxListeners(n)` or defaults to
      <xref:defaultMaxListeners>.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function getMaxListeners()
      return:
        type: number
        description: ''
  - name: getTwin()
    uid: azure-iot-device.ModuleClient.getTwin_1
    package: azure-iot-device
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function getTwin()
      return:
        type: Promise&lt;<xref uid="azure-iot-device.Twin" />&gt;
        description: ''
  - name: getTwin(Callback<Twin>)
    uid: azure-iot-device.ModuleClient.getTwin
    package: azure-iot-device
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getTwin(done: Callback<Twin>)'
      parameters:
        - id: done
          type: Callback&lt;<xref uid="azure-iot-device.Twin" />&gt;
          description: ''
  - name: 'invokeMethod(string, MethodParams)'
    uid: azure-iot-device.ModuleClient.invokeMethod_2
    package: azure-iot-device
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function invokeMethod(deviceId: string, methodParams: MethodParams)'
      parameters:
        - id: deviceId
          type: string
          description: ''
        - id: methodParams
          type: <xref uid="azure-iot-device.MethodParams" />
          description: ''
      return:
        type: Promise&lt;<xref uid="azure-iot-device.MethodResult" />&gt;
        description: ''
  - name: 'invokeMethod(string, MethodParams, Callback<MethodResult>)'
    uid: azure-iot-device.ModuleClient.invokeMethod
    package: azure-iot-device
    summary: >-
      Invokes a method on a downstream device or on another module on the same
      IoTEdge device. Please note that this feature only works when

      the module is being run as part of an IoTEdge device.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function invokeMethod(deviceId: string, methodParams: MethodParams,
        callback: Callback<MethodResult>)
      parameters:
        - id: deviceId
          type: string
          description: target device identifier
        - id: methodParams
          type: <xref uid="azure-iot-device.MethodParams" />
          description: parameters of the direct method call
        - id: callback
          type: Callback&lt;<xref uid="azure-iot-device.MethodResult" />&gt;
          description: ''
  - name: 'invokeMethod(string, string, MethodParams)'
    uid: azure-iot-device.ModuleClient.invokeMethod_3
    package: azure-iot-device
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function invokeMethod(deviceId: string, moduleId: string, methodParams:
        MethodParams)
      parameters:
        - id: deviceId
          type: string
          description: ''
        - id: moduleId
          type: string
          description: ''
        - id: methodParams
          type: <xref uid="azure-iot-device.MethodParams" />
          description: ''
      return:
        type: Promise&lt;<xref uid="azure-iot-device.MethodResult" />&gt;
        description: ''
  - name: 'invokeMethod(string, string, MethodParams, Callback<MethodResult>)'
    uid: azure-iot-device.ModuleClient.invokeMethod_1
    package: azure-iot-device
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function invokeMethod(deviceId: string, moduleId: string, methodParams:
        MethodParams, callback: Callback<MethodResult>)
      parameters:
        - id: deviceId
          type: string
          description: ''
        - id: moduleId
          type: string
          description: ''
        - id: methodParams
          type: <xref uid="azure-iot-device.MethodParams" />
          description: ''
        - id: callback
          type: Callback&lt;<xref uid="azure-iot-device.MethodResult" />&gt;
          description: ''
  - name: listenerCount(string | symbol)
    uid: azure-iot-device.ModuleClient.listenerCount
    package: azure-iot-device
    summary: Returns the number of listeners listening to the event named `eventName`.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function listenerCount(eventName: string | symbol)'
      parameters:
        - id: eventName
          type: string | symbol
          description: |
            The name of the event being listened for
      return:
        type: number
        description: ''
  - name: listeners(string | symbol)
    uid: azure-iot-device.ModuleClient.listeners
    package: azure-iot-device
    summary: |-
      Returns a copy of the array of listeners for the event named `eventName`.
      ```js
      server.on('connection', (stream) => {
        console.log('someone connected!');
      });
      console.log(util.inspect(server.listeners('connection')));
      // Prints: [ [Function] ]
      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function listeners(eventName: string | symbol)'
      parameters:
        - id: eventName
          type: string | symbol
          description: ''
      return:
        type: 'Function[]'
        description: ''
  - name: 'off(string | symbol, (args: any[]) => void)'
    uid: azure-iot-device.ModuleClient.off
    package: azure-iot-device
    summary: Alias for `emitter.removeListener()`.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function off(eventName: string | symbol, listener: (args: any[]) =>
        void)
      parameters:
        - id: eventName
          type: string | symbol
          description: ''
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: ''
      return:
        type: this
        description: ''
  - name: 'on(string | symbol, (args: any[]) => void)'
    uid: azure-iot-device.ModuleClient.on
    package: azure-iot-device
    summary: >-
      Adds the `listener` function to the end of the listeners array for the

      event named `eventName`. No checks are made to see if the `listener` has

      already been added. Multiple calls passing the same combination of
      `eventName`and `listener` will result in the `listener` being added, and
      called, multiple

      times.

      ```js

      server.on('connection', (stream) => {
        console.log('someone connected!');
      });

      ```


      Returns a reference to the `EventEmitter`, so that calls can be chained.


      By default, event listeners are invoked in the order they are added.
      The`emitter.prependListener()` method can be used as an alternative to add
      the

      event listener to the beginning of the listeners array.


      ```js

      const myEE = new EventEmitter();

      myEE.on('foo', () => console.log('a'));

      myEE.prependListener('foo', () => console.log('b'));

      myEE.emit('foo');

      // Prints:

      //   b

      //   a

      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function on(eventName: string | symbol, listener: (args: any[]) => void)'
      parameters:
        - id: eventName
          type: string | symbol
          description: The name of the event.
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: |
            The callback function
      return:
        type: this
        description: ''
  - name: 'once(string | symbol, (args: any[]) => void)'
    uid: azure-iot-device.ModuleClient.once
    package: azure-iot-device
    summary: >-
      Adds a **one-time**`listener` function for the event named `eventName`.
      The

      next time `eventName` is triggered, this listener is removed and then
      invoked.

      ```js

      server.once('connection', (stream) => {
        console.log('Ah, we have our first user!');
      });

      ```


      Returns a reference to the `EventEmitter`, so that calls can be chained.


      By default, event listeners are invoked in the order they are added.
      The`emitter.prependOnceListener()` method can be used as an alternative to
      add the

      event listener to the beginning of the listeners array.


      ```js

      const myEE = new EventEmitter();

      myEE.once('foo', () => console.log('a'));

      myEE.prependOnceListener('foo', () => console.log('b'));

      myEE.emit('foo');

      // Prints:

      //   b

      //   a

      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function once(eventName: string | symbol, listener: (args: any[]) =>
        void)
      parameters:
        - id: eventName
          type: string | symbol
          description: The name of the event.
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: |
            The callback function
      return:
        type: this
        description: ''
  - name: >-
      onMethod(string, DoubleValueCallback<DeviceMethodRequest,
      DeviceMethodResponse>)
    uid: azure-iot-device.ModuleClient.onMethod
    package: azure-iot-device
    summary: Registers a callback for a method named `methodName`.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function onMethod(methodName: string, callback:
        DoubleValueCallback<DeviceMethodRequest, DeviceMethodResponse>)
      parameters:
        - id: methodName
          type: string
          description: Name of the method that will be handled by the callback
        - id: callback
          type: >-
            DoubleValueCallback&lt;<xref
            uid="azure-iot-device.DeviceMethodRequest" />, <xref
            uid="azure-iot-device.DeviceMethodResponse" />&gt;
          description: >
            Function that shall be called whenever a method request for the
            method called `methodName` is received.
  - name: open()
    uid: azure-iot-device.ModuleClient.open_1
    package: azure-iot-device
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function open()
      return:
        type: Promise&lt;Connected&gt;
        description: ''
  - name: open(Callback<Connected>)
    uid: azure-iot-device.ModuleClient.open
    package: azure-iot-device
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function open(openCallback: Callback<Connected>)'
      parameters:
        - id: openCallback
          type: Callback&lt;Connected&gt;
          description: ''
  - name: 'prependListener(string | symbol, (args: any[]) => void)'
    uid: azure-iot-device.ModuleClient.prependListener
    package: azure-iot-device
    summary: >-
      Adds the `listener` function to the _beginning_ of the listeners array for
      the

      event named `eventName`. No checks are made to see if the `listener` has

      already been added. Multiple calls passing the same combination of
      `eventName`and `listener` will result in the `listener` being added, and
      called, multiple

      times.

      ```js

      server.prependListener('connection', (stream) => {
        console.log('someone connected!');
      });

      ```


      Returns a reference to the `EventEmitter`, so that calls can be chained.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function prependListener(eventName: string | symbol, listener: (args:
        any[]) => void)
      parameters:
        - id: eventName
          type: string | symbol
          description: The name of the event.
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: |
            The callback function
      return:
        type: this
        description: ''
  - name: 'prependOnceListener(string | symbol, (args: any[]) => void)'
    uid: azure-iot-device.ModuleClient.prependOnceListener
    package: azure-iot-device
    summary: >-
      Adds a **one-time**`listener` function for the event named `eventName` to
      the_beginning_ of the listeners array. The next time `eventName` is
      triggered, this

      listener is removed, and then invoked.

      ```js

      server.prependOnceListener('connection', (stream) => {
        console.log('Ah, we have our first user!');
      });

      ```


      Returns a reference to the `EventEmitter`, so that calls can be chained.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function prependOnceListener(eventName: string | symbol, listener:
        (args: any[]) => void)
      parameters:
        - id: eventName
          type: string | symbol
          description: The name of the event.
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: |
            The callback function
      return:
        type: this
        description: ''
  - name: rawListeners(string | symbol)
    uid: azure-iot-device.ModuleClient.rawListeners
    package: azure-iot-device
    summary: |-
      Returns a copy of the array of listeners for the event named `eventName`,
      including any wrappers (such as those created by `.once()`).
      ```js
      const emitter = new EventEmitter();
      emitter.once('log', () => console.log('log once'));

      // Returns a new Array with a function `onceWrapper` which has a property
      // `listener` which contains the original listener bound above
      const listeners = emitter.rawListeners('log');
      const logFnWrapper = listeners[0];

      // Logs "log once" to the console and does not unbind the `once` event
      logFnWrapper.listener();

      // Logs "log once" to the console and removes the listener
      logFnWrapper();

      emitter.on('log', () => console.log('log persistently'));
      // Will return a new Array with a single function bound by `.on()` above
      const newListeners = emitter.rawListeners('log');

      // Logs "log persistently" twice
      newListeners[0]();
      emitter.emit('log');
      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function rawListeners(eventName: string | symbol)'
      parameters:
        - id: eventName
          type: string | symbol
          description: ''
      return:
        type: 'Function[]'
        description: ''
  - name: reject(Message)
    uid: azure-iot-device.ModuleClient.reject_1
    package: azure-iot-device
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function reject(message: Message)'
      parameters:
        - id: message
          type: Message
          description: ''
      return:
        type: Promise&lt;MessageRejected&gt;
        description: ''
  - name: 'reject(Message, Callback<MessageRejected>)'
    uid: azure-iot-device.ModuleClient.reject
    package: azure-iot-device
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function reject(message: Message, rejectCallback:
        Callback<MessageRejected>)
      parameters:
        - id: message
          type: Message
          description: ''
        - id: rejectCallback
          type: Callback&lt;MessageRejected&gt;
          description: ''
  - name: removeAllListeners(string | symbol)
    uid: azure-iot-device.ModuleClient.removeAllListeners
    package: azure-iot-device
    summary: |-
      Removes all listeners, or those of the specified `eventName`.
      It is bad practice to remove listeners added elsewhere in the code,
      particularly when the `EventEmitter` instance was created by some other
      component or module (e.g. sockets or file streams).

      Returns a reference to the `EventEmitter`, so that calls can be chained.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function removeAllListeners(event?: string | symbol)'
      parameters:
        - id: event
          type: string | symbol
          description: ''
      return:
        type: this
        description: ''
  - name: 'removeListener(string | symbol, (args: any[]) => void)'
    uid: azure-iot-device.ModuleClient.removeListener
    package: azure-iot-device
    summary: >-
      Removes the specified `listener` from the listener array for the event
      named`eventName`.

      ```js

      const callback = (stream) => {
        console.log('someone connected!');
      };

      server.on('connection', callback);

      // ...

      server.removeListener('connection', callback);

      ```


      `removeListener()` will remove, at most, one instance of a listener from
      the

      listener array. If any single listener has been added multiple times to
      the

      listener array for the specified `eventName`, then `removeListener()` must
      be

      called multiple times to remove each instance.


      Once an event is emitted, all listeners attached to it at the

      time of emitting are called in order. This implies that
      any`removeListener()` or `removeAllListeners()` calls _after_ emitting
      and_before_ the last listener finishes execution will

      not remove them from`emit()` in progress. Subsequent events behave as
      expected.


      ```js

      const myEmitter = new MyEmitter();


      const callbackA = () => {
        console.log('A');
        myEmitter.removeListener('event', callbackB);
      };


      const callbackB = () => {
        console.log('B');
      };


      myEmitter.on('event', callbackA);


      myEmitter.on('event', callbackB);


      // callbackA removes listener callbackB but it will still be called.

      // Internal listener array at time of emit [callbackA, callbackB]

      myEmitter.emit('event');

      // Prints:

      //   A

      //   B


      // callbackB is now removed.

      // Internal listener array [callbackA]

      myEmitter.emit('event');

      // Prints:

      //   A

      ```


      Because listeners are managed using an internal array, calling this will

      change the position indices of any listener registered _after_ the
      listener

      being removed. This will not impact the order in which listeners are
      called,

      but it means that any copies of the listener array as returned by

      the `emitter.listeners()` method will need to be recreated.


      When a single function has been added as a handler multiple times for a
      single

      event (as in the example below), `removeListener()` will remove the most

      recently added instance. In the example the `once('ping')`listener is
      removed:


      ```js

      const ee = new EventEmitter();


      function pong() {
        console.log('pong');
      }


      ee.on('ping', pong);

      ee.once('ping', pong);

      ee.removeListener('ping', pong);


      ee.emit('ping');

      ee.emit('ping');

      ```


      Returns a reference to the `EventEmitter`, so that calls can be chained.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function removeListener(eventName: string | symbol, listener: (args:
        any[]) => void)
      parameters:
        - id: eventName
          type: string | symbol
          description: ''
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: ''
      return:
        type: this
        description: ''
  - name: sendEvent(Message)
    uid: azure-iot-device.ModuleClient.sendEvent_1
    package: azure-iot-device
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function sendEvent(message: Message)'
      parameters:
        - id: message
          type: Message
          description: ''
      return:
        type: Promise&lt;MessageEnqueued&gt;
        description: ''
  - name: 'sendEvent(Message, Callback<MessageEnqueued>)'
    uid: azure-iot-device.ModuleClient.sendEvent
    package: azure-iot-device
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function sendEvent(message: Message, sendEventCallback:
        Callback<MessageEnqueued>)
      parameters:
        - id: message
          type: Message
          description: ''
        - id: sendEventCallback
          type: Callback&lt;MessageEnqueued&gt;
          description: ''
  - name: 'sendEventBatch(Message[])'
    uid: azure-iot-device.ModuleClient.sendEventBatch_1
    package: azure-iot-device
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function sendEventBatch(messages: Message[])'
      parameters:
        - id: messages
          type: 'Message[]'
          description: ''
      return:
        type: Promise&lt;MessageEnqueued&gt;
        description: ''
  - name: 'sendEventBatch(Message[], Callback<MessageEnqueued>)'
    uid: azure-iot-device.ModuleClient.sendEventBatch
    package: azure-iot-device
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function sendEventBatch(messages: Message[], sendEventBatchCallback:
        Callback<MessageEnqueued>)
      parameters:
        - id: messages
          type: 'Message[]'
          description: ''
        - id: sendEventBatchCallback
          type: Callback&lt;MessageEnqueued&gt;
          description: ''
  - name: 'sendOutputEvent(string, Message)'
    uid: azure-iot-device.ModuleClient.sendOutputEvent_1
    package: azure-iot-device
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function sendOutputEvent(outputName: string, message: Message)'
      parameters:
        - id: outputName
          type: string
          description: ''
        - id: message
          type: Message
          description: ''
      return:
        type: Promise&lt;MessageEnqueued&gt;
        description: ''
  - name: 'sendOutputEvent(string, Message, Callback<MessageEnqueued>)'
    uid: azure-iot-device.ModuleClient.sendOutputEvent
    package: azure-iot-device
    summary: Sends an event to the given module output
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function sendOutputEvent(outputName: string, message: Message, callback:
        Callback<MessageEnqueued>)
      parameters:
        - id: outputName
          type: string
          description: Name of the output to send the event to
        - id: message
          type: Message
          description: Message to send to the given output
        - id: callback
          type: Callback&lt;MessageEnqueued&gt;
          description: ''
  - name: 'sendOutputEventBatch(string, Message[])'
    uid: azure-iot-device.ModuleClient.sendOutputEventBatch_1
    package: azure-iot-device
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function sendOutputEventBatch(outputName: string, messages: Message[])'
      parameters:
        - id: outputName
          type: string
          description: ''
        - id: messages
          type: 'Message[]'
          description: ''
      return:
        type: Promise&lt;MessageEnqueued&gt;
        description: ''
  - name: 'sendOutputEventBatch(string, Message[], Callback<MessageEnqueued>)'
    uid: azure-iot-device.ModuleClient.sendOutputEventBatch
    package: azure-iot-device
    summary: Sends an array of events to the given module output
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function sendOutputEventBatch(outputName: string, messages: Message[],
        callback: Callback<MessageEnqueued>)
      parameters:
        - id: outputName
          type: string
          description: Name of the output to send the events to
        - id: messages
          type: 'Message[]'
          description: ''
        - id: callback
          type: Callback&lt;MessageEnqueued&gt;
          description: ''
  - name: setMaxListeners(number)
    uid: azure-iot-device.ModuleClient.setMaxListeners
    package: azure-iot-device
    summary: >-
      By default `EventEmitter`s will print a warning if more than `10`
      listeners are

      added for a particular event. This is a useful default that helps finding

      memory leaks. The `emitter.setMaxListeners()` method allows the limit to
      be

      modified for this specific `EventEmitter` instance. The value can be set
      to`Infinity` (or `0`) to indicate an unlimited number of listeners.

      Returns a reference to the `EventEmitter`, so that calls can be chained.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function setMaxListeners(n: number)'
      parameters:
        - id: 'n'
          type: number
          description: ''
      return:
        type: this
        description: ''
  - name: setOptions(DeviceClientOptions)
    uid: azure-iot-device.ModuleClient.setOptions_1
    package: azure-iot-device
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function setOptions(options: DeviceClientOptions)'
      parameters:
        - id: options
          type: <xref uid="azure-iot-device.DeviceClientOptions" />
          description: ''
      return:
        type: Promise&lt;TransportConfigured&gt;
        description: ''
  - name: 'setOptions(DeviceClientOptions, Callback<TransportConfigured>)'
    uid: azure-iot-device.ModuleClient.setOptions
    package: azure-iot-device
    summary: >-
      Passes options to the `ModuleClient` object that can be used to configure
      the transport.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function setOptions(options: DeviceClientOptions, done:
        Callback<TransportConfigured>)
      parameters:
        - id: options
          type: <xref uid="azure-iot-device.DeviceClientOptions" />
          description: 'A <xref:DeviceClientOptions> object.'
        - id: done
          type: Callback&lt;TransportConfigured&gt;
          description: ''
  - name: setRetryPolicy(RetryPolicy)
    uid: azure-iot-device.ModuleClient.setRetryPolicy
    package: azure-iot-device
    summary: >-
      Sets the retry policy used by the client on all operations. The default is
      [ExponentialBackoffWithJitter](xref:azure-iot-common.ExponentialBackoffWithJitter).
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function setRetryPolicy(policy: RetryPolicy)'
      parameters:
        - id: policy
          type: RetryPolicy
          description: |
            The retry policy that should be used for all future operations.
  - name: setTransportOptions(any)
    uid: azure-iot-device.ModuleClient.setTransportOptions_1
    package: azure-iot-device
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function setTransportOptions(options: any)'
      parameters:
        - id: options
          type: any
          description: ''
      return:
        type: Promise&lt;TransportConfigured&gt;
        description: ''
  - name: 'setTransportOptions(any, Callback<TransportConfigured>)'
    uid: azure-iot-device.ModuleClient.setTransportOptions
    package: azure-iot-device
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function setTransportOptions(options: any, done:
        Callback<TransportConfigured>)
      parameters:
        - id: options
          type: any
          description: ''
        - id: done
          type: Callback&lt;TransportConfigured&gt;
          description: ''
  - name: >-
      updateSharedAccessSignature(string,
      Callback<SharedAccessSignatureUpdated>)
    uid: azure-iot-device.ModuleClient.updateSharedAccessSignature
    package: azure-iot-device
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function updateSharedAccessSignature(sharedAccessSignature: string,
        updateSasCallback?: Callback<SharedAccessSignatureUpdated>)
      parameters:
        - id: sharedAccessSignature
          type: string
          description: ''
        - id: updateSasCallback
          type: Callback&lt;SharedAccessSignatureUpdated&gt;
          description: ''
extends: InternalClient
