### YamlMime:UniversalReference
items:
  - uid: azure
    name: azure
    langs:
      - js
    type: package
    summary: ''
    children:
      - azure.FileTokenStorage
      - azure.FileTokenCache
      - azure.SubscriptionClient
      - azure.Tenants
      - azure.Subscriptions
      - azure.Location list operation response.
      - azure.PollingState
      - azure.UserTokenCredentials
      - azure.MSITokenCredentials
      - azure.MSIAppServiceTokenCredentials
      - azure.DeviceTokenCredentials
      - azure.CognitiveServicesCredentials
      - azure.ApplicationTokenCredentials
      - azure.BaseResource
      - azure.AzureServiceClient
      - azure.AzureEnvironment
      - azure.TestClient
      - azure.PetAP
      - azure.WebResource
      - azure.ServiceClient
      - azure.HttpOperationResponse
      - azure.SystemErrorRetryPolicyFilter
      - azure.ExponentialRetryPolicyFilter
      - azure.TokenCredentials
      - azure.BasicAuthenticationCredentials
      - azure.ApiKeyCredentials
      - azure.ResourceManagementClient
      - azure.Tags
      - azure.Resources
      - azure.ResourceGroups
      - azure.Providers
      - azure.Deployments
      - azure.DeploymentOperations
      - azure.TemplateLink
      - azure.TargetResource
      - azure.TagValue
      - azure.TagsListResult
      - azure.TagDetails
      - azure.TagCount
      - azure.SubResource
      - azure.Sku
      - azure.ResourcesMoveInfo
      - azure.ResourceProviderOperationDisplayProperties
      - azure.ResourceManagementErrorWithDetails
      - azure.ResourceListResult
      - azure.ResourceGroupProperties
      - azure.ResourceGroupPatchable
      - azure.ResourceGroupListResult
      - azure.ResourceGroupFilter
      - azure.ResourceGroupExportResult
      - azure.ResourceGroup
      - azure.Resource
      - azure.ProviderResourceType
      - azure.ProviderListResult
      - azure.Provider
      - azure.Plan
      - azure.ParametersLink
      - azure.Identity
      - azure.HttpMessage
      - azure.GenericResourceFilter
      - azure.GenericResource
      - azure.ExportTemplateRequest
      - azure.DeploymentValidateResult
      - azure.DeploymentPropertiesExtended
      - azure.DeploymentProperties
      - azure.DeploymentOperationsListResult
      - azure.DeploymentOperationProperties
      - azure.DeploymentOperation
      - azure.DeploymentListResult
      - azure.DeploymentExtendedFilter
      - azure.DeploymentExtended
      - azure.DeploymentExportResult
      - azure.Deployment
      - azure.Dependency
      - azure.DebugSetting
      - azure.BasicDependency
      - azure.AliasType
      - azure.AliasPathType
      - azure.SuiteBase
      - azure.authenticateWithUsernamePassword
      - azure.authenticateWithServicePrincipal
      - azure.create
      - azure.setAgent
      - azure.createWithSink
      - azure.createCompositeFilter
      - azure.interimStream
      - azure.serializeObject
      - azure.serialize
      - azure.deserialize
      - azure.urlIsHTTPS
      - azure.objectIsNull
      - azure.encodeUri
      - azure.stripResponse
      - azure.stripRequest
      - azure.isValidUuid
      - azure.objectValues
      - azure.generateUuid
      - azure.homeDir
      - azure.checkRPNotRegisteredError
      - azure.extractSubscriptionUrl
      - azure.registerRP
      - azure.getRegistrationStatus
      - azure.interactive
      - azure.withUsernamePassword
      - azure.withServicePrincipalSecret
      - azure.withAuthFile
      - azure.withAuthFileWithAuthResponse
      - azure.withMSI
      - azure.withAppServiceMSI
  - uid: azure.authenticateWithUsernamePassword
    id: azure.authenticateWithUsernamePassword
    name: 'authenticateWithUsernamePassword(username, password, callback)'
    summary: Authenticate with username and password
    fullName: 'azure.authenticateWithUsernamePassword(username, password, callback)'
    type: Function
    syntax:
      parameters:
        - id: username
          type:
            - string
          description: Username
        - id: password
          type:
            - string
          description: Password
        - id: callback
          type:
            - function
          description: The callback to handle the error and result.
      content: 'function authenticateWithUsernamePassword(username, password, callback)'
    langs:
      - js
  - uid: azure.authenticateWithServicePrincipal
    id: azure.authenticateWithServicePrincipal
    name: 'authenticateWithServicePrincipal(clientId, clientSecret, tenant, callback)'
    summary: Authenticate with Service Principal
    fullName: >-
      azure.authenticateWithServicePrincipal(clientId, clientSecret, tenant,
      callback)
    type: Function
    syntax:
      parameters:
        - id: clientId
          type:
            - string
          description: Id of the service principal
        - id: clientSecret
          type:
            - string
          description: Password/Secret of the service principal
        - id: tenant
          type:
            - string
          description: The tenant id of the service principal.
        - id: callback
          type:
            - function
          description: The callback to handle the error and result.
      content: >-
        function authenticateWithServicePrincipal(clientId, clientSecret,
        tenant, callback)
    langs:
      - js
  - uid: azure.create
    id: azure.create
    name: create()
    summary: "formDataFilter - This filter is resposnsible for setting the form property on the \rrequest object if the Content-Type header is 'application/x-www-form-urlencoded'"
    fullName: azure.create()
    type: Function
    syntax:
      content: function create()
    langs:
      - js
  - uid: azure.setAgent
    id: azure.setAgent
    name: 'setAgent(resouce, proxy)'
    summary: "Set the Agent to use for the request\rResult depends on proxy settings and protocol"
    fullName: 'azure.setAgent(resouce, proxy)'
    type: Function
    syntax:
      parameters:
        - id: resouce
          type:
            - object
          description: request options for request.
        - id: proxy
          type:
            - object
          description: parsed url for the proxy.
      content: 'function setAgent(resouce, proxy)'
    langs:
      - js
  - uid: azure.createWithSink
    id: azure.createWithSink
    name: createWithSink()
    summary: "create a new http client pipeline that ends with a call to the\rrequest library using the given sink function to actually make\rthe http request."
    fullName: azure.createWithSink()
    type: Function
    syntax:
      return:
        description: 'function(request, callback) - function to make a request.'
      content: function createWithSink()
    langs:
      - js
  - uid: azure.createCompositeFilter
    id: azure.createCompositeFilter
    name: createCompositeFilter(filters)
    summary: "Create a new filter that's a combination of all the filters\rgiven on the arguments list."
    fullName: azure.createCompositeFilter(filters)
    type: Function
    syntax:
      parameters:
        - id: filters
          type:
            - azure.varargs
          description: "to run. First filter in the list is closest to\rthe sink, so last to run before the request, first to run on the response:\rexactly the same as if you called pipeline.add or passed the list to\rpipeline.create."
      return:
        description: the new filter.
      content: function createCompositeFilter(filters)
    langs:
      - js
  - uid: azure.interimStream
    id: azure.interimStream
    name: interimStream(setPipe)
    summary: "Creates an interim stream which can be returned to the\rcaller synchronously, so that async operations can still\rhook up to the streaming output afterwards. Used when\rfilters need to do async work before they can call the rest\rof the pipeline."
    fullName: azure.interimStream(setPipe)
    type: Function
    syntax:
      parameters:
        - id: setPipe
          description: "function(input, output)\r   this function is invoked synchronously, to pass the two\r   underlying streams. input should be piped to the result of\r   the next filter. The result of next should be piped to output.\r   It's common to pause the input stream to prevent data loss\r   before actually returning the real stream to hook up to."
      return:
        description: "a duplex stream that writes to the input stream and\rproduces data from the output stream."
      content: function interimStream(setPipe)
    langs:
      - js
  - uid: azure.serializeObject
    id: azure.serializeObject
    name: serializeObject(toSerialize)
    summary: "Serializes the JSON Object. It serializes Buffer object to a \r'base64' encoded string and a Date Object to a string \rcompliant with ISO8601 format."
    fullName: azure.serializeObject(toSerialize)
    type: Function
    syntax:
      parameters:
        - id: toSerialize
          type:
            - Object
          description: ''
      return:
        type:
          - Object
        description: serializedObject
      content: function serializeObject(toSerialize)
    langs:
      - js
  - uid: azure.serialize
    id: azure.serialize
    name: 'serialize(mapper, object, objectName)'
    summary: Serialize the given object based on its metadata defined in the mapper
    fullName: 'azure.serialize(mapper, object, objectName)'
    type: Function
    syntax:
      parameters:
        - id: mapper
          type:
            - object
          description: The mapper which defines the metadata of the serializable object
        - id: object
          type:
            - object
            - string
            - Array
            - number
            - boolean
            - Date
            - azure.stream
          description: A valid Javascript object to be serialized
        - id: objectName
          type:
            - string
          description: Name of the serialized object
      return:
        type:
          - object
          - string
          - Array
          - number
          - boolean
          - Date
          - azure.stream
        description: A valid serialized Javascript object
      content: 'function serialize(mapper, object, objectName)'
    langs:
      - js
  - uid: azure.deserialize
    id: azure.deserialize
    name: 'deserialize(mapper, responseBody, objectName)'
    summary: Deserialize the given object based on its metadata defined in the mapper
    fullName: 'azure.deserialize(mapper, responseBody, objectName)'
    type: Function
    syntax:
      parameters:
        - id: mapper
          type:
            - object
          description: The mapper which defines the metadata of the serializable object
        - id: responseBody
          type:
            - object
            - string
            - Array
            - number
            - boolean
            - Date
            - azure.stream
          description: A valid Javascript entity to be deserialized
        - id: objectName
          type:
            - string
          description: Name of the deserialized object
      return:
        type:
          - object
          - string
          - Array
          - number
          - boolean
          - Date
          - azure.stream
        description: A valid deserialized Javascript object
      content: 'function deserialize(mapper, responseBody, objectName)'
    langs:
      - js
  - uid: azure.urlIsHTTPS
    id: azure.urlIsHTTPS
    name: urlIsHTTPS(urlToCheck)
    summary: Checks if a parsed URL is HTTPS
    fullName: azure.urlIsHTTPS(urlToCheck)
    type: Function
    syntax:
      parameters:
        - id: urlToCheck
          type:
            - object
          description: The url to check
      return:
        type:
          - azure.bool
        description: True if the URL is HTTPS; false otherwise.
      content: function urlIsHTTPS(urlToCheck)
    langs:
      - js
  - uid: azure.objectIsNull
    id: azure.objectIsNull
    name: objectIsNull(value)
    summary: Checks if a value is null or undefined.
    fullName: azure.objectIsNull(value)
    type: Function
    syntax:
      parameters:
        - id: value
          type:
            - object
          description: The value to check for null or undefined.
      return:
        type:
          - azure.bool
        description: 'True if the value is null or undefined, false otherwise.'
      content: function objectIsNull(value)
    langs:
      - js
  - uid: azure.encodeUri
    id: azure.encodeUri
    name: encodeUri(uri)
    summary: Encodes an URI.
    fullName: azure.encodeUri(uri)
    type: Function
    syntax:
      parameters:
        - id: uri
          type:
            - string
          description: The URI to be encoded.
      return:
        type:
          - string
        description: The encoded URI.
      content: function encodeUri(uri)
    langs:
      - js
  - uid: azure.stripResponse
    id: azure.stripResponse
    name: stripResponse(response)
    summary: "Returns a stripped version of the Http Response which only contains body, \rheaders and the statusCode."
    fullName: azure.stripResponse(response)
    type: Function
    syntax:
      parameters:
        - id: response
          type:
            - azure.stream
          description: The Http Response
      return:
        type:
          - object
        description: strippedResponse - The stripped version of Http Response.
      content: function stripResponse(response)
    langs:
      - js
  - uid: azure.stripRequest
    id: azure.stripRequest
    name: stripRequest(request)
    summary: "Returns a stripped version of the Http Request that does not contain the \rAuthorization header."
    fullName: azure.stripRequest(request)
    type: Function
    syntax:
      parameters:
        - id: request
          type:
            - object
          description: The Http Request object
      return:
        type:
          - object
        description: strippedRequest - The stripped version of Http Request.
      content: function stripRequest(request)
    langs:
      - js
  - uid: azure.isValidUuid
    id: azure.isValidUuid
    name: isValidUuid(uuid)
    summary: Validates the given uuid as a string
    fullName: azure.isValidUuid(uuid)
    type: Function
    syntax:
      parameters:
        - id: uuid
          type:
            - string
          description: The uuid as a string that needs to be validated
      return:
        type:
          - boolean
        description: result - True if the uuid is valid; false otherwise.
      content: function isValidUuid(uuid)
    langs:
      - js
  - uid: azure.objectValues
    id: azure.objectValues
    name: objectValues(obj)
    summary: "Provides an array of values of an object. For example \rfor a given object { 'a': 'foo', 'b': 'bar' }, the method returns ['foo', 'bar']."
    fullName: azure.objectValues(obj)
    type: Function
    syntax:
      parameters:
        - id: obj
          type:
            - object
          description: >-
            An object whose properties need to be enumerated so that it's values
            can be provided as an array
      return:
        type:
          - array
        description: result - An array of values of the given object.
      content: function objectValues(obj)
    langs:
      - js
  - uid: azure.generateUuid
    id: azure.generateUuid
    name: generateUuid()
    summary: Generated UUID
    fullName: azure.generateUuid()
    type: Function
    syntax:
      return:
        type:
          - string
        description: RFC4122 v4 UUID.
      content: function generateUuid()
    langs:
      - js
  - uid: azure.homeDir
    id: azure.homeDir
    name: homeDir()
    summary: Provides path to home directory.
    fullName: azure.homeDir()
    type: Function
    syntax:
      content: function homeDir()
    langs:
      - js
  - uid: azure.checkRPNotRegisteredError
    id: azure.checkRPNotRegisteredError
    name: checkRPNotRegisteredError(body)
    summary: "Validates the error code and message associated with 409 response status code. If it matches to that of \rRP not registered then it returns the name of the RP else returns undefined."
    fullName: azure.checkRPNotRegisteredError(body)
    type: Function
    syntax:
      parameters:
        - id: body
          type:
            - string
          description: The response body received after making the original request.
      return:
        type:
          - string
        description: result The name of the RP if condition is satisfied else undefined.
      content: function checkRPNotRegisteredError(body)
    langs:
      - js
  - uid: azure.extractSubscriptionUrl
    id: azure.extractSubscriptionUrl
    name: extractSubscriptionUrl(url)
    summary: "Extracts the first part of the URL, just after subscription: \rhttps://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/"
    fullName: azure.extractSubscriptionUrl(url)
    type: Function
    syntax:
      parameters:
        - id: url
          type:
            - string
          description: The original request url
      return:
        type:
          - string
        description: urlPrefix The url prefix as explained above.
      content: function extractSubscriptionUrl(url)
    langs:
      - js
  - uid: azure.registerRP
    id: azure.registerRP
    name: 'registerRP(urlPrefix, provider, originalRequest, callback)'
    summary: Registers the given provider.
    fullName: 'azure.registerRP(urlPrefix, provider, originalRequest, callback)'
    type: Function
    syntax:
      parameters:
        - id: urlPrefix
          type:
            - string
          description: >-
            https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/
        - id: provider
          type:
            - string
          description: The provider name to be registered.
        - id: originalRequest
          type:
            - object
          description: "The original request sent by the user that returned a 409 response\rwith a message that the provider is not registered."
        - id: callback
          type:
            - azure.registrationCallback
          description: The callback that handles the RP registration
      content: 'function registerRP(urlPrefix, provider, originalRequest, callback)'
    langs:
      - js
  - uid: azure.getRegistrationStatus
    id: azure.getRegistrationStatus
    name: 'getRegistrationStatus(url, originalRequest, callback)'
    summary: "Polls the registration status of the provider that was registered. Polling happens at an interval of 30 seconds.\rPolling will happen till the registrationState property of the response body is 'Registered'."
    fullName: 'azure.getRegistrationStatus(url, originalRequest, callback)'
    type: Function
    syntax:
      parameters:
        - id: url
          type:
            - string
          description: The request url for polling
        - id: originalRequest
          type:
            - object
          description: "The original request sent by the user that returned a 409 response\rwith a message that the provider is not registered."
        - id: callback
          type:
            - azure.registrationCallback
          description: The callback that handles the RP registration.
      content: 'function getRegistrationStatus(url, originalRequest, callback)'
    langs:
      - js
  - uid: azure.interactive
    id: azure.interactive
    name: 'interactive(options, optionalCallback)'
    summary: "Provides a url and code that needs to be copy and pasted in a browser and authenticated over there. If successful, the user will get a \rDeviceTokenCredentials object and the list of subscriptions associated with that userId across all the applicable tenants."
    fullName: 'azure.interactive(options, optionalCallback)'
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{DeviceTokenCredentials} The DeviceTokenCredentials object.'
        value: '{DeviceTokenCredentials} The DeviceTokenCredentials object.'
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: options
          type:
            - object
          description: Object representing optional parameters.
          optional: true
        - id: options.clientId
          type:
            - string
          description: "The active directory application client id.\rSee [Active Directory Quickstart for .Net](https://azure.microsoft.com/en-us/documentation/articles/active-directory-devquickstarts-dotnet/) \rfor an example."
          optional: true
        - id: options.tokenAudience
          type:
            - string
          description: "The audience for which the token is requested. Valid value is 'graph'.If tokenAudience is provided \rthen domain should also be provided its value should not be the default 'common' tenant. It must be a string (preferrably in a guid format)."
          optional: true
        - id: options.domain
          type:
            - string
          description: >-
            The domain or tenant id containing this application. Default value
            is 'common'.
          optional: true
        - id: options.environment
          type:
            - azure.AzureEnvironment
          description: >-
            The azure environment to authenticate with. Default environment is
            "Public Azure".
          optional: true
        - id: options.tokenCache
          type:
            - object
          description: The token cache. Default value is the MemoryCache object from adal.
          optional: true
        - id: options.language
          type:
            - object
          description: >-
            The language code specifying how the message should be localized to.
            Default value 'en-us'.
          optional: true
        - id: options.userCodeResponseLogger
          type:
            - object
            - function
          description: "A logger that logs the user code response message required for interactive login. When\rthis option is specified the usercode response message will not be logged to console."
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: "If a callback was passed as the last parameter then it returns the callback else returns a Promise.\r\r   {function} optionalCallback(err, credentials)\r                {Error}  [err]                           - The Error object if an error occurred, null otherwise.\r                {DeviceTokenCredentials} [credentials]   - The DeviceTokenCredentials object.\r                {Array}                [subscriptions]   - List of associated subscriptions across all the applicable tenants.\r   {Promise} A promise is returned."
      content: 'function interactive(options, optionalCallback)'
    langs:
      - js
  - uid: azure.withUsernamePassword
    id: azure.withUsernamePassword
    name: 'withUsernamePassword(username, password, options, optionalCallback)'
    summary: "Provides a UserTokenCredentials object and the list of subscriptions associated with that userId across all the applicable tenants. \rThis method is applicable only for organizational ids that are not 2FA enabled otherwise please use interactive login."
    fullName: 'azure.withUsernamePassword(username, password, options, optionalCallback)'
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{UserTokenCredentials} The UserTokenCredentials object.'
        value: '{UserTokenCredentials} The UserTokenCredentials object.'
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: username
          type:
            - string
          description: The user name for the Organization Id account.
        - id: password
          type:
            - string
          description: The password for the Organization Id account.
        - id: options
          type:
            - object
          description: Object representing optional parameters.
          optional: true
        - id: options.clientId
          type:
            - string
          description: "The active directory application client id. \rSee [Active Directory Quickstart for .Net](https://azure.microsoft.com/en-us/documentation/articles/active-directory-devquickstarts-dotnet/) \rfor an example."
          optional: true
        - id: options.tokenAudience
          type:
            - string
          description: "The audience for which the token is requested. Valid value is 'graph'. If tokenAudience is provided \rthen domain should also be provided and its value should not be the default 'common' tenant. It must be a string (preferrably in a guid format)."
          optional: true
        - id: options.domain
          type:
            - string
          description: >-
            The domain or tenant id containing this application. Default value
            'common'.
          optional: true
        - id: options.environment
          type:
            - azure.AzureEnvironment
          description: The azure environment to authenticate with.
          optional: true
        - id: options.authorizationScheme
          type:
            - string
          description: The authorization scheme. Default value is 'bearer'.
          optional: true
        - id: options.tokenCache
          type:
            - object
          description: The token cache. Default value is the MemoryCache object from adal.
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: "If a callback was passed as the last parameter then it returns the callback else returns a Promise.\r\r   {function} optionalCallback(err, credentials)\r                {Error}  [err]                         - The Error object if an error occurred, null otherwise.\r                {UserTokenCredentials} [credentials]   - The UserTokenCredentials object.\r                {Array}                [subscriptions] - List of associated subscriptions across all the applicable tenants.\r   {Promise} A promise is returned."
      content: >-
        function withUsernamePassword(username, password, options,
        optionalCallback)
    langs:
      - js
  - uid: azure.withServicePrincipalSecret
    id: azure.withServicePrincipalSecret
    name: >-
      withServicePrincipalSecret(clientId, secret, domain, options,
      optionalCallback)
    summary: >-
      Provides an ApplicationTokenCredentials object and the list of
      subscriptions associated with that servicePrinicpalId/clientId across all
      the applicable tenants.
    fullName: >-
      azure.withServicePrincipalSecret(clientId, secret, domain, options,
      optionalCallback)
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{ApplicationTokenCredentials} The ApplicationTokenCredentials object.'
        value: '{ApplicationTokenCredentials} The ApplicationTokenCredentials object.'
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: clientId
          type:
            - string
          description: "The active directory application client id also known as the SPN (ServicePrincipal Name). \rSee [Active Directory Quickstart for .Net](https://azure.microsoft.com/en-us/documentation/articles/active-directory-devquickstarts-dotnet/) \rfor an example."
        - id: secret
          type:
            - string
          description: The application secret for the service principal.
        - id: domain
          type:
            - string
          description: The domain or tenant id containing this application.
        - id: options
          type:
            - object
          description: Object representing optional parameters.
          optional: true
        - id: options.tokenAudience
          type:
            - string
          description: >-
            The audience for which the token is requested. Valid value is
            'graph'.
          optional: true
        - id: options.environment
          type:
            - azure.AzureEnvironment
          description: The azure environment to authenticate with.
          optional: true
        - id: options.authorizationScheme
          type:
            - string
          description: The authorization scheme. Default value is 'bearer'.
          optional: true
        - id: options.tokenCache
          type:
            - object
          description: The token cache. Default value is the MemoryCache object from adal.
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: "If a callback was passed as the last parameter then it returns the callback else returns a Promise.\r\r   {function} optionalCallback(err, credentials)\r                {Error}  [err]                               - The Error object if an error occurred, null otherwise.\r                {ApplicationTokenCredentials} [credentials]  - The ApplicationTokenCredentials object.\r                {Array}                [subscriptions]       - List of associated subscriptions across all the applicable tenants.\r   {Promise} A promise is returned."
      content: >-
        function withServicePrincipalSecret(clientId, secret, domain, options,
        optionalCallback)
    langs:
      - js
  - uid: azure.withAuthFile
    id: azure.withAuthFile
    name: 'withAuthFile(options, optionalCallback)'
    summary: "Before using this method please install az cli from https://github.com/Azure/azure-cli/releases. Then execute `az ad sp create-for-rbac --sdk-auth > ${yourFilename.json}`.\rIf you want to create the sp for a different cloud/environment then please execute:\r1. az cloud list\r2. az cloud set –n <name of the environment>\r3. az ad sp create-for-rbac --sdk-auth > auth.json\r\rIf the service principal is already created then login with service principal info:\r3. az login --service-principal -u <clientId> -p <clientSecret> -t <tenantId>\r4. az account show --sdk-auth > auth.json \r\rAuthenticates using the service principal information provided in the auth file. This method will set \rthe subscriptionId from the auth file to the user provided environment variable in the options \rparameter or the default 'AZURE_SUBSCRIPTION_ID'."
    fullName: 'azure.withAuthFile(options, optionalCallback)'
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{ApplicationTokenCredentials} The ApplicationTokenCredentials object.'
        value: '{ApplicationTokenCredentials} The ApplicationTokenCredentials object.'
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: options
          type:
            - object
          description: Optional parameters
          optional: true
        - id: options.filePath
          type:
            - string
          description: "Absolute file path to the auth file. If not provided \rthen please set the environment variable AZURE_AUTH_LOCATION."
          optional: true
        - id: options.subscriptionEnvVariableName
          type:
            - string
          description: "The subscriptionId environment variable \rname. Default is 'AZURE_SUBSCRIPTION_ID'."
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: "If a callback was passed as the last parameter then it returns the callback else returns a Promise.\r\r   {function} optionalCallback(err, credentials)\r                {Error}  [err]                               - The Error object if an error occurred, null otherwise.\r                {ApplicationTokenCredentials} [credentials]  - The ApplicationTokenCredentials object.\r                {Array}                [subscriptions]       - List of associated subscriptions across all the applicable tenants.\r   {Promise} A promise is returned."
      content: 'function withAuthFile(options, optionalCallback)'
    langs:
      - js
  - uid: azure.withAuthFileWithAuthResponse
    id: azure.withAuthFileWithAuthResponse
    name: withAuthFileWithAuthResponse(options)
    summary: "Before using this method please install az cli from https://github.com/Azure/azure-cli/releases. Then execute `az ad sp create-for-rbac --sdk-auth > ${yourFilename.json}`.\rIf you want to create the sp for a different cloud/environment then please execute:\r1. az cloud list\r2. az cloud set –n <name of the environment>\r3. az ad sp create-for-rbac --sdk-auth > auth.json\r\rIf the service principal is already created then login with service principal info:\r3. az login --service-principal -u <clientId> -p <clientSecret> -t <tenantId>\r4. az account show --sdk-auth > auth.json \r\rAuthenticates using the service principal information provided in the auth file. This method will set \rthe subscriptionId from the auth file to the user provided environment variable in the options \rparameter or the default 'AZURE_SUBSCRIPTION_ID'."
    fullName: azure.withAuthFileWithAuthResponse(options)
    tags:
      - originalTitle: resolve
        title: resolve
        text: >-
          {{credentials: ApplicationTokenCredentials, subscriptions:
          subscriptions[]}} An object with credentials and associated
          subscription info.
        value: >-
          {{credentials: ApplicationTokenCredentials, subscriptions:
          subscriptions[]}} An object with credentials and associated
          subscription info.
      - originalTitle: reject
        title: reject
        text: '{Error} - The error object.'
        value: '{Error} - The error object.'
    type: Function
    syntax:
      parameters:
        - id: options
          type:
            - object
          description: Optional parameters
          optional: true
        - id: options.filePath
          type:
            - string
          description: "Absolute file path to the auth file. If not provided \rthen please set the environment variable AZURE_AUTH_LOCATION."
          optional: true
        - id: options.subscriptionEnvVariableName
          type:
            - string
          description: "The subscriptionId environment variable \rname. Default is 'AZURE_SUBSCRIPTION_ID'."
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned.
      content: function withAuthFileWithAuthResponse(options)
    langs:
      - js
  - uid: azure.withMSI
    id: azure.withMSI
    name: 'withMSI(options, optionalCallback)'
    summary: "Before using this method please install az cli from https://github.com/Azure/azure-cli/releases.\rIf you have an Azure virtual machine provisioned with az cli and has MSI enabled,\ryou can then use this method to get auth tokens from the VM.\r\rTo create a new VM, enable MSI, please execute this command:\raz vm create -g <resource_group_name> -n <vm_name> --assign-identity --image <os_image_name>\rNote: the above command enables a service endpoint on the host, with a default port 50342\r\rTo enable MSI on a already provisioned VM, execute the following command:\raz vm --assign-identity -g <resource_group_name> -n <vm_name> --port <custom_port_number>\r\rTo know more about this command, please execute:\raz vm --assign-identity -h\r\rAuthenticates using the identity service running on an Azure virtual machine.\rThis method makes a request to the authentication service hosted on the VM\rand gets back an access token."
    fullName: 'azure.withMSI(options, optionalCallback)'
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{object} - tokenResponse.'
        value: '{object} - tokenResponse.'
      - originalTitle: reject
        title: reject
        text: '{Error} - error object.'
        value: '{Error} - error object.'
    type: Function
    syntax:
      parameters:
        - id: options
          type:
            - object
          description: Optional parameters
          optional: true
        - id: options.port
          type:
            - string
          description: >-
            port on which the MSI service is running on the host VM. Default
            port is 50342
          optional: true
        - id: options.resource
          type:
            - string
          description: "The resource uri or token audience for which the token is needed.\rFor e.g. it can be:\r- resourcemanagement endpoint \"https://management.azure.com\"(default) \r- management endpoint \"https://management.core.windows.net/\""
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: "If a callback was passed as the last parameter then it returns the callback else returns a Promise.\r\r   {function} optionalCallback(err, credentials)\r                {Error}  [err]                               - The Error object if an error occurred, null otherwise.\r                {object} [tokenResponse]                     - The tokenResponse (token_type and access_token are the two important properties)\r   {Promise} A promise is returned."
      content: 'function withMSI(options, optionalCallback)'
    langs:
      - js
  - uid: azure.withAppServiceMSI
    id: azure.withAppServiceMSI
    name: 'withAppServiceMSI(options, optionalCallback)'
    summary: Authenticate using the App Service MSI.
    fullName: 'azure.withAppServiceMSI(options, optionalCallback)'
    tags:
      - originalTitle: resolve
        title: resolve
        text: '{object} - tokenResponse.'
        value: '{object} - tokenResponse.'
      - originalTitle: reject
        title: reject
        text: '{Error} - error object.'
        value: '{Error} - error object.'
    type: Function
    syntax:
      parameters:
        - id: options
          type:
            - object
          description: Optional parameters
          optional: true
        - id: options.msiEndpoint
          type:
            - string
          description: "The local URL from which your app can request tokens.\rEither provide this parameter or set the environment varaible `MSI_ENDPOINT`.\rFor example: `MSI_ENDPOINT=\"http://127.0.0.1:41741/MSI/token/\"`"
          optional: true
        - id: options.msiSecret
          type:
            - string
          description: "The secret used in communication between your code and the local MSI agent.\rEither provide this parameter or set the environment varaible `MSI_SECRET`.\rFor example: `MSI_SECRET=\"69418689F1E342DD946CB82994CDA3CB\"`"
          optional: true
        - id: options.resource
          type:
            - string
          description: "The resource uri or token audience for which the token is needed.\rFor example, it can be:\r- resourcemanagement endpoint \"https://management.azure.com\"(default) \r- management endpoint \"https://management.core.windows.net/\""
          optional: true
        - id: options.msiApiVersion
          type:
            - string
          description: >-
            The api-version of the local MSI agent. Default value is
            "2017-09-01".
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: "If a callback was passed as the last parameter then it returns the callback else returns a Promise.\r\r   {function} optionalCallback(err, credentials)\r                {Error}  [err]                               - The Error object if an error occurred, null otherwise.\r                {object} [tokenResponse]                     - The tokenResponse (token_type and access_token are the two important properties)\r   {Promise} A promise is returned."
      content: 'function withAppServiceMSI(options, optionalCallback)'
    langs:
      - js
references:
  - uid: azure.FileTokenStorage
    name: FileTokenStorage
  - uid: azure.FileTokenCache
    name: FileTokenCache
  - uid: azure.SubscriptionClient
    name: SubscriptionClient
  - uid: azure.Tenants
    name: Tenants
  - uid: azure.Subscriptions
    name: Subscriptions
  - uid: azure.Location list operation response.
    name: Location list operation response.
  - uid: azure.PollingState
    name: PollingState
  - uid: azure.UserTokenCredentials
    name: UserTokenCredentials
  - uid: azure.MSITokenCredentials
    name: MSITokenCredentials
  - uid: azure.MSIAppServiceTokenCredentials
    name: MSIAppServiceTokenCredentials
  - uid: azure.DeviceTokenCredentials
    name: DeviceTokenCredentials
  - uid: azure.CognitiveServicesCredentials
    name: CognitiveServicesCredentials
  - uid: azure.ApplicationTokenCredentials
    name: ApplicationTokenCredentials
  - uid: azure.BaseResource
    name: BaseResource
  - uid: azure.AzureServiceClient
    name: AzureServiceClient
  - uid: azure.AzureEnvironment
    name: AzureEnvironment
  - uid: azure.TestClient
    name: TestClient
  - uid: azure.PetAP
    name: PetAP
  - uid: azure.WebResource
    name: WebResource
  - uid: azure.ServiceClient
    name: ServiceClient
  - uid: azure.HttpOperationResponse
    name: HttpOperationResponse
  - uid: azure.SystemErrorRetryPolicyFilter
    name: SystemErrorRetryPolicyFilter
  - uid: azure.ExponentialRetryPolicyFilter
    name: ExponentialRetryPolicyFilter
  - uid: azure.TokenCredentials
    name: TokenCredentials
  - uid: azure.BasicAuthenticationCredentials
    name: BasicAuthenticationCredentials
  - uid: azure.ApiKeyCredentials
    name: ApiKeyCredentials
  - uid: azure.ResourceManagementClient
    name: ResourceManagementClient
  - uid: azure.Tags
    name: Tags
  - uid: azure.Resources
    name: Resources
  - uid: azure.ResourceGroups
    name: ResourceGroups
  - uid: azure.Providers
    name: Providers
  - uid: azure.Deployments
    name: Deployments
  - uid: azure.DeploymentOperations
    name: DeploymentOperations
  - uid: azure.TemplateLink
    name: TemplateLink
  - uid: azure.TargetResource
    name: TargetResource
  - uid: azure.TagValue
    name: TagValue
  - uid: azure.TagsListResult
    name: TagsListResult
  - uid: azure.TagDetails
    name: TagDetails
  - uid: azure.TagCount
    name: TagCount
  - uid: azure.SubResource
    name: SubResource
  - uid: azure.Sku
    name: Sku
  - uid: azure.ResourcesMoveInfo
    name: ResourcesMoveInfo
  - uid: azure.ResourceProviderOperationDisplayProperties
    name: ResourceProviderOperationDisplayProperties
  - uid: azure.ResourceManagementErrorWithDetails
    name: ResourceManagementErrorWithDetails
  - uid: azure.ResourceListResult
    name: ResourceListResult
  - uid: azure.ResourceGroupProperties
    name: ResourceGroupProperties
  - uid: azure.ResourceGroupPatchable
    name: ResourceGroupPatchable
  - uid: azure.ResourceGroupListResult
    name: ResourceGroupListResult
  - uid: azure.ResourceGroupFilter
    name: ResourceGroupFilter
  - uid: azure.ResourceGroupExportResult
    name: ResourceGroupExportResult
  - uid: azure.ResourceGroup
    name: ResourceGroup
  - uid: azure.Resource
    name: Resource
  - uid: azure.ProviderResourceType
    name: ProviderResourceType
  - uid: azure.ProviderListResult
    name: ProviderListResult
  - uid: azure.Provider
    name: Provider
  - uid: azure.Plan
    name: Plan
  - uid: azure.ParametersLink
    name: ParametersLink
  - uid: azure.Identity
    name: Identity
  - uid: azure.HttpMessage
    name: HttpMessage
  - uid: azure.GenericResourceFilter
    name: GenericResourceFilter
  - uid: azure.GenericResource
    name: GenericResource
  - uid: azure.ExportTemplateRequest
    name: ExportTemplateRequest
  - uid: azure.DeploymentValidateResult
    name: DeploymentValidateResult
  - uid: azure.DeploymentPropertiesExtended
    name: DeploymentPropertiesExtended
  - uid: azure.DeploymentProperties
    name: DeploymentProperties
  - uid: azure.DeploymentOperationsListResult
    name: DeploymentOperationsListResult
  - uid: azure.DeploymentOperationProperties
    name: DeploymentOperationProperties
  - uid: azure.DeploymentOperation
    name: DeploymentOperation
  - uid: azure.DeploymentListResult
    name: DeploymentListResult
  - uid: azure.DeploymentExtendedFilter
    name: DeploymentExtendedFilter
  - uid: azure.DeploymentExtended
    name: DeploymentExtended
  - uid: azure.DeploymentExportResult
    name: DeploymentExportResult
  - uid: azure.Deployment
    name: Deployment
  - uid: azure.Dependency
    name: Dependency
  - uid: azure.DebugSetting
    name: DebugSetting
  - uid: azure.BasicDependency
    name: BasicDependency
  - uid: azure.AliasType
    name: AliasType
  - uid: azure.AliasPathType
    name: AliasPathType
  - uid: azure.SuiteBase
    name: SuiteBase
